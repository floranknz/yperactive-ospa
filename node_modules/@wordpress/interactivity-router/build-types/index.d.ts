export namespace state {
    let url: string;
    namespace navigation {
        let hasStarted: boolean;
        let hasFinished: boolean;
        let texts: {};
    }
}
export namespace actions {
    /**
     * Navigates to the specified page.
     *
     * This function normalizes the passed href, fetchs the page HTML if
     * needed, and updates any interactive regions whose contents have
     * changed. It also creates a new entry in the browser session history.
     *
     * @param {string}  href                               The page href.
     * @param {Object}  [options]                          Options object.
     * @param {boolean} [options.force]                    If true, it forces re-fetching the URL.
     * @param {string}  [options.html]                     HTML string to be used instead of fetching the requested URL.
     * @param {boolean} [options.replace]                  If true, it replaces the current entry in the browser session history.
     * @param {number}  [options.timeout]                  Time until the navigation is aborted, in milliseconds. Default is 10000.
     * @param {boolean} [options.loadingAnimation]         Whether an animation should be shown while navigating. Default to `true`.
     * @param {boolean} [options.screenReaderAnnouncement] Whether a message for screen readers should be announced while navigating. Default to `true`.
     *
     * @return {Promise} Promise that resolves once the navigation is completed or aborted.
     */
    function navigate(href: string, options?: {
        force?: boolean;
        html?: string;
        replace?: boolean;
        timeout?: number;
        loadingAnimation?: boolean;
        screenReaderAnnouncement?: boolean;
    }): Promise<any>;
    /**
     * Prefetchs the page with the passed URL.
     *
     * The function normalizes the URL and stores internally the fetch
     * promise, to avoid triggering a second fetch for an ongoing request.
     *
     * @param {string}  url             The page URL.
     * @param {Object}  [options]       Options object.
     * @param {boolean} [options.force] Force fetching the URL again.
     * @param {string}  [options.html]  HTML string to be used instead of fetching the requested URL.
     */
    function prefetch(url: string, options?: {
        force?: boolean;
        html?: string;
    }): void;
}
//# sourceMappingURL=index.d.ts.map