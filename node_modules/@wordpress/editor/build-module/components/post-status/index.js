import { createElement, Fragment } from "react";
/**
 * External dependencies
 */
import clsx from 'clsx';

/**
 * WordPress dependencies
 */
import { Button, CheckboxControl, Dropdown, __experimentalText as Text, __experimentalVStack as VStack, TextControl, RadioControl } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { useDispatch, useSelect } from '@wordpress/data';
import { useState, useMemo } from '@wordpress/element';
import { store as coreStore } from '@wordpress/core-data';
import { __experimentalInspectorPopoverHeader as InspectorPopoverHeader } from '@wordpress/block-editor';
import { useInstanceId } from '@wordpress/compose';
import { Icon, chevronDownSmall } from '@wordpress/icons';

/**
 * Internal dependencies
 */
import { TEMPLATE_POST_TYPE, TEMPLATE_PART_POST_TYPE, PATTERN_POST_TYPE, NAVIGATION_POST_TYPE } from '../../store/constants';
import PostPanelRow from '../post-panel-row';
import { store as editorStore } from '../../store';
function PostStatusLabel({
  canEdit
}) {
  const status = useSelect(select => select(editorStore).getEditedPostAttribute('status'), []);
  let statusLabel;
  switch (status) {
    case 'publish':
      statusLabel = __('Published');
      break;
    case 'future':
      statusLabel = __('Scheduled');
      break;
    case 'draft':
    case 'auto-draft':
      statusLabel = __('Draft');
      break;
    case 'pending':
      statusLabel = __('Pending');
      break;
    case 'private':
      statusLabel = __('Private');
      break;
  }
  return createElement(Text, {
    className: clsx('editor-post-status-label', {
      [` has-status-${status}`]: !!status,
      'has-icon': canEdit
    })
  }, statusLabel, canEdit && createElement(Icon, {
    icon: chevronDownSmall
  }));
}
const STATUS_OPTIONS = [{
  label: createElement(Fragment, null, __('Draft'), createElement(Text, {
    variant: "muted",
    size: 12
  }, __('Not ready to publish.'))),
  value: 'draft'
}, {
  label: createElement(Fragment, null, __('Pending'), createElement(Text, {
    variant: "muted",
    size: 12
  }, __('Waiting for review before publishing.'))),
  value: 'pending'
}, {
  label: createElement(Fragment, null, __('Private'), createElement(Text, {
    variant: "muted",
    size: 12
  }, __('Only visible to site admins and editors.'))),
  value: 'private'
}, {
  label: createElement(Fragment, null, __('Scheduled'), createElement(Text, {
    variant: "muted",
    size: 12
  }, __('Publish automatically on a chosen date.'))),
  value: 'future'
}, {
  label: createElement(Fragment, null, __('Published'), createElement(Text, {
    variant: "muted",
    size: 12
  }, __('Visible to everyone.'))),
  value: 'publish'
}];
const DESIGN_POST_TYPES = [TEMPLATE_POST_TYPE, TEMPLATE_PART_POST_TYPE, PATTERN_POST_TYPE, NAVIGATION_POST_TYPE];
export default function PostStatus() {
  const {
    status,
    date,
    password,
    postId,
    postType,
    canEdit
  } = useSelect(select => {
    var _getCurrentPost$_link;
    const {
      getEditedPostAttribute,
      getCurrentPostId,
      getCurrentPostType,
      getCurrentPost
    } = select(editorStore);
    return {
      status: getEditedPostAttribute('status'),
      date: getEditedPostAttribute('date'),
      password: getEditedPostAttribute('password'),
      postId: getCurrentPostId(),
      postType: getCurrentPostType(),
      canEdit: (_getCurrentPost$_link = getCurrentPost()._links?.['wp:action-publish']) !== null && _getCurrentPost$_link !== void 0 ? _getCurrentPost$_link : false
    };
  }, []);
  const [showPassword, setShowPassword] = useState(!!password);
  const passwordInputId = useInstanceId(PostStatus, 'editor-change-status__password-input');
  const {
    editEntityRecord
  } = useDispatch(coreStore);
  const [popoverAnchor, setPopoverAnchor] = useState(null);
  // Memoize popoverProps to avoid returning a new object every time.
  const popoverProps = useMemo(() => ({
    // Anchor the popover to the middle of the entire row so that it doesn't
    // move around when the label changes.
    anchor: popoverAnchor,
    'aria-label': __('Status & visibility'),
    headerTitle: __('Status & visibility'),
    placement: 'left-start',
    offset: 36,
    shift: true
  }), [popoverAnchor]);
  if (DESIGN_POST_TYPES.includes(postType)) {
    return null;
  }
  const updatePost = ({
    status: newStatus = status,
    password: newPassword = password,
    date: newDate = date
  }) => {
    editEntityRecord('postType', postType, postId, {
      status: newStatus,
      date: newDate,
      password: newPassword
    });
  };
  const handleTogglePassword = value => {
    setShowPassword(value);
    if (!value) {
      updatePost({
        password: ''
      });
    }
  };
  const handleStatus = value => {
    let newDate = date;
    let newPassword = password;
    if (status === 'future' && new Date(date) > new Date()) {
      newDate = null;
    } else if (value === 'future') {
      if (!date || new Date(date) < new Date()) {
        newDate = new Date();
        newDate.setDate(newDate.getDate() + 7);
      }
    }
    if (value === 'private' && password) {
      newPassword = '';
    }
    updatePost({
      status: value,
      date: newDate,
      password: newPassword
    });
  };
  return createElement(PostPanelRow, {
    label: __('Status'),
    ref: setPopoverAnchor
  }, canEdit ? createElement(Dropdown, {
    className: "editor-post-status",
    contentClassName: "editor-change-status__content",
    popoverProps: popoverProps,
    focusOnMount: true,
    renderToggle: ({
      onToggle
    }) => createElement(Button, {
      className: "editor-post-status-trigger",
      onClick: onToggle
    }, createElement(PostStatusLabel, {
      canEdit: canEdit
    })),
    renderContent: ({
      onClose
    }) => createElement(Fragment, null, createElement(InspectorPopoverHeader, {
      title: __('Status & visibility'),
      onClose: onClose
    }), createElement("form", null, createElement(VStack, {
      spacing: 4
    }, createElement(RadioControl, {
      className: "editor-change-status__options",
      hideLabelFromVision: true,
      label: __('Status'),
      options: STATUS_OPTIONS,
      onChange: handleStatus,
      selected: status === 'auto-draft' ? 'draft' : status
    }), status !== 'private' && createElement(VStack, {
      as: "fieldset",
      spacing: 4,
      className: "editor-change-status__password-fieldset"
    }, createElement(CheckboxControl, {
      __nextHasNoMarginBottom: true,
      label: __('Password protected'),
      help: __('Only visible to those who know the password'),
      checked: showPassword,
      onChange: handleTogglePassword
    }), showPassword && createElement("div", {
      className: "editor-change-status__password-input"
    }, createElement(TextControl, {
      label: __('Password'),
      onChange: value => updatePost({
        password: value
      }),
      value: password,
      placeholder: __('Use a secure password'),
      type: "text",
      id: passwordInputId,
      __next40pxDefaultSize: true,
      __nextHasNoMarginBottom: true
    }))))))
  }) : createElement("div", {
    className: "editor-post-status"
  }, createElement(PostStatusLabel, null)));
}
//# sourceMappingURL=index.js.map