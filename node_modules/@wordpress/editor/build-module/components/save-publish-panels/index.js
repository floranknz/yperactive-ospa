import { createElement, Fragment } from "react";
/**
 * WordPress dependencies
 */
import { useSelect, useDispatch } from '@wordpress/data';
import { Button, createSlotFill } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { useCallback } from '@wordpress/element';

/**
 * Internal dependencies
 */
import EntitiesSavedStates from '../entities-saved-states';
import PostPublishPanel from '../post-publish-panel';
import PluginPrePublishPanel from '../plugin-pre-publish-panel';
import PluginPostPublishPanel from '../plugin-post-publish-panel';
import { store as editorStore } from '../../store';
const {
  Fill,
  Slot
} = createSlotFill('ActionsPanel');
export const ActionsPanelFill = Fill;
export default function SavePublishPanels({
  setEntitiesSavedStatesCallback,
  closeEntitiesSavedStates,
  isEntitiesSavedStatesOpen,
  forceIsDirtyPublishPanel
}) {
  const {
    closePublishSidebar,
    togglePublishSidebar
  } = useDispatch(editorStore);
  const {
    publishSidebarOpened,
    hasNonPostEntityChanges
  } = useSelect(select => ({
    publishSidebarOpened: select(editorStore).isPublishSidebarOpened(),
    hasNonPostEntityChanges: select(editorStore).hasNonPostEntityChanges()
  }), []);
  const openEntitiesSavedStates = useCallback(() => setEntitiesSavedStatesCallback(true), []);

  // It is ok for these components to be unmounted when not in visual use.
  // We don't want more than one present at a time, decide which to render.
  let unmountableContent;
  if (publishSidebarOpened) {
    unmountableContent = createElement(PostPublishPanel, {
      onClose: closePublishSidebar,
      forceIsDirty: forceIsDirtyPublishPanel,
      PrePublishExtension: PluginPrePublishPanel.Slot,
      PostPublishExtension: PluginPostPublishPanel.Slot
    });
  } else if (hasNonPostEntityChanges) {
    unmountableContent = createElement("div", {
      className: "editor-layout__toggle-entities-saved-states-panel"
    }, createElement(Button, {
      variant: "secondary",
      className: "editor-layout__toggle-entities-saved-states-panel-button",
      onClick: openEntitiesSavedStates,
      "aria-expanded": false
    }, __('Open save panel')));
  } else {
    unmountableContent = createElement("div", {
      className: "editor-layout__toggle-publish-panel"
    }, createElement(Button, {
      variant: "secondary",
      className: "editor-layout__toggle-publish-panel-button",
      onClick: togglePublishSidebar,
      "aria-expanded": false
    }, __('Open publish panel')));
  }

  // Since EntitiesSavedStates controls its own panel, we can keep it
  // always mounted to retain its own component state (such as checkboxes).
  return createElement(Fragment, null, isEntitiesSavedStatesOpen && createElement(EntitiesSavedStates, {
    close: closeEntitiesSavedStates
  }), createElement(Slot, {
    bubblesVirtually: true
  }), !isEntitiesSavedStatesOpen && unmountableContent);
}
//# sourceMappingURL=index.js.map