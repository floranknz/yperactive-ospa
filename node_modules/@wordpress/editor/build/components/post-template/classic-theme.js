"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _i18n = require("@wordpress/i18n");
var _components = require("@wordpress/components");
var _data = require("@wordpress/data");
var _coreData = require("@wordpress/core-data");
var _blockEditor = require("@wordpress/block-editor");
var _element = require("@wordpress/element");
var _icons = require("@wordpress/icons");
var _notices = require("@wordpress/notices");
var _store = require("../../store");
var _createNewTemplateModal = _interopRequireDefault(require("./create-new-template-modal"));
var _hooks = require("./hooks");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const POPOVER_PROPS = {
  className: 'editor-post-template__dropdown',
  placement: 'bottom-start'
};
function PostTemplateToggle({
  isOpen,
  onClick
}) {
  const templateTitle = (0, _data.useSelect)(select => {
    const templateSlug = select(_store.store).getEditedPostAttribute('template');
    const {
      supportsTemplateMode,
      availableTemplates
    } = select(_store.store).getEditorSettings();
    if (!supportsTemplateMode && availableTemplates[templateSlug]) {
      return availableTemplates[templateSlug];
    }
    const template = select(_coreData.store).canUser('create', 'templates') && select(_store.store).getCurrentTemplateId();
    return template?.title || template?.slug || availableTemplates?.[templateSlug];
  }, []);
  return (0, _react.createElement)(_components.Button, {
    __next40pxDefaultSize: true,
    variant: "tertiary",
    "aria-expanded": isOpen,
    "aria-label": (0, _i18n.__)('Template options'),
    onClick: onClick
  }, templateTitle !== null && templateTitle !== void 0 ? templateTitle : (0, _i18n.__)('Default template'));
}
function PostTemplateDropdownContent({
  onClose
}) {
  var _options$find, _selectedOption$value;
  const allowSwitchingTemplate = (0, _hooks.useAllowSwitchingTemplates)();
  const {
    availableTemplates,
    fetchedTemplates,
    selectedTemplateSlug,
    canCreate,
    canEdit,
    currentTemplateId,
    onNavigateToEntityRecord,
    getEditorSettings
  } = (0, _data.useSelect)(select => {
    const {
      canUser,
      getEntityRecords
    } = select(_coreData.store);
    const editorSettings = select(_store.store).getEditorSettings();
    const canCreateTemplates = canUser('create', 'templates');
    const _currentTemplateId = select(_store.store).getCurrentTemplateId();
    return {
      availableTemplates: editorSettings.availableTemplates,
      fetchedTemplates: canCreateTemplates ? getEntityRecords('postType', 'wp_template', {
        post_type: select(_store.store).getCurrentPostType(),
        per_page: -1
      }) : undefined,
      selectedTemplateSlug: select(_store.store).getEditedPostAttribute('template'),
      canCreate: allowSwitchingTemplate && canCreateTemplates && editorSettings.supportsTemplateMode,
      canEdit: allowSwitchingTemplate && canCreateTemplates && editorSettings.supportsTemplateMode && !!_currentTemplateId,
      currentTemplateId: _currentTemplateId,
      onNavigateToEntityRecord: editorSettings.onNavigateToEntityRecord,
      getEditorSettings: select(_store.store).getEditorSettings
    };
  }, [allowSwitchingTemplate]);
  const options = (0, _element.useMemo)(() => Object.entries({
    ...availableTemplates,
    ...Object.fromEntries((fetchedTemplates !== null && fetchedTemplates !== void 0 ? fetchedTemplates : []).map(({
      slug,
      title
    }) => [slug, title.rendered]))
  }).map(([slug, title]) => ({
    value: slug,
    label: title
  })), [availableTemplates, fetchedTemplates]);
  const selectedOption = (_options$find = options.find(option => option.value === selectedTemplateSlug)) !== null && _options$find !== void 0 ? _options$find : options.find(option => !option.value); // The default option has '' value.

  const {
    editPost
  } = (0, _data.useDispatch)(_store.store);
  const {
    createSuccessNotice
  } = (0, _data.useDispatch)(_notices.store);
  const [isCreateModalOpen, setIsCreateModalOpen] = (0, _element.useState)(false);
  return (0, _react.createElement)("div", {
    className: "editor-post-template__classic-theme-dropdown"
  }, (0, _react.createElement)(_blockEditor.__experimentalInspectorPopoverHeader, {
    title: (0, _i18n.__)('Template'),
    help: (0, _i18n.__)('Templates define the way content is displayed when viewing your site.'),
    actions: canCreate ? [{
      icon: _icons.addTemplate,
      label: (0, _i18n.__)('Add template'),
      onClick: () => setIsCreateModalOpen(true)
    }] : [],
    onClose: onClose
  }), !allowSwitchingTemplate ? (0, _react.createElement)(_components.Notice, {
    status: "warning",
    isDismissible: false
  }, (0, _i18n.__)('The posts page template cannot be changed.')) : (0, _react.createElement)(_components.SelectControl, {
    __next40pxDefaultSize: true,
    __nextHasNoMarginBottom: true,
    hideLabelFromVision: true,
    label: (0, _i18n.__)('Template'),
    value: (_selectedOption$value = selectedOption?.value) !== null && _selectedOption$value !== void 0 ? _selectedOption$value : '',
    options: options,
    onChange: slug => editPost({
      template: slug || ''
    })
  }), canEdit && onNavigateToEntityRecord && (0, _react.createElement)("p", null, (0, _react.createElement)(_components.Button, {
    variant: "link",
    onClick: () => {
      onNavigateToEntityRecord({
        postId: currentTemplateId,
        postType: 'wp_template'
      });
      onClose();
      createSuccessNotice((0, _i18n.__)('Editing template. Changes made here affect all posts and pages that use the template.'), {
        type: 'snackbar',
        actions: [{
          label: (0, _i18n.__)('Go back'),
          onClick: () => getEditorSettings().onNavigateToPreviousEntityRecord()
        }]
      });
    }
  }, (0, _i18n.__)('Edit template'))), isCreateModalOpen && (0, _react.createElement)(_createNewTemplateModal.default, {
    onClose: () => setIsCreateModalOpen(false)
  }));
}
function ClassicThemeControl() {
  return (0, _react.createElement)(_components.Dropdown, {
    popoverProps: POPOVER_PROPS,
    focusOnMount: true,
    renderToggle: ({
      isOpen,
      onToggle
    }) => (0, _react.createElement)(PostTemplateToggle, {
      isOpen: isOpen,
      onClick: onToggle
    }),
    renderContent: ({
      onClose
    }) => (0, _react.createElement)(PostTemplateDropdownContent, {
      onClose: onClose
    })
  });
}
var _default = exports.default = ClassicThemeControl;
//# sourceMappingURL=classic-theme.js.map