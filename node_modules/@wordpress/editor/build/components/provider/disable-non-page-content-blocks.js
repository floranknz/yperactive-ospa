"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DisableNonPageContentBlocks;
var _data = require("@wordpress/data");
var _blockEditor = require("@wordpress/block-editor");
var _element = require("@wordpress/element");
var _hooks = require("@wordpress/hooks");
/**
 * WordPress dependencies
 */

const CONTENT_ONLY_BLOCKS = (0, _hooks.applyFilters)('editor.postContentBlockTypes', ['core/post-title', 'core/post-featured-image', 'core/post-content', 'core/template-part']);

/**
 * Component that when rendered, makes it so that the site editor allows only
 * page content to be edited.
 */
function DisableNonPageContentBlocks() {
  // Note that there are two separate subscription because the result for each
  // returns a new array.
  const contentOnlyIds = (0, _data.useSelect)(select => {
    const {
      getBlocksByName,
      getBlockParents,
      getBlockName
    } = select(_blockEditor.store);
    return getBlocksByName(CONTENT_ONLY_BLOCKS).filter(clientId => getBlockParents(clientId).every(parentClientId => {
      const parentBlockName = getBlockName(parentClientId);
      return (
        // Ignore descendents of the query block.
        parentBlockName !== 'core/query' &&
        // Enable only the top-most block.
        !CONTENT_ONLY_BLOCKS.includes(parentBlockName)
      );
    }));
  }, []);
  const disabledIds = (0, _data.useSelect)(select => {
    const {
      getBlocksByName,
      getBlockOrder
    } = select(_blockEditor.store);
    return getBlocksByName(['core/template-part']).flatMap(clientId => getBlockOrder(clientId));
  }, []);
  const registry = (0, _data.useRegistry)();
  (0, _element.useEffect)(() => {
    const {
      setBlockEditingMode,
      unsetBlockEditingMode
    } = registry.dispatch(_blockEditor.store);
    registry.batch(() => {
      setBlockEditingMode('', 'disabled');
      for (const clientId of contentOnlyIds) {
        setBlockEditingMode(clientId, 'contentOnly');
      }
      for (const clientId of disabledIds) {
        setBlockEditingMode(clientId, 'disabled');
      }
    });
    return () => {
      registry.batch(() => {
        unsetBlockEditingMode('');
        for (const clientId of contentOnlyIds) {
          unsetBlockEditingMode(clientId);
        }
        for (const clientId of disabledIds) {
          unsetBlockEditingMode(clientId);
        }
      });
    };
  }, [contentOnlyIds, disabledIds, registry]);
  return null;
}
//# sourceMappingURL=disable-non-page-content-blocks.js.map