"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PostTaxonomies = PostTaxonomies;
exports.default = void 0;
var _react = require("react");
var _element = require("@wordpress/element");
var _data = require("@wordpress/data");
var _coreData = require("@wordpress/core-data");
var _hierarchicalTermSelector = _interopRequireDefault(require("./hierarchical-term-selector"));
var _flatTermSelector = _interopRequireDefault(require("./flat-term-selector"));
var _store = require("../../store");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const identity = x => x;
function PostTaxonomies({
  taxonomyWrapper = identity
}) {
  const {
    postType,
    taxonomies
  } = (0, _data.useSelect)(select => {
    return {
      postType: select(_store.store).getCurrentPostType(),
      taxonomies: select(_coreData.store).getTaxonomies({
        per_page: -1
      })
    };
  }, []);
  const visibleTaxonomies = (taxonomies !== null && taxonomies !== void 0 ? taxonomies : []).filter(taxonomy =>
  // In some circumstances .visibility can end up as undefined so optional chaining operator required.
  // https://github.com/WordPress/gutenberg/issues/40326
  taxonomy.types.includes(postType) && taxonomy.visibility?.show_ui);
  return visibleTaxonomies.map(taxonomy => {
    const TaxonomyComponent = taxonomy.hierarchical ? _hierarchicalTermSelector.default : _flatTermSelector.default;
    return (0, _react.createElement)(_element.Fragment, {
      key: `taxonomy-${taxonomy.slug}`
    }, taxonomyWrapper((0, _react.createElement)(TaxonomyComponent, {
      slug: taxonomy.slug
    }), taxonomy));
  });
}
var _default = exports.default = PostTaxonomies;
//# sourceMappingURL=index.js.map