"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PostStatus;
var _react = require("react");
var _clsx = _interopRequireDefault(require("clsx"));
var _components = require("@wordpress/components");
var _i18n = require("@wordpress/i18n");
var _data = require("@wordpress/data");
var _element = require("@wordpress/element");
var _coreData = require("@wordpress/core-data");
var _blockEditor = require("@wordpress/block-editor");
var _compose = require("@wordpress/compose");
var _icons = require("@wordpress/icons");
var _constants = require("../../store/constants");
var _postPanelRow = _interopRequireDefault(require("../post-panel-row"));
var _store = require("../../store");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function PostStatusLabel({
  canEdit
}) {
  const status = (0, _data.useSelect)(select => select(_store.store).getEditedPostAttribute('status'), []);
  let statusLabel;
  switch (status) {
    case 'publish':
      statusLabel = (0, _i18n.__)('Published');
      break;
    case 'future':
      statusLabel = (0, _i18n.__)('Scheduled');
      break;
    case 'draft':
    case 'auto-draft':
      statusLabel = (0, _i18n.__)('Draft');
      break;
    case 'pending':
      statusLabel = (0, _i18n.__)('Pending');
      break;
    case 'private':
      statusLabel = (0, _i18n.__)('Private');
      break;
  }
  return (0, _react.createElement)(_components.__experimentalText, {
    className: (0, _clsx.default)('editor-post-status-label', {
      [` has-status-${status}`]: !!status,
      'has-icon': canEdit
    })
  }, statusLabel, canEdit && (0, _react.createElement)(_icons.Icon, {
    icon: _icons.chevronDownSmall
  }));
}
const STATUS_OPTIONS = [{
  label: (0, _react.createElement)(_react.Fragment, null, (0, _i18n.__)('Draft'), (0, _react.createElement)(_components.__experimentalText, {
    variant: "muted",
    size: 12
  }, (0, _i18n.__)('Not ready to publish.'))),
  value: 'draft'
}, {
  label: (0, _react.createElement)(_react.Fragment, null, (0, _i18n.__)('Pending'), (0, _react.createElement)(_components.__experimentalText, {
    variant: "muted",
    size: 12
  }, (0, _i18n.__)('Waiting for review before publishing.'))),
  value: 'pending'
}, {
  label: (0, _react.createElement)(_react.Fragment, null, (0, _i18n.__)('Private'), (0, _react.createElement)(_components.__experimentalText, {
    variant: "muted",
    size: 12
  }, (0, _i18n.__)('Only visible to site admins and editors.'))),
  value: 'private'
}, {
  label: (0, _react.createElement)(_react.Fragment, null, (0, _i18n.__)('Scheduled'), (0, _react.createElement)(_components.__experimentalText, {
    variant: "muted",
    size: 12
  }, (0, _i18n.__)('Publish automatically on a chosen date.'))),
  value: 'future'
}, {
  label: (0, _react.createElement)(_react.Fragment, null, (0, _i18n.__)('Published'), (0, _react.createElement)(_components.__experimentalText, {
    variant: "muted",
    size: 12
  }, (0, _i18n.__)('Visible to everyone.'))),
  value: 'publish'
}];
const DESIGN_POST_TYPES = [_constants.TEMPLATE_POST_TYPE, _constants.TEMPLATE_PART_POST_TYPE, _constants.PATTERN_POST_TYPE, _constants.NAVIGATION_POST_TYPE];
function PostStatus() {
  const {
    status,
    date,
    password,
    postId,
    postType,
    canEdit
  } = (0, _data.useSelect)(select => {
    var _getCurrentPost$_link;
    const {
      getEditedPostAttribute,
      getCurrentPostId,
      getCurrentPostType,
      getCurrentPost
    } = select(_store.store);
    return {
      status: getEditedPostAttribute('status'),
      date: getEditedPostAttribute('date'),
      password: getEditedPostAttribute('password'),
      postId: getCurrentPostId(),
      postType: getCurrentPostType(),
      canEdit: (_getCurrentPost$_link = getCurrentPost()._links?.['wp:action-publish']) !== null && _getCurrentPost$_link !== void 0 ? _getCurrentPost$_link : false
    };
  }, []);
  const [showPassword, setShowPassword] = (0, _element.useState)(!!password);
  const passwordInputId = (0, _compose.useInstanceId)(PostStatus, 'editor-change-status__password-input');
  const {
    editEntityRecord
  } = (0, _data.useDispatch)(_coreData.store);
  const [popoverAnchor, setPopoverAnchor] = (0, _element.useState)(null);
  // Memoize popoverProps to avoid returning a new object every time.
  const popoverProps = (0, _element.useMemo)(() => ({
    // Anchor the popover to the middle of the entire row so that it doesn't
    // move around when the label changes.
    anchor: popoverAnchor,
    'aria-label': (0, _i18n.__)('Status & visibility'),
    headerTitle: (0, _i18n.__)('Status & visibility'),
    placement: 'left-start',
    offset: 36,
    shift: true
  }), [popoverAnchor]);
  if (DESIGN_POST_TYPES.includes(postType)) {
    return null;
  }
  const updatePost = ({
    status: newStatus = status,
    password: newPassword = password,
    date: newDate = date
  }) => {
    editEntityRecord('postType', postType, postId, {
      status: newStatus,
      date: newDate,
      password: newPassword
    });
  };
  const handleTogglePassword = value => {
    setShowPassword(value);
    if (!value) {
      updatePost({
        password: ''
      });
    }
  };
  const handleStatus = value => {
    let newDate = date;
    let newPassword = password;
    if (status === 'future' && new Date(date) > new Date()) {
      newDate = null;
    } else if (value === 'future') {
      if (!date || new Date(date) < new Date()) {
        newDate = new Date();
        newDate.setDate(newDate.getDate() + 7);
      }
    }
    if (value === 'private' && password) {
      newPassword = '';
    }
    updatePost({
      status: value,
      date: newDate,
      password: newPassword
    });
  };
  return (0, _react.createElement)(_postPanelRow.default, {
    label: (0, _i18n.__)('Status'),
    ref: setPopoverAnchor
  }, canEdit ? (0, _react.createElement)(_components.Dropdown, {
    className: "editor-post-status",
    contentClassName: "editor-change-status__content",
    popoverProps: popoverProps,
    focusOnMount: true,
    renderToggle: ({
      onToggle
    }) => (0, _react.createElement)(_components.Button, {
      className: "editor-post-status-trigger",
      onClick: onToggle
    }, (0, _react.createElement)(PostStatusLabel, {
      canEdit: canEdit
    })),
    renderContent: ({
      onClose
    }) => (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)(_blockEditor.__experimentalInspectorPopoverHeader, {
      title: (0, _i18n.__)('Status & visibility'),
      onClose: onClose
    }), (0, _react.createElement)("form", null, (0, _react.createElement)(_components.__experimentalVStack, {
      spacing: 4
    }, (0, _react.createElement)(_components.RadioControl, {
      className: "editor-change-status__options",
      hideLabelFromVision: true,
      label: (0, _i18n.__)('Status'),
      options: STATUS_OPTIONS,
      onChange: handleStatus,
      selected: status === 'auto-draft' ? 'draft' : status
    }), status !== 'private' && (0, _react.createElement)(_components.__experimentalVStack, {
      as: "fieldset",
      spacing: 4,
      className: "editor-change-status__password-fieldset"
    }, (0, _react.createElement)(_components.CheckboxControl, {
      __nextHasNoMarginBottom: true,
      label: (0, _i18n.__)('Password protected'),
      help: (0, _i18n.__)('Only visible to those who know the password'),
      checked: showPassword,
      onChange: handleTogglePassword
    }), showPassword && (0, _react.createElement)("div", {
      className: "editor-change-status__password-input"
    }, (0, _react.createElement)(_components.TextControl, {
      label: (0, _i18n.__)('Password'),
      onChange: value => updatePost({
        password: value
      }),
      value: password,
      placeholder: (0, _i18n.__)('Use a secure password'),
      type: "text",
      id: passwordInputId,
      __next40pxDefaultSize: true,
      __nextHasNoMarginBottom: true
    }))))))
  }) : (0, _react.createElement)("div", {
    className: "editor-post-status"
  }, (0, _react.createElement)(PostStatusLabel, null)));
}
//# sourceMappingURL=index.js.map