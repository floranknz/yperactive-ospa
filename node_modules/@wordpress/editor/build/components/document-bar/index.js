"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DocumentBar;
var _react = require("react");
var _clsx = _interopRequireDefault(require("clsx"));
var _i18n = require("@wordpress/i18n");
var _data = require("@wordpress/data");
var _components = require("@wordpress/components");
var _blockEditor = require("@wordpress/block-editor");
var _icons = require("@wordpress/icons");
var _keycodes = require("@wordpress/keycodes");
var _coreData = require("@wordpress/core-data");
var _commands = require("@wordpress/commands");
var _element = require("@wordpress/element");
var _compose = require("@wordpress/compose");
var _store = require("../../store");
var _lockUnlock = require("../../lock-unlock");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const TYPE_LABELS = {
  // translators: 1: Pattern title.
  wp_pattern: (0, _i18n.__)('Editing pattern: %s'),
  // translators: 1: Navigation menu title.
  wp_navigation: (0, _i18n.__)('Editing navigation menu: %s'),
  // translators: 1: Template title.
  wp_template: (0, _i18n.__)('Editing template: %s'),
  // translators: 1: Template part title.
  wp_template_part: (0, _i18n.__)('Editing template part: %s')
};
const TEMPLATE_POST_TYPES = ['wp_template', 'wp_template_part'];
const GLOBAL_POST_TYPES = [...TEMPLATE_POST_TYPES, 'wp_block', 'wp_navigation'];
const MotionButton = (0, _components.__unstableMotion)(_components.Button);
function DocumentBar() {
  const {
    postType,
    document,
    isResolving,
    templateIcon,
    templateTitle,
    onNavigateToPreviousEntityRecord
  } = (0, _data.useSelect)(select => {
    const {
      getCurrentPostType,
      getCurrentPostId,
      getEditorSettings,
      __experimentalGetTemplateInfo: getTemplateInfo
    } = select(_store.store);
    const {
      getEditedEntityRecord,
      isResolving: isResolvingSelector
    } = select(_coreData.store);
    const _postType = getCurrentPostType();
    const _postId = getCurrentPostId();
    const _document = getEditedEntityRecord('postType', _postType, _postId);
    const _templateInfo = getTemplateInfo(_document);
    return {
      postType: _postType,
      document: _document,
      isResolving: isResolvingSelector('getEditedEntityRecord', 'postType', _postType, _postId),
      templateIcon: (0, _lockUnlock.unlock)(select(_store.store)).getPostIcon(_postType, {
        area: _document?.area
      }),
      templateTitle: _templateInfo.title,
      onNavigateToPreviousEntityRecord: getEditorSettings().onNavigateToPreviousEntityRecord
    };
  }, []);
  const {
    open: openCommandCenter
  } = (0, _data.useDispatch)(_commands.store);
  const isReducedMotion = (0, _compose.useReducedMotion)();
  const isNotFound = !document && !isResolving;
  const isTemplate = TEMPLATE_POST_TYPES.includes(postType);
  const isGlobalEntity = GLOBAL_POST_TYPES.includes(postType);
  const hasBackButton = !!onNavigateToPreviousEntityRecord;
  const title = isTemplate ? templateTitle : document.title;
  const mounted = (0, _element.useRef)(false);
  (0, _element.useEffect)(() => {
    mounted.current = true;
  }, []);
  return (0, _react.createElement)("div", {
    className: (0, _clsx.default)('editor-document-bar', {
      'has-back-button': hasBackButton,
      'is-global': isGlobalEntity
    })
  }, (0, _react.createElement)(_components.__unstableAnimatePresence, null, hasBackButton && (0, _react.createElement)(MotionButton, {
    className: "editor-document-bar__back",
    icon: (0, _i18n.isRTL)() ? _icons.chevronRightSmall : _icons.chevronLeftSmall,
    onClick: event => {
      event.stopPropagation();
      onNavigateToPreviousEntityRecord();
    },
    size: "compact",
    initial: mounted.current ? {
      opacity: 0,
      transform: 'translateX(15%)'
    } : false // Don't show entry animation when DocumentBar mounts.
    ,
    animate: {
      opacity: 1,
      transform: 'translateX(0%)'
    },
    exit: {
      opacity: 0,
      transform: 'translateX(15%)'
    },
    transition: isReducedMotion ? {
      duration: 0
    } : undefined
  }, (0, _i18n.__)('Back'))), isNotFound ? (0, _react.createElement)(_components.__experimentalText, null, (0, _i18n.__)('Document not found')) : (0, _react.createElement)(_components.Button, {
    className: "editor-document-bar__command",
    onClick: () => openCommandCenter(),
    size: "compact"
  }, (0, _react.createElement)(_components.__unstableMotion.div, {
    className: "editor-document-bar__title"
    // Force entry animation when the back button is added or removed.
    ,
    key: hasBackButton,
    initial: mounted.current ? {
      opacity: 0,
      transform: hasBackButton ? 'translateX(15%)' : 'translateX(-15%)'
    } : false // Don't show entry animation when DocumentBar mounts.
    ,
    animate: {
      opacity: 1,
      transform: 'translateX(0%)'
    },
    transition: isReducedMotion ? {
      duration: 0
    } : undefined
  }, (0, _react.createElement)(_blockEditor.BlockIcon, {
    icon: templateIcon
  }), (0, _react.createElement)(_components.__experimentalText, {
    size: "body",
    as: "h1",
    "aria-label": TYPE_LABELS[postType] ?
    // eslint-disable-next-line @wordpress/valid-sprintf
    (0, _i18n.sprintf)(TYPE_LABELS[postType], title) : undefined
  }, title)), (0, _react.createElement)("span", {
    className: "editor-document-bar__shortcut"
  }, _keycodes.displayShortcut.primary('k'))));
}
//# sourceMappingURL=index.js.map