"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PostActions;
var _react = require("react");
var _data = require("@wordpress/data");
var _element = require("@wordpress/element");
var _i18n = require("@wordpress/i18n");
var _components = require("@wordpress/components");
var _icons = require("@wordpress/icons");
var _lockUnlock = require("../../lock-unlock");
var _actions = require("./actions");
var _store = require("../../store");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const {
  DropdownMenuV2: DropdownMenu,
  DropdownMenuGroupV2: DropdownMenuGroup,
  DropdownMenuItemV2: DropdownMenuItem,
  DropdownMenuItemLabelV2: DropdownMenuItemLabel,
  kebabCase
} = (0, _lockUnlock.unlock)(_components.privateApis);
function PostActions({
  onActionPerformed,
  buttonProps
}) {
  const [isActionsMenuOpen, setIsActionsMenuOpen] = (0, _element.useState)(false);
  const {
    item,
    postType
  } = (0, _data.useSelect)(select => {
    const {
      getCurrentPostType,
      getCurrentPost
    } = select(_store.store);
    return {
      item: getCurrentPost(),
      postType: getCurrentPostType()
    };
  }, []);
  const allActions = (0, _actions.usePostActions)(postType, onActionPerformed);
  const actions = (0, _element.useMemo)(() => {
    return allActions.filter(action => {
      return !action.isEligible || action.isEligible(item);
    });
  }, [allActions, item]);
  return (0, _react.createElement)(DropdownMenu, {
    open: isActionsMenuOpen,
    trigger: (0, _react.createElement)(_components.Button, {
      size: "small",
      icon: _icons.moreVertical,
      label: (0, _i18n.__)('Actions'),
      disabled: !actions.length,
      __experimentalIsFocusable: true,
      className: "editor-all-actions-button",
      onClick: () => setIsActionsMenuOpen(!isActionsMenuOpen),
      ...buttonProps
    }),
    onOpenChange: setIsActionsMenuOpen,
    placement: "bottom-end"
  }, (0, _react.createElement)(ActionsDropdownMenuGroup, {
    actions: actions,
    item: item,
    onClose: () => {
      setIsActionsMenuOpen(false);
    }
  }));
}

// From now on all the functions on this file are copied as from the dataviews packages,
// The editor packages should not be using the dataviews packages directly,
// and the dataviews package should not be using the editor packages directly,
// so duplicating the code here seems like the least bad option.

// Copied as is from packages/dataviews/src/item-actions.js
function DropdownMenuItemTrigger({
  action,
  onClick
}) {
  return (0, _react.createElement)(DropdownMenuItem, {
    onClick: onClick,
    hideOnClick: !action.RenderModal
  }, (0, _react.createElement)(DropdownMenuItemLabel, null, action.label));
}

// Copied as is from packages/dataviews/src/item-actions.js
// With an added onClose prop.
function ActionWithModal({
  action,
  item,
  ActionTrigger,
  onClose
}) {
  const [isModalOpen, setIsModalOpen] = (0, _element.useState)(false);
  const actionTriggerProps = {
    action,
    onClick: () => setIsModalOpen(true)
  };
  const {
    RenderModal,
    hideModalHeader
  } = action;
  return (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)(ActionTrigger, {
    ...actionTriggerProps
  }), isModalOpen && (0, _react.createElement)(_components.Modal, {
    title: action.modalHeader || action.label,
    __experimentalHideHeader: !!hideModalHeader,
    onRequestClose: () => {
      setIsModalOpen(false);
    },
    overlayClassName: `editor-action-modal editor-action-modal__${kebabCase(action.id)}`
  }, (0, _react.createElement)(RenderModal, {
    items: [item],
    closeModal: () => {
      setIsModalOpen(false);
      onClose();
    }
  })));
}

// Copied as is from packages/dataviews/src/item-actions.js
// With an added onClose prop.
function ActionsDropdownMenuGroup({
  actions,
  item,
  onClose
}) {
  return (0, _react.createElement)(DropdownMenuGroup, null, actions.map(action => {
    if (action.RenderModal) {
      return (0, _react.createElement)(ActionWithModal, {
        key: action.id,
        action: action,
        item: item,
        ActionTrigger: DropdownMenuItemTrigger,
        onClose: onClose
      });
    }
    return (0, _react.createElement)(DropdownMenuItemTrigger, {
      key: action.id,
      action: action,
      onClick: () => action.callback([item])
    });
  }));
}
//# sourceMappingURL=index.js.map