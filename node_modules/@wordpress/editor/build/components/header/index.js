"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _clsx = _interopRequireDefault(require("clsx"));
var _data = require("@wordpress/data");
var _compose = require("@wordpress/compose");
var _components = require("@wordpress/components");
var _preferences = require("@wordpress/preferences");
var _element = require("@wordpress/element");
var _interface = require("@wordpress/interface");
var _blockEditor = require("@wordpress/block-editor");
var _collapsibleBlockToolbar = _interopRequireDefault(require("../collapsible-block-toolbar"));
var _documentBar = _interopRequireDefault(require("../document-bar"));
var _documentTools = _interopRequireDefault(require("../document-tools"));
var _moreMenu = _interopRequireDefault(require("../more-menu"));
var _postPreviewButton = _interopRequireDefault(require("../post-preview-button"));
var _postPublishButtonOrToggle = _interopRequireDefault(require("../post-publish-button/post-publish-button-or-toggle"));
var _postSavedState = _interopRequireDefault(require("../post-saved-state"));
var _postTypeSupportCheck = _interopRequireDefault(require("../post-type-support-check"));
var _postViewLink = _interopRequireDefault(require("../post-view-link"));
var _previewDropdown = _interopRequireDefault(require("../preview-dropdown"));
var _store = require("../../store");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const slideY = {
  hidden: {
    y: '-50px'
  },
  distractionFreeInactive: {
    y: 0
  },
  hover: {
    y: 0,
    transition: {
      type: 'tween',
      delay: 0.2
    }
  }
};
function Header({
  customSaveButton,
  forceIsDirty,
  forceDisableBlockTools,
  setEntitiesSavedStatesCallback,
  title,
  children
}) {
  const isWideViewport = (0, _compose.useViewportMatch)('large');
  const isLargeViewport = (0, _compose.useViewportMatch)('medium');
  const {
    isTextEditor,
    isPublishSidebarOpened,
    showIconLabels,
    hasFixedToolbar,
    isNestedEntity,
    isZoomedOutView
  } = (0, _data.useSelect)(select => {
    const {
      get: getPreference
    } = select(_preferences.store);
    const {
      getEditorMode,
      getEditorSettings,
      isPublishSidebarOpened: _isPublishSidebarOpened
    } = select(_store.store);
    const {
      __unstableGetEditorMode
    } = select(_blockEditor.store);
    return {
      isTextEditor: getEditorMode() === 'text',
      isPublishSidebarOpened: _isPublishSidebarOpened(),
      showIconLabels: getPreference('core', 'showIconLabels'),
      hasFixedToolbar: getPreference('core', 'fixedToolbar'),
      isNestedEntity: !!getEditorSettings().onNavigateToPreviousEntityRecord,
      isZoomedOutView: __unstableGetEditorMode() === 'zoom-out'
    };
  }, []);
  const hasTopToolbar = isLargeViewport && hasFixedToolbar;
  const [isBlockToolsCollapsed, setIsBlockToolsCollapsed] = (0, _element.useState)(true);

  // The edit-post-header classname is only kept for backward compatibilty
  // as some plugins might be relying on its presence.
  return (0, _react.createElement)("div", {
    className: "editor-header edit-post-header"
  }, children, (0, _react.createElement)(_components.__unstableMotion.div, {
    variants: slideY,
    transition: {
      type: 'tween',
      delay: 0.8
    },
    className: "editor-header__toolbar"
  }, (0, _react.createElement)(_documentTools.default, {
    disableBlockTools: forceDisableBlockTools || isTextEditor
  }), hasTopToolbar && (0, _react.createElement)(_collapsibleBlockToolbar.default, {
    isCollapsed: isBlockToolsCollapsed,
    onToggle: setIsBlockToolsCollapsed
  }), (0, _react.createElement)("div", {
    className: (0, _clsx.default)('editor-header__center', {
      'is-collapsed': !isBlockToolsCollapsed && hasTopToolbar
    })
  }, !title ? (0, _react.createElement)(_postTypeSupportCheck.default, {
    supportKeys: "title"
  }, (0, _react.createElement)(_documentBar.default, null)) : title)), (0, _react.createElement)(_components.__unstableMotion.div, {
    variants: slideY,
    transition: {
      type: 'tween',
      delay: 0.8
    },
    className: "editor-header__settings"
  }, !customSaveButton && !isPublishSidebarOpened &&
  // This button isn't completely hidden by the publish sidebar.
  // We can't hide the whole toolbar when the publish sidebar is open because
  // we want to prevent mounting/unmounting the PostPublishButtonOrToggle DOM node.
  // We track that DOM node to return focus to the PostPublishButtonOrToggle
  // when the publish sidebar has been closed.
  (0, _react.createElement)(_postSavedState.default, {
    forceIsDirty: forceIsDirty
  }), (0, _react.createElement)(_previewDropdown.default, {
    forceIsAutosaveable: forceIsDirty,
    disabled: isNestedEntity || isZoomedOutView
  }), (0, _react.createElement)(_postPreviewButton.default, {
    className: "editor-header__post-preview-button",
    forceIsAutosaveable: forceIsDirty
  }), (0, _react.createElement)(_postViewLink.default, null), !customSaveButton && (0, _react.createElement)(_postPublishButtonOrToggle.default, {
    forceIsDirty: forceIsDirty,
    setEntitiesSavedStatesCallback: setEntitiesSavedStatesCallback
  }), customSaveButton, (isWideViewport || !showIconLabels) && (0, _react.createElement)(_interface.PinnedItems.Slot, {
    scope: "core"
  }), (0, _react.createElement)(_moreMenu.default, null)));
}
var _default = exports.default = Header;
//# sourceMappingURL=index.js.map