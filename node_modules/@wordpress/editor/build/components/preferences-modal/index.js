"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = EditorPreferencesModal;
var _react = require("react");
var _i18n = require("@wordpress/i18n");
var _compose = require("@wordpress/compose");
var _data = require("@wordpress/data");
var _element = require("@wordpress/element");
var _preferences = require("@wordpress/preferences");
var _interface = require("@wordpress/interface");
var _enablePanel = _interopRequireDefault(require("./enable-panel"));
var _enablePluginDocumentSettingPanel = _interopRequireDefault(require("./enable-plugin-document-setting-panel"));
var _enablePublishSidebar = _interopRequireDefault(require("./enable-publish-sidebar"));
var _blockManager = _interopRequireDefault(require("../block-manager"));
var _postTaxonomies = _interopRequireDefault(require("../post-taxonomies"));
var _check = _interopRequireDefault(require("../post-featured-image/check"));
var _check2 = _interopRequireDefault(require("../post-excerpt/check"));
var _check3 = _interopRequireDefault(require("../page-attributes/check"));
var _postTypeSupportCheck = _interopRequireDefault(require("../post-type-support-check"));
var _store = require("../../store");
var _lockUnlock = require("../../lock-unlock");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const {
  PreferencesModal,
  PreferencesModalTabs,
  PreferencesModalSection,
  PreferenceToggleControl
} = (0, _lockUnlock.unlock)(_preferences.privateApis);
function EditorPreferencesModal({
  extraSections = {}
}) {
  const isLargeViewport = (0, _compose.useViewportMatch)('medium');
  const {
    isActive,
    showBlockBreadcrumbsOption
  } = (0, _data.useSelect)(select => {
    const {
      getEditorSettings
    } = select(_store.store);
    const {
      get
    } = select(_preferences.store);
    const {
      isModalActive
    } = select(_interface.store);
    const isRichEditingEnabled = getEditorSettings().richEditingEnabled;
    const isDistractionFreeEnabled = get('core', 'distractionFree');
    return {
      showBlockBreadcrumbsOption: !isDistractionFreeEnabled && isLargeViewport && isRichEditingEnabled,
      isActive: isModalActive('editor/preferences')
    };
  }, [isLargeViewport]);
  const {
    closeModal
  } = (0, _data.useDispatch)(_interface.store);
  const {
    setIsListViewOpened,
    setIsInserterOpened
  } = (0, _data.useDispatch)(_store.store);
  const {
    set: setPreference
  } = (0, _data.useDispatch)(_preferences.store);
  const sections = (0, _element.useMemo)(() => [{
    name: 'general',
    tabLabel: (0, _i18n.__)('General'),
    content: (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)(PreferencesModalSection, {
      title: (0, _i18n.__)('Interface')
    }, (0, _react.createElement)(PreferenceToggleControl, {
      scope: "core",
      featureName: "showListViewByDefault",
      help: (0, _i18n.__)('Opens the List View sidebar by default.'),
      label: (0, _i18n.__)('Always open List View')
    }), showBlockBreadcrumbsOption && (0, _react.createElement)(PreferenceToggleControl, {
      scope: "core",
      featureName: "showBlockBreadcrumbs",
      help: (0, _i18n.__)('Display the block hierarchy trail at the bottom of the editor.'),
      label: (0, _i18n.__)('Show block breadcrumbs')
    }), (0, _react.createElement)(PreferenceToggleControl, {
      scope: "core",
      featureName: "allowRightClickOverrides",
      help: (0, _i18n.__)('Allows contextual List View menus via right-click, overriding browser defaults.'),
      label: (0, _i18n.__)('Allow right-click contextual menus')
    })), (0, _react.createElement)(PreferencesModalSection, {
      title: (0, _i18n.__)('Document settings'),
      description: (0, _i18n.__)('Select what settings are shown in the document panel.')
    }, (0, _react.createElement)(_enablePluginDocumentSettingPanel.default.Slot, null), (0, _react.createElement)(_postTaxonomies.default, {
      taxonomyWrapper: (content, taxonomy) => (0, _react.createElement)(_enablePanel.default, {
        label: taxonomy.labels.menu_name,
        panelName: `taxonomy-panel-${taxonomy.slug}`
      })
    }), (0, _react.createElement)(_check.default, null, (0, _react.createElement)(_enablePanel.default, {
      label: (0, _i18n.__)('Featured image'),
      panelName: "featured-image"
    })), (0, _react.createElement)(_check2.default, null, (0, _react.createElement)(_enablePanel.default, {
      label: (0, _i18n.__)('Excerpt'),
      panelName: "post-excerpt"
    })), (0, _react.createElement)(_postTypeSupportCheck.default, {
      supportKeys: ['comments', 'trackbacks']
    }, (0, _react.createElement)(_enablePanel.default, {
      label: (0, _i18n.__)('Discussion'),
      panelName: "discussion-panel"
    })), (0, _react.createElement)(_check3.default, null, (0, _react.createElement)(_enablePanel.default, {
      label: (0, _i18n.__)('Page attributes'),
      panelName: "page-attributes"
    }))), isLargeViewport && (0, _react.createElement)(PreferencesModalSection, {
      title: (0, _i18n.__)('Publishing')
    }, (0, _react.createElement)(_enablePublishSidebar.default, {
      help: (0, _i18n.__)('Review settings, such as visibility and tags.'),
      label: (0, _i18n.__)('Enable pre-publish checks')
    })), extraSections?.general)
  }, {
    name: 'appearance',
    tabLabel: (0, _i18n.__)('Appearance'),
    content: (0, _react.createElement)(PreferencesModalSection, {
      title: (0, _i18n.__)('Appearance'),
      description: (0, _i18n.__)('Customize the editor interface to suit your needs.')
    }, (0, _react.createElement)(PreferenceToggleControl, {
      scope: "core",
      featureName: "fixedToolbar",
      onToggle: () => setPreference('core', 'distractionFree', false),
      help: (0, _i18n.__)('Access all block and document tools in a single place.'),
      label: (0, _i18n.__)('Top toolbar')
    }), (0, _react.createElement)(PreferenceToggleControl, {
      scope: "core",
      featureName: "distractionFree",
      onToggle: () => {
        setPreference('core', 'fixedToolbar', true);
        setIsInserterOpened(false);
        setIsListViewOpened(false);
      },
      help: (0, _i18n.__)('Reduce visual distractions by hiding the toolbar and other elements to focus on writing.'),
      label: (0, _i18n.__)('Distraction free')
    }), (0, _react.createElement)(PreferenceToggleControl, {
      scope: "core",
      featureName: "focusMode",
      help: (0, _i18n.__)('Highlights the current block and fades other content.'),
      label: (0, _i18n.__)('Spotlight mode')
    }), extraSections?.appearance)
  }, {
    name: 'accessibility',
    tabLabel: (0, _i18n.__)('Accessibility'),
    content: (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)(PreferencesModalSection, {
      title: (0, _i18n.__)('Navigation'),
      description: (0, _i18n.__)('Optimize the editing experience for enhanced control.')
    }, (0, _react.createElement)(PreferenceToggleControl, {
      scope: "core",
      featureName: "keepCaretInsideBlock",
      help: (0, _i18n.__)('Keeps the text cursor within the block boundaries, aiding users with screen readers by preventing unintentional cursor movement outside the block.'),
      label: (0, _i18n.__)('Contain text cursor inside block')
    })), (0, _react.createElement)(PreferencesModalSection, {
      title: (0, _i18n.__)('Interface')
    }, (0, _react.createElement)(PreferenceToggleControl, {
      scope: "core",
      featureName: "showIconLabels",
      label: (0, _i18n.__)('Show button text labels'),
      help: (0, _i18n.__)('Show text instead of icons on buttons across the interface.')
    })))
  }, {
    name: 'blocks',
    tabLabel: (0, _i18n.__)('Blocks'),
    content: (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)(PreferencesModalSection, {
      title: (0, _i18n.__)('Inserter')
    }, (0, _react.createElement)(PreferenceToggleControl, {
      scope: "core",
      featureName: "mostUsedBlocks",
      help: (0, _i18n.__)('Adds a category with the most frequently used blocks in the inserter.'),
      label: (0, _i18n.__)('Show most used blocks')
    })), (0, _react.createElement)(PreferencesModalSection, {
      title: (0, _i18n.__)('Manage block visibility'),
      description: (0, _i18n.__)("Disable blocks that you don't want to appear in the inserter. They can always be toggled back on later.")
    }, (0, _react.createElement)(_blockManager.default, null)))
  }], [showBlockBreadcrumbsOption, extraSections, setIsInserterOpened, setIsListViewOpened, setPreference, isLargeViewport]);
  if (!isActive) {
    return null;
  }
  return (0, _react.createElement)(PreferencesModal, {
    closeModal: closeModal
  }, (0, _react.createElement)(PreferencesModalTabs, {
    sections: sections
  }));
}
//# sourceMappingURL=index.js.map