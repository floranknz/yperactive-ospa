"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PreviewDropdown;
var _react = require("react");
var _compose = require("@wordpress/compose");
var _components = require("@wordpress/components");
var _i18n = require("@wordpress/i18n");
var _icons = require("@wordpress/icons");
var _data = require("@wordpress/data");
var _coreData = require("@wordpress/core-data");
var _preferences = require("@wordpress/preferences");
var _store = require("../../store");
var _postPreviewButton = _interopRequireDefault(require("../post-preview-button"));
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function PreviewDropdown({
  forceIsAutosaveable,
  disabled
}) {
  const {
    deviceType,
    homeUrl,
    isTemplate,
    isViewable,
    showIconLabels
  } = (0, _data.useSelect)(select => {
    var _getPostType$viewable;
    const {
      getDeviceType,
      getCurrentPostType
    } = select(_store.store);
    const {
      getUnstableBase,
      getPostType
    } = select(_coreData.store);
    const {
      get
    } = select(_preferences.store);
    const _currentPostType = getCurrentPostType();
    return {
      deviceType: getDeviceType(),
      homeUrl: getUnstableBase()?.home,
      isTemplate: _currentPostType === 'wp_template',
      isViewable: (_getPostType$viewable = getPostType(_currentPostType)?.viewable) !== null && _getPostType$viewable !== void 0 ? _getPostType$viewable : false,
      showIconLabels: get('core', 'showIconLabels')
    };
  }, []);
  const {
    setDeviceType
  } = (0, _data.useDispatch)(_store.store);
  const isMobile = (0, _compose.useViewportMatch)('medium', '<');
  if (isMobile) {
    return null;
  }
  const popoverProps = {
    placement: 'bottom-end'
  };
  const toggleProps = {
    className: 'editor-preview-dropdown__toggle',
    size: 'compact',
    showTooltip: !showIconLabels,
    disabled,
    __experimentalIsFocusable: disabled
  };
  const menuProps = {
    'aria-label': (0, _i18n.__)('View options')
  };
  const deviceIcons = {
    mobile: _icons.mobile,
    tablet: _icons.tablet,
    desktop: _icons.desktop
  };
  return (0, _react.createElement)(_components.DropdownMenu, {
    className: "editor-preview-dropdown",
    popoverProps: popoverProps,
    toggleProps: toggleProps,
    menuProps: menuProps,
    icon: deviceIcons[deviceType.toLowerCase()],
    label: (0, _i18n.__)('View'),
    disableOpenOnArrowDown: disabled
  }, ({
    onClose
  }) => (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)(_components.MenuGroup, null, (0, _react.createElement)(_components.MenuItem, {
    onClick: () => setDeviceType('Desktop'),
    icon: deviceType === 'Desktop' && _icons.check
  }, (0, _i18n.__)('Desktop')), (0, _react.createElement)(_components.MenuItem, {
    onClick: () => setDeviceType('Tablet'),
    icon: deviceType === 'Tablet' && _icons.check
  }, (0, _i18n.__)('Tablet')), (0, _react.createElement)(_components.MenuItem, {
    onClick: () => setDeviceType('Mobile'),
    icon: deviceType === 'Mobile' && _icons.check
  }, (0, _i18n.__)('Mobile'))), isTemplate && (0, _react.createElement)(_components.MenuGroup, null, (0, _react.createElement)(_components.MenuItem, {
    href: homeUrl,
    target: "_blank",
    icon: _icons.external,
    onClick: onClose
  }, (0, _i18n.__)('View site'), (0, _react.createElement)(_components.VisuallyHidden, {
    as: "span"
  }, /* translators: accessibility text */
  (0, _i18n.__)('(opens in a new tab)')))), isViewable && (0, _react.createElement)(_components.MenuGroup, null, (0, _react.createElement)(_postPreviewButton.default, {
    className: "editor-preview-dropdown__button-external",
    role: "menuitem",
    forceIsAutosaveable: forceIsAutosaveable,
    textContent: (0, _react.createElement)(_react.Fragment, null, (0, _i18n.__)('Preview in new tab'), (0, _react.createElement)(_components.Icon, {
      icon: _icons.external
    })),
    onPreview: onClose
  }))));
}
//# sourceMappingURL=index.js.map