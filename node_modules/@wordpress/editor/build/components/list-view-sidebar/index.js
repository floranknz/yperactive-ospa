"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ListViewSidebar;
var _react = require("react");
var _blockEditor = require("@wordpress/block-editor");
var _components = require("@wordpress/components");
var _compose = require("@wordpress/compose");
var _data = require("@wordpress/data");
var _dom = require("@wordpress/dom");
var _element = require("@wordpress/element");
var _i18n = require("@wordpress/i18n");
var _icons = require("@wordpress/icons");
var _keyboardShortcuts = require("@wordpress/keyboard-shortcuts");
var _keycodes = require("@wordpress/keycodes");
var _listViewOutline = _interopRequireDefault(require("./list-view-outline"));
var _lockUnlock = require("../../lock-unlock");
var _store = require("../../store");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const {
  Tabs
} = (0, _lockUnlock.unlock)(_components.privateApis);
function ListViewSidebar() {
  const {
    setIsListViewOpened
  } = (0, _data.useDispatch)(_store.store);
  const {
    getListViewToggleRef
  } = (0, _lockUnlock.unlock)((0, _data.useSelect)(_store.store));

  // This hook handles focus when the sidebar first renders.
  const focusOnMountRef = (0, _compose.useFocusOnMount)('firstElement');

  // When closing the list view, focus should return to the toggle button.
  const closeListView = (0, _element.useCallback)(() => {
    setIsListViewOpened(false);
    getListViewToggleRef().current?.focus();
  }, [getListViewToggleRef, setIsListViewOpened]);
  const closeOnEscape = (0, _element.useCallback)(event => {
    if (event.keyCode === _keycodes.ESCAPE && !event.defaultPrevented) {
      event.preventDefault();
      closeListView();
    }
  }, [closeListView]);

  // Use internal state instead of a ref to make sure that the component
  // re-renders when the dropZoneElement updates.
  const [dropZoneElement, setDropZoneElement] = (0, _element.useState)(null);
  // Tracks our current tab.
  const [tab, setTab] = (0, _element.useState)('list-view');

  // This ref refers to the sidebar as a whole.
  const sidebarRef = (0, _element.useRef)();
  // This ref refers to the tab panel.
  const tabsRef = (0, _element.useRef)();
  // This ref refers to the list view application area.
  const listViewRef = (0, _element.useRef)();

  // Must merge the refs together so focus can be handled properly in the next function.
  const listViewContainerRef = (0, _compose.useMergeRefs)([focusOnMountRef, listViewRef, setDropZoneElement]);

  /*
   * Callback function to handle list view or outline focus.
   *
   * @param {string} currentTab The current tab. Either list view or outline.
   *
   * @return void
   */
  function handleSidebarFocus(currentTab) {
    // Tab panel focus.
    const tabPanelFocus = _dom.focus.tabbable.find(tabsRef.current)[0];
    // List view tab is selected.
    if (currentTab === 'list-view') {
      // Either focus the list view or the tab panel. Must have a fallback because the list view does not render when there are no blocks.
      const listViewApplicationFocus = _dom.focus.tabbable.find(listViewRef.current)[0];
      const listViewFocusArea = sidebarRef.current.contains(listViewApplicationFocus) ? listViewApplicationFocus : tabPanelFocus;
      listViewFocusArea.focus();
      // Outline tab is selected.
    } else {
      tabPanelFocus.focus();
    }
  }
  const handleToggleListViewShortcut = (0, _element.useCallback)(() => {
    // If the sidebar has focus, it is safe to close.
    if (sidebarRef.current.contains(sidebarRef.current.ownerDocument.activeElement)) {
      closeListView();
    } else {
      // If the list view or outline does not have focus, focus should be moved to it.
      handleSidebarFocus(tab);
    }
  }, [closeListView, tab]);

  // This only fires when the sidebar is open because of the conditional rendering.
  // It is the same shortcut to open but that is defined as a global shortcut and only fires when the sidebar is closed.
  (0, _keyboardShortcuts.useShortcut)('core/editor/toggle-list-view', handleToggleListViewShortcut);
  return (
    // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    (0, _react.createElement)("div", {
      className: "editor-list-view-sidebar",
      onKeyDown: closeOnEscape,
      ref: sidebarRef
    }, (0, _react.createElement)(Tabs, {
      onSelect: tabName => setTab(tabName),
      selectOnMove: false
      // The initial tab value is set explicitly to avoid an initial
      // render where no tab is selected. This ensures that the
      // tabpanel height is correct so the relevant scroll container
      // can be rendered internally.
      ,
      defaultTabId: "list-view"
    }, (0, _react.createElement)("div", {
      className: "editor-list-view-sidebar__header"
    }, (0, _react.createElement)(_components.Button, {
      className: "editor-list-view-sidebar__close-button",
      icon: _icons.closeSmall,
      label: (0, _i18n.__)('Close'),
      onClick: closeListView,
      size: "small"
    }), (0, _react.createElement)(Tabs.TabList, {
      className: "editor-list-view-sidebar__tabs-tablist",
      ref: tabsRef
    }, (0, _react.createElement)(Tabs.Tab, {
      className: "editor-list-view-sidebar__tabs-tab",
      tabId: "list-view"
    }, (0, _i18n._x)('List View', 'Post overview')), (0, _react.createElement)(Tabs.Tab, {
      className: "editor-list-view-sidebar__tabs-tab",
      tabId: "outline"
    }, (0, _i18n._x)('Outline', 'Post overview')))), (0, _react.createElement)(Tabs.TabPanel, {
      ref: listViewContainerRef,
      className: "editor-list-view-sidebar__tabs-tabpanel",
      tabId: "list-view",
      focusable: false
    }, (0, _react.createElement)("div", {
      className: "editor-list-view-sidebar__list-view-container"
    }, (0, _react.createElement)("div", {
      className: "editor-list-view-sidebar__list-view-panel-content"
    }, (0, _react.createElement)(_blockEditor.__experimentalListView, {
      dropZoneElement: dropZoneElement
    })))), (0, _react.createElement)(Tabs.TabPanel, {
      className: "editor-list-view-sidebar__tabs-tabpanel",
      tabId: "outline",
      focusable: false
    }, (0, _react.createElement)("div", {
      className: "editor-list-view-sidebar__list-view-container"
    }, (0, _react.createElement)(_listViewOutline.default, null)))))
  );
}
//# sourceMappingURL=index.js.map