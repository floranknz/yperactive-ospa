"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCanEditEntity = useCanEditEntity;
exports.useUploadMediaFromBlobURL = useUploadMediaFromBlobURL;
var _data = require("@wordpress/data");
var _element = require("@wordpress/element");
var _blob = require("@wordpress/blob");
var _blockEditor = require("@wordpress/block-editor");
var _coreData = require("@wordpress/core-data");
/**
 * WordPress dependencies
 */

/**
 * Returns whether the current user can edit the given entity.
 *
 * @param {string} kind     Entity kind.
 * @param {string} name     Entity name.
 * @param {string} recordId Record's id.
 */
function useCanEditEntity(kind, name, recordId) {
  return (0, _data.useSelect)(select => select(_coreData.store).canUserEditEntityRecord(kind, name, recordId), [kind, name, recordId]);
}

/**
 * Handles uploading a media file from a blob URL on mount.
 *
 * @param {Object}   args              Upload media arguments.
 * @param {string}   args.url          Blob URL.
 * @param {?Array}   args.allowedTypes Array of allowed media types.
 * @param {Function} args.onChange     Function called when the media is uploaded.
 * @param {Function} args.onError      Function called when an error happens.
 */
function useUploadMediaFromBlobURL(args = {}) {
  const latestArgs = (0, _element.useRef)(args);
  const {
    getSettings
  } = (0, _data.useSelect)(_blockEditor.store);
  (0, _element.useLayoutEffect)(() => {
    latestArgs.current = args;
  });
  (0, _element.useEffect)(() => {
    if (!latestArgs.current.url || !(0, _blob.isBlobURL)(latestArgs.current.url)) {
      return;
    }
    const file = (0, _blob.getBlobByURL)(latestArgs.current.url);
    if (!file) {
      return;
    }
    const {
      url,
      allowedTypes,
      onChange,
      onError
    } = latestArgs.current;
    const {
      mediaUpload
    } = getSettings();
    mediaUpload({
      filesList: [file],
      allowedTypes,
      onFileChange: ([media]) => {
        if ((0, _blob.isBlobURL)(media?.url)) {
          return;
        }
        (0, _blob.revokeBlobURL)(url);
        onChange(media);
      },
      onError: message => {
        (0, _blob.revokeBlobURL)(url);
        onError(message);
      }
    });
  }, [getSettings]);
}
//# sourceMappingURL=hooks.js.map