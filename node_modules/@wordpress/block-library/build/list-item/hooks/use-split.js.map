{"version":3,"names":["_element","require","_data","_blockEditor","_blocks","useSplit","clientId","isAfter","useRef","getBlock","useSelect","blockEditorStore","useCallback","value","block","current","cloneBlock","content","createBlock","name","attributes"],"sources":["@wordpress/block-library/src/list-item/hooks/use-split.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useCallback, useRef } from '@wordpress/element';\nimport { useSelect } from '@wordpress/data';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\nimport { cloneBlock, createBlock } from '@wordpress/blocks';\n\nexport default function useSplit( clientId ) {\n\t// We can not rely on the isAfterOriginal parameter of the callback,\n\t// because if the value after the split is empty isAfterOriginal is false\n\t// while the value is in fact after the original. So to avoid that issue we use\n\t// a flag where the first execution of the callback is false (it is the before value)\n\t// and the second execution is true, it is the after value.\n\tconst isAfter = useRef( false );\n\tconst { getBlock } = useSelect( blockEditorStore );\n\treturn useCallback(\n\t\t( value ) => {\n\t\t\tconst block = getBlock( clientId );\n\t\t\tif ( isAfter.current ) {\n\t\t\t\treturn cloneBlock( block, {\n\t\t\t\t\tcontent: value,\n\t\t\t\t} );\n\t\t\t}\n\t\t\tisAfter.current = true;\n\t\t\treturn createBlock( block.name, {\n\t\t\t\t...block.attributes,\n\t\t\t\tcontent: value,\n\t\t\t} );\n\t\t},\n\t\t[ clientId, getBlock ]\n\t);\n}\n"],"mappings":";;;;;;AAGA,IAAAA,QAAA,GAAAC,OAAA;AACA,IAAAC,KAAA,GAAAD,OAAA;AACA,IAAAE,YAAA,GAAAF,OAAA;AACA,IAAAG,OAAA,GAAAH,OAAA;AANA;AACA;AACA;;AAMe,SAASI,QAAQA,CAAEC,QAAQ,EAAG;EAC5C;EACA;EACA;EACA;EACA;EACA,MAAMC,OAAO,GAAG,IAAAC,eAAM,EAAE,KAAM,CAAC;EAC/B,MAAM;IAAEC;EAAS,CAAC,GAAG,IAAAC,eAAS,EAAEC,kBAAiB,CAAC;EAClD,OAAO,IAAAC,oBAAW,EACfC,KAAK,IAAM;IACZ,MAAMC,KAAK,GAAGL,QAAQ,CAAEH,QAAS,CAAC;IAClC,IAAKC,OAAO,CAACQ,OAAO,EAAG;MACtB,OAAO,IAAAC,kBAAU,EAAEF,KAAK,EAAE;QACzBG,OAAO,EAAEJ;MACV,CAAE,CAAC;IACJ;IACAN,OAAO,CAACQ,OAAO,GAAG,IAAI;IACtB,OAAO,IAAAG,mBAAW,EAAEJ,KAAK,CAACK,IAAI,EAAE;MAC/B,GAAGL,KAAK,CAACM,UAAU;MACnBH,OAAO,EAAEJ;IACV,CAAE,CAAC;EACJ,CAAC,EACD,CAAEP,QAAQ,EAAEG,QAAQ,CACrB,CAAC;AACF","ignoreList":[]}