import { createElement } from "react";
/**
 * External dependencies
 */
import clsx from 'clsx';

/**
 * WordPress dependencies
 */
import { useSelect } from '@wordpress/data';
import { Button, Icon, __unstableMotion as motion } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { addQueryArgs } from '@wordpress/url';
import { wordpress } from '@wordpress/icons';
import { store as editorStore } from '@wordpress/editor';
import { store as coreStore } from '@wordpress/core-data';
import { useReducedMotion } from '@wordpress/compose';

/**
 * Internal dependencies
 */
import { store as editPostStore } from '../../../store';
function FullscreenModeClose({
  showTooltip,
  icon,
  href,
  initialPost
}) {
  var _postType$labels$view;
  const {
    isActive,
    isRequestingSiteIcon,
    postType,
    siteIconUrl
  } = useSelect(select => {
    const {
      getCurrentPostType
    } = select(editorStore);
    const {
      isFeatureActive
    } = select(editPostStore);
    const {
      getEntityRecord,
      getPostType,
      isResolving
    } = select(coreStore);
    const siteData = getEntityRecord('root', '__unstableBase', undefined) || {};
    const _postType = initialPost?.type || getCurrentPostType();
    return {
      isActive: isFeatureActive('fullscreenMode'),
      isRequestingSiteIcon: isResolving('getEntityRecord', ['root', '__unstableBase', undefined]),
      postType: getPostType(_postType),
      siteIconUrl: siteData.site_icon_url
    };
  }, []);
  const disableMotion = useReducedMotion();
  if (!isActive || !postType) {
    return null;
  }
  let buttonIcon = createElement(Icon, {
    size: "36px",
    icon: wordpress
  });
  const effect = {
    expand: {
      scale: 1.25,
      transition: {
        type: 'tween',
        duration: '0.3'
      }
    }
  };
  if (siteIconUrl) {
    buttonIcon = createElement(motion.img, {
      variants: !disableMotion && effect,
      alt: __('Site Icon'),
      className: "edit-post-fullscreen-mode-close_site-icon",
      src: siteIconUrl
    });
  }
  if (isRequestingSiteIcon) {
    buttonIcon = null;
  }

  // Override default icon if custom icon is provided via props.
  if (icon) {
    buttonIcon = createElement(Icon, {
      size: "36px",
      icon: icon
    });
  }
  const classes = clsx({
    'edit-post-fullscreen-mode-close': true,
    'has-icon': siteIconUrl
  });
  const buttonHref = href !== null && href !== void 0 ? href : addQueryArgs('edit.php', {
    post_type: postType.slug
  });
  const buttonLabel = (_postType$labels$view = postType?.labels?.view_items) !== null && _postType$labels$view !== void 0 ? _postType$labels$view : __('Back');
  return createElement(motion.div, {
    whileHover: "expand"
  }, createElement(Button, {
    className: classes,
    href: buttonHref,
    label: buttonLabel,
    showTooltip: showTooltip
  }, buttonIcon));
}
export default FullscreenModeClose;
//# sourceMappingURL=index.js.map