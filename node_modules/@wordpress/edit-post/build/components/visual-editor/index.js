"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = VisualEditor;
var _react = require("react");
var _clsx = _interopRequireDefault(require("clsx"));
var _editor = require("@wordpress/editor");
var _element = require("@wordpress/element");
var _data = require("@wordpress/data");
var _blocks = require("@wordpress/blocks");
var _blockEditor = require("@wordpress/block-editor");
var _store = require("../../store");
var _lockUnlock = require("../../lock-unlock");
var _usePaddingAppender = require("./use-padding-appender");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const {
  EditorCanvas
} = (0, _lockUnlock.unlock)(_editor.privateApis);
const isGutenbergPlugin = process.env.IS_GUTENBERG_PLUGIN ? true : false;
function VisualEditor({
  styles
}) {
  const {
    isWelcomeGuideVisible,
    renderingMode,
    isBlockBasedTheme,
    hasV3BlocksOnly,
    isEditingTemplate,
    isZoomedOutView
  } = (0, _data.useSelect)(select => {
    const {
      isFeatureActive
    } = select(_store.store);
    const {
      getEditorSettings,
      getRenderingMode
    } = select(_editor.store);
    const {
      getBlockTypes
    } = select(_blocks.store);
    const {
      __unstableGetEditorMode
    } = select(_blockEditor.store);
    const editorSettings = getEditorSettings();
    return {
      isWelcomeGuideVisible: isFeatureActive('welcomeGuide'),
      renderingMode: getRenderingMode(),
      isBlockBasedTheme: editorSettings.__unstableIsBlockBasedTheme,
      hasV3BlocksOnly: getBlockTypes().every(type => {
        return type.apiVersion >= 3;
      }),
      isEditingTemplate: select(_editor.store).getCurrentPostType() === 'wp_template',
      isZoomedOutView: __unstableGetEditorMode() === 'zoom-out'
    };
  }, []);
  const hasMetaBoxes = (0, _data.useSelect)(select => select(_store.store).hasMetaBoxes(), []);
  const paddingAppenderRef = (0, _usePaddingAppender.usePaddingAppender)();
  let paddingBottom;

  // Add a constant padding for the typewritter effect. When typing at the
  // bottom, there needs to be room to scroll up.
  if (!isZoomedOutView && !hasMetaBoxes && renderingMode === 'post-only') {
    paddingBottom = '40vh';
  }
  styles = (0, _element.useMemo)(() => [...styles, {
    // We should move this in to future to the body.
    css: paddingBottom ? `body{padding-bottom:${paddingBottom}}` : ''
  }], [styles, paddingBottom]);
  const isToBeIframed = (hasV3BlocksOnly || isGutenbergPlugin && isBlockBasedTheme) && !hasMetaBoxes || isEditingTemplate;
  return (0, _react.createElement)("div", {
    className: (0, _clsx.default)('edit-post-visual-editor', {
      'has-inline-canvas': !isToBeIframed
    })
  }, (0, _react.createElement)(EditorCanvas, {
    disableIframe: !isToBeIframed,
    styles: styles
    // We should auto-focus the canvas (title) on load.
    // eslint-disable-next-line jsx-a11y/no-autofocus
    ,
    autoFocus: !isWelcomeGuideVisible,
    contentRef: paddingAppenderRef
  }));
}
//# sourceMappingURL=index.js.map