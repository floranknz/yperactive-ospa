"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _clsx = _interopRequireDefault(require("clsx"));
var _editor = require("@wordpress/editor");
var _data = require("@wordpress/data");
var _blockEditor = require("@wordpress/block-editor");
var _components = require("@wordpress/components");
var _compose = require("@wordpress/compose");
var _plugins = require("@wordpress/plugins");
var _i18n = require("@wordpress/i18n");
var _element = require("@wordpress/element");
var _keyboardShortcuts = require("@wordpress/keyboard-shortcuts");
var _notices = require("@wordpress/notices");
var _preferences = require("@wordpress/preferences");
var _commands = require("@wordpress/commands");
var _coreCommands = require("@wordpress/core-commands");
var _blockLibrary = require("@wordpress/block-library");
var _url = require("@wordpress/url");
var _textEditor = _interopRequireDefault(require("../text-editor"));
var _visualEditor = _interopRequireDefault(require("../visual-editor"));
var _keyboardShortcuts2 = _interopRequireDefault(require("../keyboard-shortcuts"));
var _initPatternModal = _interopRequireDefault(require("../init-pattern-modal"));
var _browserUrl = _interopRequireDefault(require("../browser-url"));
var _header = _interopRequireDefault(require("../header"));
var _metaBoxes = _interopRequireDefault(require("../meta-boxes"));
var _welcomeGuide = _interopRequireDefault(require("../welcome-guide"));
var _store = require("../../store");
var _lockUnlock = require("../../lock-unlock");
var _useCommonCommands = _interopRequireDefault(require("../../hooks/commands/use-common-commands"));
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const {
  getLayoutStyles
} = (0, _lockUnlock.unlock)(_blockEditor.privateApis);
const {
  useCommands
} = (0, _lockUnlock.unlock)(_coreCommands.privateApis);
const {
  useCommandContext
} = (0, _lockUnlock.unlock)(_commands.privateApis);
const {
  InserterSidebar,
  ListViewSidebar,
  ComplementaryArea,
  FullscreenMode,
  SavePublishPanels,
  InterfaceSkeleton,
  interfaceStore,
  Sidebar
} = (0, _lockUnlock.unlock)(_editor.privateApis);
const {
  BlockKeyboardShortcuts
} = (0, _lockUnlock.unlock)(_blockLibrary.privateApis);
const interfaceLabels = {
  /* translators: accessibility text for the editor top bar landmark region. */
  header: (0, _i18n.__)('Editor top bar'),
  /* translators: accessibility text for the editor content landmark region. */
  body: (0, _i18n.__)('Editor content'),
  /* translators: accessibility text for the editor settings landmark region. */
  sidebar: (0, _i18n.__)('Editor settings'),
  /* translators: accessibility text for the editor publish landmark region. */
  actions: (0, _i18n.__)('Editor publish'),
  /* translators: accessibility text for the editor footer landmark region. */
  footer: (0, _i18n.__)('Editor footer')
};
function useEditorStyles() {
  const {
    hasThemeStyleSupport,
    editorSettings
  } = (0, _data.useSelect)(select => ({
    hasThemeStyleSupport: select(_store.store).isFeatureActive('themeStyles'),
    editorSettings: select(_editor.store).getEditorSettings()
  }), []);

  // Compute the default styles.
  return (0, _element.useMemo)(() => {
    var _editorSettings$style, _editorSettings$style2;
    const presetStyles = (_editorSettings$style = editorSettings.styles?.filter(style => style.__unstableType && style.__unstableType !== 'theme')) !== null && _editorSettings$style !== void 0 ? _editorSettings$style : [];
    const defaultEditorStyles = [...editorSettings.defaultEditorStyles, ...presetStyles];

    // Has theme styles if the theme supports them and if some styles were not preset styles (in which case they're theme styles).
    const hasThemeStyles = hasThemeStyleSupport && presetStyles.length !== ((_editorSettings$style2 = editorSettings.styles?.length) !== null && _editorSettings$style2 !== void 0 ? _editorSettings$style2 : 0);

    // If theme styles are not present or displayed, ensure that
    // base layout styles are still present in the editor.
    if (!editorSettings.disableLayoutStyles && !hasThemeStyles) {
      defaultEditorStyles.push({
        css: getLayoutStyles({
          style: {},
          selector: 'body',
          hasBlockGapSupport: false,
          hasFallbackGapSupport: true,
          fallbackGapValue: '0.5em'
        })
      });
    }
    return hasThemeStyles ? editorSettings.styles : defaultEditorStyles;
  }, [editorSettings.defaultEditorStyles, editorSettings.disableLayoutStyles, editorSettings.styles, hasThemeStyleSupport]);
}
function Layout({
  initialPost
}) {
  useCommands();
  (0, _useCommonCommands.default)();
  const isMobileViewport = (0, _compose.useViewportMatch)('medium', '<');
  const isWideViewport = (0, _compose.useViewportMatch)('large');
  const isLargeViewport = (0, _compose.useViewportMatch)('medium');
  const {
    closeGeneralSidebar
  } = (0, _data.useDispatch)(_store.store);
  const {
    createErrorNotice
  } = (0, _data.useDispatch)(_notices.store);
  const {
    mode,
    isFullscreenActive,
    isRichEditingEnabled,
    sidebarIsOpened,
    hasActiveMetaboxes,
    previousShortcut,
    nextShortcut,
    hasBlockSelected,
    isInserterOpened,
    isListViewOpened,
    showIconLabels,
    isDistractionFree,
    showBlockBreadcrumbs,
    showMetaBoxes,
    documentLabel,
    hasHistory,
    hasBlockBreadcrumbs,
    blockEditorMode,
    isEditingTemplate
  } = (0, _data.useSelect)(select => {
    const {
      get
    } = select(_preferences.store);
    const {
      getEditorSettings,
      getPostTypeLabel
    } = select(_editor.store);
    const editorSettings = getEditorSettings();
    const postTypeLabel = getPostTypeLabel();
    return {
      showMetaBoxes: select(_editor.store).getRenderingMode() === 'post-only',
      sidebarIsOpened: !!(select(interfaceStore).getActiveComplementaryArea('core') || select(_editor.store).isPublishSidebarOpened()),
      isFullscreenActive: select(_store.store).isFeatureActive('fullscreenMode'),
      isInserterOpened: select(_editor.store).isInserterOpened(),
      isListViewOpened: select(_editor.store).isListViewOpened(),
      mode: select(_editor.store).getEditorMode(),
      isRichEditingEnabled: editorSettings.richEditingEnabled,
      hasActiveMetaboxes: select(_store.store).hasMetaBoxes(),
      previousShortcut: select(_keyboardShortcuts.store).getAllShortcutKeyCombinations('core/editor/previous-region'),
      nextShortcut: select(_keyboardShortcuts.store).getAllShortcutKeyCombinations('core/editor/next-region'),
      showIconLabels: get('core', 'showIconLabels'),
      isDistractionFree: get('core', 'distractionFree'),
      showBlockBreadcrumbs: get('core', 'showBlockBreadcrumbs'),
      // translators: Default label for the Document in the Block Breadcrumb.
      documentLabel: postTypeLabel || (0, _i18n._x)('Document', 'noun'),
      hasBlockSelected: !!select(_blockEditor.store).getBlockSelectionStart(),
      hasHistory: !!getEditorSettings().onNavigateToPreviousEntityRecord,
      hasBlockBreadcrumbs: get('core', 'showBlockBreadcrumbs'),
      blockEditorMode: select(_blockEditor.store).__unstableGetEditorMode(),
      isEditingTemplate: select(_editor.store).getCurrentPostType() === 'wp_template'
    };
  }, []);

  // Set the right context for the command palette
  const commandContext = hasBlockSelected ? 'block-selection-edit' : 'post-editor-edit';
  useCommandContext(commandContext);
  const styles = useEditorStyles();

  // Local state for save panel.
  // Note 'truthy' callback implies an open panel.
  const [entitiesSavedStatesCallback, setEntitiesSavedStatesCallback] = (0, _element.useState)(false);
  const closeEntitiesSavedStates = (0, _element.useCallback)(arg => {
    if (typeof entitiesSavedStatesCallback === 'function') {
      entitiesSavedStatesCallback(arg);
    }
    setEntitiesSavedStatesCallback(false);
  }, [entitiesSavedStatesCallback]);

  // We need to add the show-icon-labels class to the body element so it is applied to modals.
  if (showIconLabels) {
    document.body.classList.add('show-icon-labels');
  } else {
    document.body.classList.remove('show-icon-labels');
  }
  const className = (0, _clsx.default)('edit-post-layout', 'is-mode-' + mode, {
    'is-sidebar-opened': sidebarIsOpened,
    'has-metaboxes': hasActiveMetaboxes,
    'is-distraction-free': isDistractionFree && isWideViewport,
    'is-entity-save-view-open': !!entitiesSavedStatesCallback,
    'has-block-breadcrumbs': hasBlockBreadcrumbs && !isDistractionFree && isWideViewport
  });
  const secondarySidebarLabel = isListViewOpened ? (0, _i18n.__)('Document Overview') : (0, _i18n.__)('Block Library');
  const secondarySidebar = () => {
    if (mode === 'visual' && isInserterOpened) {
      return (0, _react.createElement)(InserterSidebar, {
        closeGeneralSidebar: closeGeneralSidebar,
        isRightSidebarOpen: sidebarIsOpened
      });
    }
    if (mode === 'visual' && isListViewOpened) {
      return (0, _react.createElement)(ListViewSidebar, null);
    }
    return null;
  };
  function onPluginAreaError(name) {
    createErrorNotice((0, _i18n.sprintf)( /* translators: %s: plugin name */
    (0, _i18n.__)('The "%s" plugin has encountered an error and cannot be rendered.'), name));
  }
  const {
    createSuccessNotice
  } = (0, _data.useDispatch)(_notices.store);
  const onActionPerformed = (0, _element.useCallback)((actionId, items) => {
    switch (actionId) {
      case 'move-to-trash':
        {
          document.location.href = (0, _url.addQueryArgs)('edit.php', {
            trashed: 1,
            post_type: items[0].type,
            ids: items[0].id
          });
        }
        break;
      case 'duplicate-post':
        {
          const newItem = items[0];
          const title = typeof newItem.title === 'string' ? newItem.title : newItem.title?.rendered;
          createSuccessNotice((0, _i18n.sprintf)(
          // translators: %s: Title of the created post e.g: "Post 1".
          (0, _i18n.__)('"%s" successfully created.'), title), {
            type: 'snackbar',
            id: 'duplicate-post-action',
            actions: [{
              label: (0, _i18n.__)('Edit'),
              onClick: () => {
                const postId = newItem.id;
                document.location.href = (0, _url.addQueryArgs)('post.php', {
                  post: postId,
                  action: 'edit'
                });
              }
            }]
          });
        }
        break;
    }
  }, [createSuccessNotice]);
  return (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)(FullscreenMode, {
    isActive: isFullscreenActive
  }), (0, _react.createElement)(_browserUrl.default, {
    hasHistory: hasHistory
  }), (0, _react.createElement)(_editor.UnsavedChangesWarning, null), (0, _react.createElement)(_editor.AutosaveMonitor, null), (0, _react.createElement)(_editor.LocalAutosaveMonitor, null), (0, _react.createElement)(_keyboardShortcuts2.default, null), (0, _react.createElement)(_editor.EditorKeyboardShortcutsRegister, null), (0, _react.createElement)(_editor.EditorKeyboardShortcuts, null), (0, _react.createElement)(BlockKeyboardShortcuts, null), (0, _react.createElement)(InterfaceSkeleton, {
    isDistractionFree: isDistractionFree && isWideViewport,
    className: className,
    labels: {
      ...interfaceLabels,
      secondarySidebar: secondarySidebarLabel
    },
    header: (0, _react.createElement)(_header.default, {
      setEntitiesSavedStatesCallback: setEntitiesSavedStatesCallback,
      initialPost: initialPost
    }),
    editorNotices: (0, _react.createElement)(_editor.EditorNotices, null),
    secondarySidebar: secondarySidebar(),
    sidebar: !isDistractionFree && (0, _react.createElement)(ComplementaryArea.Slot, {
      scope: "core"
    }),
    notices: (0, _react.createElement)(_editor.EditorSnackbars, null),
    content: (0, _react.createElement)(_react.Fragment, null, !isDistractionFree && (0, _react.createElement)(_editor.EditorNotices, null), (mode === 'text' || !isRichEditingEnabled) && (0, _react.createElement)(_textEditor.default, null), !isLargeViewport && (0, _react.createElement)(_blockEditor.BlockToolbar, {
      hideDragHandle: true
    }), isRichEditingEnabled && mode === 'visual' && (0, _react.createElement)(_visualEditor.default, {
      styles: styles
    }), !isDistractionFree && showMetaBoxes && (0, _react.createElement)("div", {
      className: "edit-post-layout__metaboxes"
    }, (0, _react.createElement)(_metaBoxes.default, {
      location: "normal"
    }), (0, _react.createElement)(_metaBoxes.default, {
      location: "advanced"
    })), isMobileViewport && sidebarIsOpened && (0, _react.createElement)(_components.ScrollLock, null)),
    footer: !isDistractionFree && !isMobileViewport && showBlockBreadcrumbs && isRichEditingEnabled && blockEditorMode !== 'zoom-out' && mode === 'visual' && (0, _react.createElement)("div", {
      className: "edit-post-layout__footer"
    }, (0, _react.createElement)(_blockEditor.BlockBreadcrumb, {
      rootLabelText: documentLabel
    })),
    actions: (0, _react.createElement)(SavePublishPanels, {
      closeEntitiesSavedStates: closeEntitiesSavedStates,
      isEntitiesSavedStatesOpen: entitiesSavedStatesCallback,
      setEntitiesSavedStatesCallback: setEntitiesSavedStatesCallback,
      forceIsDirtyPublishPanel: hasActiveMetaboxes
    }),
    shortcuts: {
      previous: previousShortcut,
      next: nextShortcut
    }
  }), (0, _react.createElement)(_welcomeGuide.default, null), (0, _react.createElement)(_initPatternModal.default, null), (0, _react.createElement)(_plugins.PluginArea, {
    onError: onPluginAreaError
  }), !isDistractionFree && (0, _react.createElement)(Sidebar, {
    onActionPerformed: onActionPerformed,
    extraPanels: !isEditingTemplate && (0, _react.createElement)(_metaBoxes.default, {
      location: "side"
    })
  }));
}
var _default = exports.default = Layout;
//# sourceMappingURL=index.js.map