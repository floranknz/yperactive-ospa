"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _clsx = _interopRequireDefault(require("clsx"));
var _element = require("@wordpress/element");
var _components = require("@wordpress/components");
var _i18n = require("@wordpress/i18n");
var _compose = require("@wordpress/compose");
var _navigableRegion = _interopRequireDefault(require("../navigable-region"));
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const ANIMATION_DURATION = 0.25;
function useHTMLClass(className) {
  (0, _element.useEffect)(() => {
    const element = document && document.querySelector(`html:not(.${className})`);
    if (!element) {
      return;
    }
    element.classList.toggle(className);
    return () => {
      element.classList.toggle(className);
    };
  }, [className]);
}
const headerVariants = {
  hidden: {
    opacity: 0
  },
  hover: {
    opacity: 1,
    transition: {
      type: 'tween',
      delay: 0.2,
      delayChildren: 0.2
    }
  },
  distractionFreeInactive: {
    opacity: 1,
    transition: {
      delay: 0
    }
  }
};
function InterfaceSkeleton({
  isDistractionFree,
  footer,
  header,
  editorNotices,
  sidebar,
  secondarySidebar,
  notices,
  content,
  actions,
  labels,
  className,
  enableRegionNavigation = true,
  // Todo: does this need to be a prop.
  // Can we use a dependency to keyboard-shortcuts directly?
  shortcuts
}, ref) {
  const [secondarySidebarResizeListener, secondarySidebarSize] = (0, _compose.useResizeObserver)();
  const isMobileViewport = (0, _compose.useViewportMatch)('medium', '<');
  const disableMotion = (0, _compose.useReducedMotion)();
  const defaultTransition = {
    type: 'tween',
    duration: disableMotion ? 0 : ANIMATION_DURATION,
    ease: [0.6, 0, 0.4, 1]
  };
  const navigateRegionsProps = (0, _components.__unstableUseNavigateRegions)(shortcuts);
  useHTMLClass('interface-interface-skeleton__html-container');
  const defaultLabels = {
    /* translators: accessibility text for the top bar landmark region. */
    header: (0, _i18n._x)('Header', 'header landmark area'),
    /* translators: accessibility text for the content landmark region. */
    body: (0, _i18n.__)('Content'),
    /* translators: accessibility text for the secondary sidebar landmark region. */
    secondarySidebar: (0, _i18n.__)('Block Library'),
    /* translators: accessibility text for the settings landmark region. */
    sidebar: (0, _i18n.__)('Settings'),
    /* translators: accessibility text for the publish landmark region. */
    actions: (0, _i18n.__)('Publish'),
    /* translators: accessibility text for the footer landmark region. */
    footer: (0, _i18n.__)('Footer')
  };
  const mergedLabels = {
    ...defaultLabels,
    ...labels
  };
  return (0, _react.createElement)("div", {
    ...(enableRegionNavigation ? navigateRegionsProps : {}),
    ref: (0, _compose.useMergeRefs)([ref, enableRegionNavigation ? navigateRegionsProps.ref : undefined]),
    className: (0, _clsx.default)(className, 'interface-interface-skeleton', navigateRegionsProps.className, !!footer && 'has-footer')
  }, (0, _react.createElement)("div", {
    className: "interface-interface-skeleton__editor"
  }, !!header && (0, _react.createElement)(_navigableRegion.default, {
    as: _components.__unstableMotion.div,
    className: "interface-interface-skeleton__header",
    "aria-label": mergedLabels.header,
    initial: isDistractionFree ? 'hidden' : 'distractionFreeInactive',
    whileHover: isDistractionFree ? 'hover' : 'distractionFreeInactive',
    animate: isDistractionFree ? 'hidden' : 'distractionFreeInactive',
    variants: headerVariants,
    transition: isDistractionFree ? {
      type: 'tween',
      delay: 0.8
    } : undefined
  }, header), isDistractionFree && (0, _react.createElement)("div", {
    className: "interface-interface-skeleton__header"
  }, editorNotices), (0, _react.createElement)("div", {
    className: "interface-interface-skeleton__body"
  }, (0, _react.createElement)(_components.__unstableAnimatePresence, {
    initial: false
  }, !!secondarySidebar && (0, _react.createElement)(_navigableRegion.default, {
    className: "interface-interface-skeleton__secondary-sidebar",
    ariaLabel: mergedLabels.secondarySidebar,
    as: _components.__unstableMotion.div,
    initial: "closed",
    animate: isMobileViewport ? 'mobileOpen' : 'open',
    exit: "closed",
    variants: {
      open: {
        width: secondarySidebarSize.width
      },
      closed: {
        width: 0
      },
      mobileOpen: {
        width: '100vw'
      }
    },
    transition: defaultTransition
  }, (0, _react.createElement)("div", {
    style: {
      position: 'absolute',
      width: isMobileViewport ? '100vw' : 'fit-content',
      height: '100%',
      right: 0
    }
  }, secondarySidebarResizeListener, secondarySidebar))), !!notices && (0, _react.createElement)("div", {
    className: "interface-interface-skeleton__notices"
  }, notices), (0, _react.createElement)(_navigableRegion.default, {
    className: "interface-interface-skeleton__content",
    ariaLabel: mergedLabels.body
  }, content), !!sidebar && (0, _react.createElement)(_navigableRegion.default, {
    className: "interface-interface-skeleton__sidebar",
    ariaLabel: mergedLabels.sidebar
  }, sidebar), !!actions && (0, _react.createElement)(_navigableRegion.default, {
    className: "interface-interface-skeleton__actions",
    ariaLabel: mergedLabels.actions
  }, actions))), !!footer && (0, _react.createElement)(_navigableRegion.default, {
    className: "interface-interface-skeleton__footer",
    ariaLabel: mergedLabels.footer
  }, footer));
}
var _default = exports.default = (0, _element.forwardRef)(InterfaceSkeleton);
//# sourceMappingURL=index.js.map