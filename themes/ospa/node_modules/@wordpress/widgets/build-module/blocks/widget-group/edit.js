import { createElement, Fragment } from "react";
/**
 * WordPress dependencies
 */
import { useBlockProps, BlockIcon, ButtonBlockAppender, InnerBlocks, store as blockEditorStore, RichText } from '@wordpress/block-editor';
import { Placeholder } from '@wordpress/components';
import { group as groupIcon } from '@wordpress/icons';
import { __ } from '@wordpress/i18n';
import { useSelect } from '@wordpress/data';
export default function Edit(props) {
  const {
    clientId
  } = props;
  const {
    innerBlocks
  } = useSelect(select => select(blockEditorStore).getBlock(clientId), [clientId]);
  return createElement("div", {
    ...useBlockProps({
      className: 'widget'
    })
  }, innerBlocks.length === 0 ? createElement(PlaceholderContent, {
    ...props
  }) : createElement(PreviewContent, {
    ...props
  }));
}
function PlaceholderContent({
  clientId
}) {
  return createElement(Fragment, null, createElement(Placeholder, {
    className: "wp-block-widget-group__placeholder",
    icon: createElement(BlockIcon, {
      icon: groupIcon
    }),
    label: __('Widget Group')
  }, createElement(ButtonBlockAppender, {
    rootClientId: clientId
  })), createElement(InnerBlocks, {
    renderAppender: false
  }));
}
function PreviewContent({
  attributes,
  setAttributes
}) {
  var _attributes$title;
  return createElement(Fragment, null, createElement(RichText, {
    tagName: "h2",
    identifier: "title",
    className: "widget-title",
    allowedFormats: [],
    placeholder: __('Title'),
    value: (_attributes$title = attributes.title) !== null && _attributes$title !== void 0 ? _attributes$title : '',
    onChange: title => setAttributes({
      title
    })
  }), createElement(InnerBlocks, null));
}
//# sourceMappingURL=edit.js.map