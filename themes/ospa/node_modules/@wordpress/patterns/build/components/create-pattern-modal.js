"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CreatePatternModalContents = CreatePatternModalContents;
exports.default = CreatePatternModal;
var _react = require("react");
var _components = require("@wordpress/components");
var _i18n = require("@wordpress/i18n");
var _element = require("@wordpress/element");
var _data = require("@wordpress/data");
var _notices = require("@wordpress/notices");
var _constants = require("../constants");
var _store = require("../store");
var _categorySelector = _interopRequireDefault(require("./category-selector"));
var _privateHooks = require("../private-hooks");
var _lockUnlock = require("../lock-unlock");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function CreatePatternModal({
  className = 'patterns-menu-items__convert-modal',
  modalTitle = (0, _i18n.__)('Create pattern'),
  ...restProps
}) {
  return (0, _react.createElement)(_components.Modal, {
    title: modalTitle,
    onRequestClose: restProps.onClose,
    overlayClassName: className
  }, (0, _react.createElement)(CreatePatternModalContents, {
    ...restProps
  }));
}
function CreatePatternModalContents({
  confirmLabel = (0, _i18n.__)('Create'),
  defaultCategories = [],
  content,
  onClose,
  onError,
  onSuccess,
  defaultSyncType = _constants.PATTERN_SYNC_TYPES.full,
  defaultTitle = ''
}) {
  const [syncType, setSyncType] = (0, _element.useState)(defaultSyncType);
  const [categoryTerms, setCategoryTerms] = (0, _element.useState)(defaultCategories);
  const [title, setTitle] = (0, _element.useState)(defaultTitle);
  const [isSaving, setIsSaving] = (0, _element.useState)(false);
  const {
    createPattern
  } = (0, _lockUnlock.unlock)((0, _data.useDispatch)(_store.store));
  const {
    createErrorNotice
  } = (0, _data.useDispatch)(_notices.store);
  const {
    categoryMap,
    findOrCreateTerm
  } = (0, _privateHooks.useAddPatternCategory)();
  async function onCreate(patternTitle, sync) {
    if (!title || isSaving) {
      return;
    }
    try {
      setIsSaving(true);
      const categories = await Promise.all(categoryTerms.map(termName => findOrCreateTerm(termName)));
      const newPattern = await createPattern(patternTitle, sync, typeof content === 'function' ? content() : content, categories);
      onSuccess({
        pattern: newPattern,
        categoryId: _constants.PATTERN_DEFAULT_CATEGORY
      });
    } catch (error) {
      createErrorNotice(error.message, {
        type: 'snackbar',
        id: 'pattern-create'
      });
      onError?.();
    } finally {
      setIsSaving(false);
      setCategoryTerms([]);
      setTitle('');
    }
  }
  return (0, _react.createElement)("form", {
    onSubmit: event => {
      event.preventDefault();
      onCreate(title, syncType);
    }
  }, (0, _react.createElement)(_components.__experimentalVStack, {
    spacing: "5"
  }, (0, _react.createElement)(_components.TextControl, {
    label: (0, _i18n.__)('Name'),
    value: title,
    onChange: setTitle,
    placeholder: (0, _i18n.__)('My pattern'),
    className: "patterns-create-modal__name-input",
    __nextHasNoMarginBottom: true,
    __next40pxDefaultSize: true
  }), (0, _react.createElement)(_categorySelector.default, {
    categoryTerms: categoryTerms,
    onChange: setCategoryTerms,
    categoryMap: categoryMap
  }), (0, _react.createElement)(_components.ToggleControl, {
    label: (0, _i18n._x)('Synced', 'Option that makes an individual pattern synchronized'),
    help: (0, _i18n.__)('Sync this pattern across multiple locations.'),
    checked: syncType === _constants.PATTERN_SYNC_TYPES.full,
    onChange: () => {
      setSyncType(syncType === _constants.PATTERN_SYNC_TYPES.full ? _constants.PATTERN_SYNC_TYPES.unsynced : _constants.PATTERN_SYNC_TYPES.full);
    }
  }), (0, _react.createElement)(_components.__experimentalHStack, {
    justify: "right"
  }, (0, _react.createElement)(_components.Button, {
    __next40pxDefaultSize: true,
    variant: "tertiary",
    onClick: () => {
      onClose();
      setTitle('');
    }
  }, (0, _i18n.__)('Cancel')), (0, _react.createElement)(_components.Button, {
    __next40pxDefaultSize: true,
    variant: "primary",
    type: "submit",
    "aria-disabled": !title || isSaving,
    isBusy: isSaving
  }, confirmLabel))));
}
//# sourceMappingURL=create-pattern-modal.js.map