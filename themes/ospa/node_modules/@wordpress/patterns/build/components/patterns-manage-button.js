"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _components = require("@wordpress/components");
var _i18n = require("@wordpress/i18n");
var _blocks = require("@wordpress/blocks");
var _data = require("@wordpress/data");
var _blockEditor = require("@wordpress/block-editor");
var _url = require("@wordpress/url");
var _coreData = require("@wordpress/core-data");
var _store = require("../store");
var _lockUnlock = require("../lock-unlock");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function PatternsManageButton({
  clientId
}) {
  const {
    canRemove,
    isVisible,
    managePatternsUrl
  } = (0, _data.useSelect)(select => {
    const {
      getBlock,
      canRemoveBlock,
      getBlockCount
    } = select(_blockEditor.store);
    const {
      canUser
    } = select(_coreData.store);
    const reusableBlock = getBlock(clientId);
    return {
      canRemove: canRemoveBlock(clientId),
      isVisible: !!reusableBlock && (0, _blocks.isReusableBlock)(reusableBlock) && !!canUser('update', 'blocks', reusableBlock.attributes.ref),
      innerBlockCount: getBlockCount(clientId),
      // The site editor and templates both check whether the user
      // has edit_theme_options capabilities. We can leverage that here
      // and omit the manage patterns link if the user can't access it.
      managePatternsUrl: canUser('create', 'templates') ? (0, _url.addQueryArgs)('site-editor.php', {
        path: '/patterns'
      }) : (0, _url.addQueryArgs)('edit.php', {
        post_type: 'wp_block'
      })
    };
  }, [clientId]);

  // Ignore reason: false positive of the lint rule.
  // eslint-disable-next-line @wordpress/no-unused-vars-before-return
  const {
    convertSyncedPatternToStatic
  } = (0, _lockUnlock.unlock)((0, _data.useDispatch)(_store.store));
  if (!isVisible) {
    return null;
  }
  return (0, _react.createElement)(_react.Fragment, null, canRemove && (0, _react.createElement)(_components.MenuItem, {
    onClick: () => convertSyncedPatternToStatic(clientId)
  }, (0, _i18n.__)('Detach')), (0, _react.createElement)(_components.MenuItem, {
    href: managePatternsUrl
  }, (0, _i18n.__)('Manage patterns')));
}
var _default = exports.default = PatternsManageButton;
//# sourceMappingURL=patterns-manage-button.js.map