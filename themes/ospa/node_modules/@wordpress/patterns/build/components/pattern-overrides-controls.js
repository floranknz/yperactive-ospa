"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _element = require("@wordpress/element");
var _blockEditor = require("@wordpress/block-editor");
var _components = require("@wordpress/components");
var _i18n = require("@wordpress/i18n");
var _constants = require("../constants");
var _allowOverridesModal = require("./allow-overrides-modal");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function removeBindings(bindings, syncedAttributes) {
  let updatedBindings = {};
  for (const attributeName of syncedAttributes) {
    // Omit any bindings that's not the same source from the `updatedBindings` object.
    if (bindings?.[attributeName]?.source !== _constants.PATTERN_OVERRIDES_BINDING_SOURCE && bindings?.[attributeName]?.source !== undefined) {
      updatedBindings[attributeName] = bindings[attributeName];
    }
  }
  if (!Object.keys(updatedBindings).length) {
    updatedBindings = undefined;
  }
  return updatedBindings;
}
function addBindings(bindings, syncedAttributes) {
  const updatedBindings = {
    ...bindings
  };
  for (const attributeName of syncedAttributes) {
    if (!bindings?.[attributeName]) {
      updatedBindings[attributeName] = {
        source: _constants.PATTERN_OVERRIDES_BINDING_SOURCE
      };
    }
  }
  return updatedBindings;
}
function PatternOverridesControls({
  attributes,
  name,
  setAttributes
}) {
  const controlId = (0, _element.useId)();
  const [showAllowOverridesModal, setShowAllowOverridesModal] = (0, _element.useState)(false);
  const [showDisallowOverridesModal, setShowDisallowOverridesModal] = (0, _element.useState)(false);
  const syncedAttributes = _constants.PARTIAL_SYNCING_SUPPORTED_BLOCKS[name];
  const attributeSources = syncedAttributes.map(attributeName => attributes.metadata?.bindings?.[attributeName]?.source);
  const isConnectedToOtherSources = attributeSources.every(source => source && source !== 'core/pattern-overrides');
  function updateBindings(isChecked, customName) {
    const prevBindings = attributes?.metadata?.bindings;
    const updatedBindings = isChecked ? addBindings(prevBindings, syncedAttributes) : removeBindings(prevBindings, syncedAttributes);
    const updatedMetadata = {
      ...attributes.metadata,
      bindings: updatedBindings
    };
    if (customName) {
      updatedMetadata.name = customName;
    }
    setAttributes({
      metadata: updatedMetadata
    });
  }

  // Avoid overwriting other (e.g. meta) bindings.
  if (isConnectedToOtherSources) {
    return null;
  }
  const hasName = !!attributes.metadata?.name;
  const allowOverrides = hasName && attributeSources.some(source => source === _constants.PATTERN_OVERRIDES_BINDING_SOURCE);
  return (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)(_blockEditor.InspectorControls, {
    group: "advanced"
  }, (0, _react.createElement)(_components.BaseControl, {
    id: controlId,
    label: (0, _i18n.__)('Overrides'),
    help: (0, _i18n.__)('Allow changes to this block throughout instances of this pattern.')
  }, (0, _react.createElement)(_components.Button, {
    __next40pxDefaultSize: true,
    className: "pattern-overrides-control__allow-overrides-button",
    variant: "secondary",
    "aria-haspopup": "dialog",
    onClick: () => {
      if (allowOverrides) {
        setShowDisallowOverridesModal(true);
      } else {
        setShowAllowOverridesModal(true);
      }
    }
  }, allowOverrides ? (0, _i18n.__)('Disable overrides') : (0, _i18n.__)('Enable overrides')))), showAllowOverridesModal && (0, _react.createElement)(_allowOverridesModal.AllowOverridesModal, {
    initialName: attributes.metadata?.name,
    onClose: () => setShowAllowOverridesModal(false),
    onSave: newName => {
      updateBindings(true, newName);
    }
  }), showDisallowOverridesModal && (0, _react.createElement)(_allowOverridesModal.DisallowOverridesModal, {
    onClose: () => setShowDisallowOverridesModal(false),
    onSave: () => updateBindings(false)
  }));
}
var _default = exports.default = PatternOverridesControls;
//# sourceMappingURL=pattern-overrides-controls.js.map