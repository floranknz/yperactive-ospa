import { createElement } from "react";
/**
 * WordPress dependencies
 */
import { Button, Modal, TextControl, __experimentalHStack as HStack, __experimentalVStack as VStack } from '@wordpress/components';
import { store as coreStore } from '@wordpress/core-data';
import { useDispatch } from '@wordpress/data';
import { useState } from '@wordpress/element';
import { decodeEntities } from '@wordpress/html-entities';
import { __ } from '@wordpress/i18n';
import { store as noticesStore } from '@wordpress/notices';
export default function RenamePatternModal({
  onClose,
  onError,
  onSuccess,
  pattern,
  ...props
}) {
  const originalName = decodeEntities(pattern.title);
  const [name, setName] = useState(originalName);
  const [isSaving, setIsSaving] = useState(false);
  const {
    editEntityRecord,
    __experimentalSaveSpecifiedEntityEdits: saveSpecifiedEntityEdits
  } = useDispatch(coreStore);
  const {
    createSuccessNotice,
    createErrorNotice
  } = useDispatch(noticesStore);
  const onRename = async event => {
    event.preventDefault();
    if (!name || name === pattern.title || isSaving) {
      return;
    }
    try {
      await editEntityRecord('postType', pattern.type, pattern.id, {
        title: name
      });
      setIsSaving(true);
      setName('');
      onClose?.();
      const savedRecord = await saveSpecifiedEntityEdits('postType', pattern.type, pattern.id, ['title'], {
        throwOnError: true
      });
      onSuccess?.(savedRecord);
      createSuccessNotice(__('Pattern renamed'), {
        type: 'snackbar',
        id: 'pattern-update'
      });
    } catch (error) {
      onError?.();
      const errorMessage = error.message && error.code !== 'unknown_error' ? error.message : __('An error occurred while renaming the pattern.');
      createErrorNotice(errorMessage, {
        type: 'snackbar',
        id: 'pattern-update'
      });
    } finally {
      setIsSaving(false);
      setName('');
    }
  };
  const onRequestClose = () => {
    onClose?.();
    setName('');
  };
  return createElement(Modal, {
    title: __('Rename'),
    ...props,
    onRequestClose: onClose
  }, createElement("form", {
    onSubmit: onRename
  }, createElement(VStack, {
    spacing: "5"
  }, createElement(TextControl, {
    __nextHasNoMarginBottom: true,
    __next40pxDefaultSize: true,
    label: __('Name'),
    value: name,
    onChange: setName,
    required: true
  }), createElement(HStack, {
    justify: "right"
  }, createElement(Button, {
    __next40pxDefaultSize: true,
    variant: "tertiary",
    onClick: onRequestClose
  }, __('Cancel')), createElement(Button, {
    __next40pxDefaultSize: true,
    variant: "primary",
    type: "submit"
  }, __('Save'))))));
}
//# sourceMappingURL=rename-pattern-modal.js.map