{"version":3,"names":["_changeCase","require","_url","_htmlEntities","_apiFetch","_interopRequireDefault","_name","_entities","_utils","_sync","_fetch","getAuthors","query","dispatch","path","addQueryArgs","users","apiFetch","receiveUserQuery","exports","getCurrentUser","currentUser","receiveCurrentUser","getEntityRecord","kind","name","key","select","configs","getOrLoadEntitiesConfig","entityConfig","find","config","__experimentalNoFetch","lock","__unstableAcquireStoreLock","STORE_NAME","exclusive","window","__experimentalEnableSync","syncConfig","process","env","IS_GUTENBERG_PLUGIN","objectId","getSyncObjectId","getSyncProvider","bootstrap","syncObjectType","record","receiveEntityRecords","type","recordId","edits","meta","undo","undefined","_fields","Set","getNormalizedCommaSeparable","DEFAULT_ENTITY_KEY","join","baseURL","baseURLParams","include","hasRecords","hasEntityRecords","__unstableReleaseStoreLock","getRawEntityRecord","forwardResolver","getEditedEntityRecord","getEntityRecords","registry","records","supportsPagination","per_page","response","parse","Object","values","json","totalItems","parseInt","headers","get","totalPages","map","split","forEach","field","hasOwnProperty","batch","context","resolutionsArgs","filter","selectorName","args","e","shouldInvalidate","action","invalidateCache","getCurrentTheme","resolveSelect","activeThemes","status","receiveCurrentTheme","getThemeSupports","getEmbedPreview","url","embedProxyResponse","receiveEmbedPreview","error","canUser","requestedAction","resource","id","hasStartedResolution","resourcePath","retrievedActions","includes","Error","relatedAction","isAlreadyResolving","method","allowHeader","allowedMethods","allow","permissions","methods","create","read","update","delete","actionName","methodName","entries","receiveUserPermission","canUserEditEntityRecord","__unstable_rest_base","getAutosaves","postType","postId","rest_base","restBase","rest_namespace","restNamespace","getPostType","autosaves","length","receiveAutosaves","getAutosave","__experimentalGetTemplateForLink","link","template","then","data","__experimentalGetCurrentGlobalStylesId","globalStylesURL","_links","href","globalStylesObject","__experimentalReceiveCurrentGlobalStylesId","__experimentalGetCurrentThemeBaseGlobalStyles","currentTheme","themeGlobalStyles","stylesheet","__experimentalReceiveThemeBaseGlobalStyles","__experimentalGetCurrentThemeGlobalStylesVariations","variations","__experimentalReceiveThemeGlobalStyleVariations","getCurrentThemeGlobalStylesRevisions","globalStylesId","revisionsURL","resetRevisions","revisions","revision","fromEntries","value","camelCase","receiveThemeGlobalStyleRevisions","getBlockPatterns","patterns","fetchBlockPatterns","getBlockPatternCategories","categories","getUserPatternCategories","patternCategories","mappedPatternCategories","userCategory","label","decodeEntities","slug","getNavigationFallbackId","fallback","_embed","_embedded","self","receiveNavigationFallbackId","existingFallbackEntityRecord","invalidateNavigationQueries","finishResolution","getDefaultTemplateId","receiveDefaultTemplateId","getRevisions","recordKey","revisionKey","getRevisionsUrl","isPaginated","receiveRevisions","getRevision"],"sources":["@wordpress/core-data/src/resolvers.js"],"sourcesContent":["/**\n * External dependencies\n */\nimport { camelCase } from 'change-case';\n\n/**\n * WordPress dependencies\n */\nimport { addQueryArgs } from '@wordpress/url';\nimport { decodeEntities } from '@wordpress/html-entities';\nimport apiFetch from '@wordpress/api-fetch';\n\n/**\n * Internal dependencies\n */\nimport { STORE_NAME } from './name';\nimport { getOrLoadEntitiesConfig, DEFAULT_ENTITY_KEY } from './entities';\nimport { forwardResolver, getNormalizedCommaSeparable } from './utils';\nimport { getSyncProvider } from './sync';\nimport { fetchBlockPatterns } from './fetch';\n\n/**\n * Requests authors from the REST API.\n *\n * @param {Object|undefined} query Optional object of query parameters to\n *                                 include with request.\n */\nexport const getAuthors =\n\t( query ) =>\n\tasync ( { dispatch } ) => {\n\t\tconst path = addQueryArgs(\n\t\t\t'/wp/v2/users/?who=authors&per_page=100',\n\t\t\tquery\n\t\t);\n\t\tconst users = await apiFetch( { path } );\n\t\tdispatch.receiveUserQuery( path, users );\n\t};\n\n/**\n * Requests the current user from the REST API.\n */\nexport const getCurrentUser =\n\t() =>\n\tasync ( { dispatch } ) => {\n\t\tconst currentUser = await apiFetch( { path: '/wp/v2/users/me' } );\n\t\tdispatch.receiveCurrentUser( currentUser );\n\t};\n\n/**\n * Requests an entity's record from the REST API.\n *\n * @param {string}           kind  Entity kind.\n * @param {string}           name  Entity name.\n * @param {number|string}    key   Record's key\n * @param {Object|undefined} query Optional object of query parameters to\n *                                 include with request. If requesting specific\n *                                 fields, fields must always include the ID.\n */\nexport const getEntityRecord =\n\t( kind, name, key = '', query ) =>\n\tasync ( { select, dispatch } ) => {\n\t\tconst configs = await dispatch( getOrLoadEntitiesConfig( kind, name ) );\n\t\tconst entityConfig = configs.find(\n\t\t\t( config ) => config.name === name && config.kind === kind\n\t\t);\n\t\tif ( ! entityConfig || entityConfig?.__experimentalNoFetch ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst lock = await dispatch.__unstableAcquireStoreLock(\n\t\t\tSTORE_NAME,\n\t\t\t[ 'entities', 'records', kind, name, key ],\n\t\t\t{ exclusive: false }\n\t\t);\n\n\t\ttry {\n\t\t\t// Entity supports configs,\n\t\t\t// use the sync algorithm instead of the old fetch behavior.\n\t\t\tif (\n\t\t\t\twindow.__experimentalEnableSync &&\n\t\t\t\tentityConfig.syncConfig &&\n\t\t\t\t! query\n\t\t\t) {\n\t\t\t\tif ( process.env.IS_GUTENBERG_PLUGIN ) {\n\t\t\t\t\tconst objectId = entityConfig.getSyncObjectId( key );\n\n\t\t\t\t\t// Loads the persisted document.\n\t\t\t\t\tawait getSyncProvider().bootstrap(\n\t\t\t\t\t\tentityConfig.syncObjectType,\n\t\t\t\t\t\tobjectId,\n\t\t\t\t\t\t( record ) => {\n\t\t\t\t\t\t\tdispatch.receiveEntityRecords(\n\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\trecord,\n\t\t\t\t\t\t\t\tquery\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\n\t\t\t\t\t// Boostraps the edited document as well (and load from peers).\n\t\t\t\t\tawait getSyncProvider().bootstrap(\n\t\t\t\t\t\tentityConfig.syncObjectType + '--edit',\n\t\t\t\t\t\tobjectId,\n\t\t\t\t\t\t( record ) => {\n\t\t\t\t\t\t\tdispatch( {\n\t\t\t\t\t\t\t\ttype: 'EDIT_ENTITY_RECORD',\n\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\trecordId: key,\n\t\t\t\t\t\t\t\tedits: record,\n\t\t\t\t\t\t\t\tmeta: {\n\t\t\t\t\t\t\t\t\tundo: undefined,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( query !== undefined && query._fields ) {\n\t\t\t\t\t// If requesting specific fields, items and query association to said\n\t\t\t\t\t// records are stored by ID reference. Thus, fields must always include\n\t\t\t\t\t// the ID.\n\t\t\t\t\tquery = {\n\t\t\t\t\t\t...query,\n\t\t\t\t\t\t_fields: [\n\t\t\t\t\t\t\t...new Set( [\n\t\t\t\t\t\t\t\t...( getNormalizedCommaSeparable(\n\t\t\t\t\t\t\t\t\tquery._fields\n\t\t\t\t\t\t\t\t) || [] ),\n\t\t\t\t\t\t\t\tentityConfig.key || DEFAULT_ENTITY_KEY,\n\t\t\t\t\t\t\t] ),\n\t\t\t\t\t\t].join(),\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Disable reason: While true that an early return could leave `path`\n\t\t\t\t// unused, it's important that path is derived using the query prior to\n\t\t\t\t// additional query modifications in the condition below, since those\n\t\t\t\t// modifications are relevant to how the data is tracked in state, and not\n\t\t\t\t// for how the request is made to the REST API.\n\n\t\t\t\t// eslint-disable-next-line @wordpress/no-unused-vars-before-return\n\t\t\t\tconst path = addQueryArgs(\n\t\t\t\t\tentityConfig.baseURL + ( key ? '/' + key : '' ),\n\t\t\t\t\t{\n\t\t\t\t\t\t...entityConfig.baseURLParams,\n\t\t\t\t\t\t...query,\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tif ( query !== undefined ) {\n\t\t\t\t\tquery = { ...query, include: [ key ] };\n\n\t\t\t\t\t// The resolution cache won't consider query as reusable based on the\n\t\t\t\t\t// fields, so it's tested here, prior to initiating the REST request,\n\t\t\t\t\t// and without causing `getEntityRecords` resolution to occur.\n\t\t\t\t\tconst hasRecords = select.hasEntityRecords(\n\t\t\t\t\t\tkind,\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tquery\n\t\t\t\t\t);\n\t\t\t\t\tif ( hasRecords ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst record = await apiFetch( { path } );\n\t\t\t\tdispatch.receiveEntityRecords( kind, name, record, query );\n\t\t\t}\n\t\t} finally {\n\t\t\tdispatch.__unstableReleaseStoreLock( lock );\n\t\t}\n\t};\n\n/**\n * Requests an entity's record from the REST API.\n */\nexport const getRawEntityRecord = forwardResolver( 'getEntityRecord' );\n\n/**\n * Requests an entity's record from the REST API.\n */\nexport const getEditedEntityRecord = forwardResolver( 'getEntityRecord' );\n\n/**\n * Requests the entity's records from the REST API.\n *\n * @param {string}  kind  Entity kind.\n * @param {string}  name  Entity name.\n * @param {Object?} query Query Object. If requesting specific fields, fields\n *                        must always include the ID.\n */\nexport const getEntityRecords =\n\t( kind, name, query = {} ) =>\n\tasync ( { dispatch, registry } ) => {\n\t\tconst configs = await dispatch( getOrLoadEntitiesConfig( kind, name ) );\n\t\tconst entityConfig = configs.find(\n\t\t\t( config ) => config.name === name && config.kind === kind\n\t\t);\n\t\tif ( ! entityConfig || entityConfig?.__experimentalNoFetch ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst lock = await dispatch.__unstableAcquireStoreLock(\n\t\t\tSTORE_NAME,\n\t\t\t[ 'entities', 'records', kind, name ],\n\t\t\t{ exclusive: false }\n\t\t);\n\n\t\ttry {\n\t\t\tif ( query._fields ) {\n\t\t\t\t// If requesting specific fields, items and query association to said\n\t\t\t\t// records are stored by ID reference. Thus, fields must always include\n\t\t\t\t// the ID.\n\t\t\t\tquery = {\n\t\t\t\t\t...query,\n\t\t\t\t\t_fields: [\n\t\t\t\t\t\t...new Set( [\n\t\t\t\t\t\t\t...( getNormalizedCommaSeparable( query._fields ) ||\n\t\t\t\t\t\t\t\t[] ),\n\t\t\t\t\t\t\tentityConfig.key || DEFAULT_ENTITY_KEY,\n\t\t\t\t\t\t] ),\n\t\t\t\t\t].join(),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst path = addQueryArgs( entityConfig.baseURL, {\n\t\t\t\t...entityConfig.baseURLParams,\n\t\t\t\t...query,\n\t\t\t} );\n\n\t\t\tlet records, meta;\n\t\t\tif ( entityConfig.supportsPagination && query.per_page !== -1 ) {\n\t\t\t\tconst response = await apiFetch( { path, parse: false } );\n\t\t\t\trecords = Object.values( await response.json() );\n\t\t\t\tmeta = {\n\t\t\t\t\ttotalItems: parseInt(\n\t\t\t\t\t\tresponse.headers.get( 'X-WP-Total' )\n\t\t\t\t\t),\n\t\t\t\t\ttotalPages: parseInt(\n\t\t\t\t\t\tresponse.headers.get( 'X-WP-TotalPages' )\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\trecords = Object.values( await apiFetch( { path } ) );\n\t\t\t}\n\n\t\t\t// If we request fields but the result doesn't contain the fields,\n\t\t\t// explicitly set these fields as \"undefined\"\n\t\t\t// that way we consider the query \"fulfilled\".\n\t\t\tif ( query._fields ) {\n\t\t\t\trecords = records.map( ( record ) => {\n\t\t\t\t\tquery._fields.split( ',' ).forEach( ( field ) => {\n\t\t\t\t\t\tif ( ! record.hasOwnProperty( field ) ) {\n\t\t\t\t\t\t\trecord[ field ] = undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t\treturn record;\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tregistry.batch( () => {\n\t\t\t\tdispatch.receiveEntityRecords(\n\t\t\t\t\tkind,\n\t\t\t\t\tname,\n\t\t\t\t\trecords,\n\t\t\t\t\tquery,\n\t\t\t\t\tfalse,\n\t\t\t\t\tundefined,\n\t\t\t\t\tmeta\n\t\t\t\t);\n\n\t\t\t\t// When requesting all fields, the list of results can be used to\n\t\t\t\t// resolve the `getEntityRecord` selector in addition to `getEntityRecords`.\n\t\t\t\t// See https://github.com/WordPress/gutenberg/pull/26575\n\t\t\t\tif ( ! query?._fields && ! query.context ) {\n\t\t\t\t\tconst key = entityConfig.key || DEFAULT_ENTITY_KEY;\n\t\t\t\t\tconst resolutionsArgs = records\n\t\t\t\t\t\t.filter( ( record ) => record[ key ] )\n\t\t\t\t\t\t.map( ( record ) => [ kind, name, record[ key ] ] );\n\n\t\t\t\t\tdispatch( {\n\t\t\t\t\t\ttype: 'START_RESOLUTIONS',\n\t\t\t\t\t\tselectorName: 'getEntityRecord',\n\t\t\t\t\t\targs: resolutionsArgs,\n\t\t\t\t\t} );\n\t\t\t\t\tdispatch( {\n\t\t\t\t\t\ttype: 'FINISH_RESOLUTIONS',\n\t\t\t\t\t\tselectorName: 'getEntityRecord',\n\t\t\t\t\t\targs: resolutionsArgs,\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\tdispatch.__unstableReleaseStoreLock( lock );\n\t\t\t} );\n\t\t} catch ( e ) {\n\t\t\tdispatch.__unstableReleaseStoreLock( lock );\n\t\t}\n\t};\n\ngetEntityRecords.shouldInvalidate = ( action, kind, name ) => {\n\treturn (\n\t\t( action.type === 'RECEIVE_ITEMS' || action.type === 'REMOVE_ITEMS' ) &&\n\t\taction.invalidateCache &&\n\t\tkind === action.kind &&\n\t\tname === action.name\n\t);\n};\n\n/**\n * Requests the current theme.\n */\nexport const getCurrentTheme =\n\t() =>\n\tasync ( { dispatch, resolveSelect } ) => {\n\t\tconst activeThemes = await resolveSelect.getEntityRecords(\n\t\t\t'root',\n\t\t\t'theme',\n\t\t\t{ status: 'active' }\n\t\t);\n\n\t\tdispatch.receiveCurrentTheme( activeThemes[ 0 ] );\n\t};\n\n/**\n * Requests theme supports data from the index.\n */\nexport const getThemeSupports = forwardResolver( 'getCurrentTheme' );\n\n/**\n * Requests a preview from the Embed API.\n *\n * @param {string} url URL to get the preview for.\n */\nexport const getEmbedPreview =\n\t( url ) =>\n\tasync ( { dispatch } ) => {\n\t\ttry {\n\t\t\tconst embedProxyResponse = await apiFetch( {\n\t\t\t\tpath: addQueryArgs( '/oembed/1.0/proxy', { url } ),\n\t\t\t} );\n\t\t\tdispatch.receiveEmbedPreview( url, embedProxyResponse );\n\t\t} catch ( error ) {\n\t\t\t// Embed API 404s if the URL cannot be embedded, so we have to catch the error from the apiRequest here.\n\t\t\tdispatch.receiveEmbedPreview( url, false );\n\t\t}\n\t};\n\n/**\n * Checks whether the current user can perform the given action on the given\n * REST resource.\n *\n * @param {string}  requestedAction Action to check. One of: 'create', 'read', 'update',\n *                                  'delete'.\n * @param {string}  resource        REST resource to check, e.g. 'media' or 'posts'.\n * @param {?string} id              ID of the rest resource to check.\n */\nexport const canUser =\n\t( requestedAction, resource, id ) =>\n\tasync ( { dispatch, registry } ) => {\n\t\tconst { hasStartedResolution } = registry.select( STORE_NAME );\n\n\t\tconst resourcePath = id ? `${ resource }/${ id }` : resource;\n\t\tconst retrievedActions = [ 'create', 'read', 'update', 'delete' ];\n\n\t\tif ( ! retrievedActions.includes( requestedAction ) ) {\n\t\t\tthrow new Error( `'${ requestedAction }' is not a valid action.` );\n\t\t}\n\n\t\t// Prevent resolving the same resource twice.\n\t\tfor ( const relatedAction of retrievedActions ) {\n\t\t\tif ( relatedAction === requestedAction ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst isAlreadyResolving = hasStartedResolution( 'canUser', [\n\t\t\t\trelatedAction,\n\t\t\t\tresource,\n\t\t\t\tid,\n\t\t\t] );\n\t\t\tif ( isAlreadyResolving ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tlet response;\n\t\ttry {\n\t\t\tresponse = await apiFetch( {\n\t\t\t\tpath: `/wp/v2/${ resourcePath }`,\n\t\t\t\tmethod: 'OPTIONS',\n\t\t\t\tparse: false,\n\t\t\t} );\n\t\t} catch ( error ) {\n\t\t\t// Do nothing if our OPTIONS request comes back with an API error (4xx or\n\t\t\t// 5xx). The previously determined isAllowed value will remain in the store.\n\t\t\treturn;\n\t\t}\n\n\t\t// Optional chaining operator is used here because the API requests don't\n\t\t// return the expected result in the native version. Instead, API requests\n\t\t// only return the result, without including response properties like the headers.\n\t\tconst allowHeader = response.headers?.get( 'allow' );\n\t\tconst allowedMethods = allowHeader?.allow || allowHeader || '';\n\n\t\tconst permissions = {};\n\t\tconst methods = {\n\t\t\tcreate: 'POST',\n\t\t\tread: 'GET',\n\t\t\tupdate: 'PUT',\n\t\t\tdelete: 'DELETE',\n\t\t};\n\t\tfor ( const [ actionName, methodName ] of Object.entries( methods ) ) {\n\t\t\tpermissions[ actionName ] = allowedMethods.includes( methodName );\n\t\t}\n\n\t\tfor ( const action of retrievedActions ) {\n\t\t\tdispatch.receiveUserPermission(\n\t\t\t\t`${ action }/${ resourcePath }`,\n\t\t\t\tpermissions[ action ]\n\t\t\t);\n\t\t}\n\t};\n\n/**\n * Checks whether the current user can perform the given action on the given\n * REST resource.\n *\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {string} recordId Record's id.\n */\nexport const canUserEditEntityRecord =\n\t( kind, name, recordId ) =>\n\tasync ( { dispatch } ) => {\n\t\tconst configs = await dispatch( getOrLoadEntitiesConfig( kind, name ) );\n\t\tconst entityConfig = configs.find(\n\t\t\t( config ) => config.name === name && config.kind === kind\n\t\t);\n\t\tif ( ! entityConfig ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst resource = entityConfig.__unstable_rest_base;\n\t\tawait dispatch( canUser( 'update', resource, recordId ) );\n\t};\n\n/**\n * Request autosave data from the REST API.\n *\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n */\nexport const getAutosaves =\n\t( postType, postId ) =>\n\tasync ( { dispatch, resolveSelect } ) => {\n\t\tconst { rest_base: restBase, rest_namespace: restNamespace = 'wp/v2' } =\n\t\t\tawait resolveSelect.getPostType( postType );\n\t\tconst autosaves = await apiFetch( {\n\t\t\tpath: `/${ restNamespace }/${ restBase }/${ postId }/autosaves?context=edit`,\n\t\t} );\n\n\t\tif ( autosaves && autosaves.length ) {\n\t\t\tdispatch.receiveAutosaves( postId, autosaves );\n\t\t}\n\t};\n\n/**\n * Request autosave data from the REST API.\n *\n * This resolver exists to ensure the underlying autosaves are fetched via\n * `getAutosaves` when a call to the `getAutosave` selector is made.\n *\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n */\nexport const getAutosave =\n\t( postType, postId ) =>\n\tasync ( { resolveSelect } ) => {\n\t\tawait resolveSelect.getAutosaves( postType, postId );\n\t};\n\n/**\n * Retrieve the frontend template used for a given link.\n *\n * @param {string} link Link.\n */\nexport const __experimentalGetTemplateForLink =\n\t( link ) =>\n\tasync ( { dispatch, resolveSelect } ) => {\n\t\tlet template;\n\t\ttry {\n\t\t\t// This is NOT calling a REST endpoint but rather ends up with a response from\n\t\t\t// an Ajax function which has a different shape from a WP_REST_Response.\n\t\t\ttemplate = await apiFetch( {\n\t\t\t\turl: addQueryArgs( link, {\n\t\t\t\t\t'_wp-find-template': true,\n\t\t\t\t} ),\n\t\t\t} ).then( ( { data } ) => data );\n\t\t} catch ( e ) {\n\t\t\t// For non-FSE themes, it is possible that this request returns an error.\n\t\t}\n\n\t\tif ( ! template ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst record = await resolveSelect.getEntityRecord(\n\t\t\t'postType',\n\t\t\t'wp_template',\n\t\t\ttemplate.id\n\t\t);\n\n\t\tif ( record ) {\n\t\t\tdispatch.receiveEntityRecords(\n\t\t\t\t'postType',\n\t\t\t\t'wp_template',\n\t\t\t\t[ record ],\n\t\t\t\t{\n\t\t\t\t\t'find-template': link,\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t};\n\n__experimentalGetTemplateForLink.shouldInvalidate = ( action ) => {\n\treturn (\n\t\t( action.type === 'RECEIVE_ITEMS' || action.type === 'REMOVE_ITEMS' ) &&\n\t\taction.invalidateCache &&\n\t\taction.kind === 'postType' &&\n\t\taction.name === 'wp_template'\n\t);\n};\n\nexport const __experimentalGetCurrentGlobalStylesId =\n\t() =>\n\tasync ( { dispatch, resolveSelect } ) => {\n\t\tconst activeThemes = await resolveSelect.getEntityRecords(\n\t\t\t'root',\n\t\t\t'theme',\n\t\t\t{ status: 'active' }\n\t\t);\n\t\tconst globalStylesURL =\n\t\t\tactiveThemes?.[ 0 ]?._links?.[ 'wp:user-global-styles' ]?.[ 0 ]\n\t\t\t\t?.href;\n\t\tif ( globalStylesURL ) {\n\t\t\tconst globalStylesObject = await apiFetch( {\n\t\t\t\turl: globalStylesURL,\n\t\t\t} );\n\t\t\tdispatch.__experimentalReceiveCurrentGlobalStylesId(\n\t\t\t\tglobalStylesObject.id\n\t\t\t);\n\t\t}\n\t};\n\nexport const __experimentalGetCurrentThemeBaseGlobalStyles =\n\t() =>\n\tasync ( { resolveSelect, dispatch } ) => {\n\t\tconst currentTheme = await resolveSelect.getCurrentTheme();\n\t\tconst themeGlobalStyles = await apiFetch( {\n\t\t\tpath: `/wp/v2/global-styles/themes/${ currentTheme.stylesheet }`,\n\t\t} );\n\t\tdispatch.__experimentalReceiveThemeBaseGlobalStyles(\n\t\t\tcurrentTheme.stylesheet,\n\t\t\tthemeGlobalStyles\n\t\t);\n\t};\n\nexport const __experimentalGetCurrentThemeGlobalStylesVariations =\n\t() =>\n\tasync ( { resolveSelect, dispatch } ) => {\n\t\tconst currentTheme = await resolveSelect.getCurrentTheme();\n\t\tconst variations = await apiFetch( {\n\t\t\tpath: `/wp/v2/global-styles/themes/${ currentTheme.stylesheet }/variations`,\n\t\t} );\n\t\tdispatch.__experimentalReceiveThemeGlobalStyleVariations(\n\t\t\tcurrentTheme.stylesheet,\n\t\t\tvariations\n\t\t);\n\t};\n\n/**\n * Fetches and returns the revisions of the current global styles theme.\n */\nexport const getCurrentThemeGlobalStylesRevisions =\n\t() =>\n\tasync ( { resolveSelect, dispatch } ) => {\n\t\tconst globalStylesId =\n\t\t\tawait resolveSelect.__experimentalGetCurrentGlobalStylesId();\n\t\tconst record = globalStylesId\n\t\t\t? await resolveSelect.getEntityRecord(\n\t\t\t\t\t'root',\n\t\t\t\t\t'globalStyles',\n\t\t\t\t\tglobalStylesId\n\t\t\t  )\n\t\t\t: undefined;\n\t\tconst revisionsURL = record?._links?.[ 'version-history' ]?.[ 0 ]?.href;\n\n\t\tif ( revisionsURL ) {\n\t\t\tconst resetRevisions = await apiFetch( {\n\t\t\t\turl: revisionsURL,\n\t\t\t} );\n\t\t\tconst revisions = resetRevisions?.map( ( revision ) =>\n\t\t\t\tObject.fromEntries(\n\t\t\t\t\tObject.entries( revision ).map( ( [ key, value ] ) => [\n\t\t\t\t\t\tcamelCase( key ),\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t] )\n\t\t\t\t)\n\t\t\t);\n\t\t\tdispatch.receiveThemeGlobalStyleRevisions(\n\t\t\t\tglobalStylesId,\n\t\t\t\trevisions\n\t\t\t);\n\t\t}\n\t};\n\ngetCurrentThemeGlobalStylesRevisions.shouldInvalidate = ( action ) => {\n\treturn (\n\t\taction.type === 'SAVE_ENTITY_RECORD_FINISH' &&\n\t\taction.kind === 'root' &&\n\t\t! action.error &&\n\t\taction.name === 'globalStyles'\n\t);\n};\n\nexport const getBlockPatterns =\n\t() =>\n\tasync ( { dispatch } ) => {\n\t\tconst patterns = await fetchBlockPatterns();\n\t\tdispatch( { type: 'RECEIVE_BLOCK_PATTERNS', patterns } );\n\t};\n\nexport const getBlockPatternCategories =\n\t() =>\n\tasync ( { dispatch } ) => {\n\t\tconst categories = await apiFetch( {\n\t\t\tpath: '/wp/v2/block-patterns/categories',\n\t\t} );\n\t\tdispatch( { type: 'RECEIVE_BLOCK_PATTERN_CATEGORIES', categories } );\n\t};\n\nexport const getUserPatternCategories =\n\t() =>\n\tasync ( { dispatch, resolveSelect } ) => {\n\t\tconst patternCategories = await resolveSelect.getEntityRecords(\n\t\t\t'taxonomy',\n\t\t\t'wp_pattern_category',\n\t\t\t{\n\t\t\t\tper_page: -1,\n\t\t\t\t_fields: 'id,name,description,slug',\n\t\t\t\tcontext: 'view',\n\t\t\t}\n\t\t);\n\n\t\tconst mappedPatternCategories =\n\t\t\tpatternCategories?.map( ( userCategory ) => ( {\n\t\t\t\t...userCategory,\n\t\t\t\tlabel: decodeEntities( userCategory.name ),\n\t\t\t\tname: userCategory.slug,\n\t\t\t} ) ) || [];\n\n\t\tdispatch( {\n\t\t\ttype: 'RECEIVE_USER_PATTERN_CATEGORIES',\n\t\t\tpatternCategories: mappedPatternCategories,\n\t\t} );\n\t};\n\nexport const getNavigationFallbackId =\n\t() =>\n\tasync ( { dispatch, select } ) => {\n\t\tconst fallback = await apiFetch( {\n\t\t\tpath: addQueryArgs( '/wp-block-editor/v1/navigation-fallback', {\n\t\t\t\t_embed: true,\n\t\t\t} ),\n\t\t} );\n\n\t\tconst record = fallback?._embedded?.self;\n\n\t\tdispatch.receiveNavigationFallbackId( fallback?.id );\n\n\t\tif ( record ) {\n\t\t\t// If the fallback is already in the store, don't invalidate navigation queries.\n\t\t\t// Otherwise, invalidate the cache for the scenario where there were no Navigation\n\t\t\t// posts in the state and the fallback created one.\n\t\t\tconst existingFallbackEntityRecord = select.getEntityRecord(\n\t\t\t\t'postType',\n\t\t\t\t'wp_navigation',\n\t\t\t\tfallback.id\n\t\t\t);\n\t\t\tconst invalidateNavigationQueries = ! existingFallbackEntityRecord;\n\t\t\tdispatch.receiveEntityRecords(\n\t\t\t\t'postType',\n\t\t\t\t'wp_navigation',\n\t\t\t\trecord,\n\t\t\t\tundefined,\n\t\t\t\tinvalidateNavigationQueries\n\t\t\t);\n\n\t\t\t// Resolve to avoid further network requests.\n\t\t\tdispatch.finishResolution( 'getEntityRecord', [\n\t\t\t\t'postType',\n\t\t\t\t'wp_navigation',\n\t\t\t\tfallback.id,\n\t\t\t] );\n\t\t}\n\t};\n\nexport const getDefaultTemplateId =\n\t( query ) =>\n\tasync ( { dispatch } ) => {\n\t\tconst template = await apiFetch( {\n\t\t\tpath: addQueryArgs( '/wp/v2/templates/lookup', query ),\n\t\t} );\n\t\tif ( template ) {\n\t\t\tdispatch.receiveDefaultTemplateId( query, template.id );\n\t\t}\n\t};\n\n/**\n * Requests an entity's revisions from the REST API.\n *\n * @param {string}           kind      Entity kind.\n * @param {string}           name      Entity name.\n * @param {number|string}    recordKey The key of the entity record whose revisions you want to fetch.\n * @param {Object|undefined} query     Optional object of query parameters to\n *                                     include with request. If requesting specific\n *                                     fields, fields must always include the ID.\n */\nexport const getRevisions =\n\t( kind, name, recordKey, query = {} ) =>\n\tasync ( { dispatch } ) => {\n\t\tconst configs = await dispatch( getOrLoadEntitiesConfig( kind, name ) );\n\t\tconst entityConfig = configs.find(\n\t\t\t( config ) => config.name === name && config.kind === kind\n\t\t);\n\n\t\tif ( ! entityConfig || entityConfig?.__experimentalNoFetch ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( query._fields ) {\n\t\t\t// If requesting specific fields, items and query association to said\n\t\t\t// records are stored by ID reference. Thus, fields must always include\n\t\t\t// the ID.\n\t\t\tquery = {\n\t\t\t\t...query,\n\t\t\t\t_fields: [\n\t\t\t\t\t...new Set( [\n\t\t\t\t\t\t...( getNormalizedCommaSeparable( query._fields ) ||\n\t\t\t\t\t\t\t[] ),\n\t\t\t\t\t\tentityConfig.revisionKey || DEFAULT_ENTITY_KEY,\n\t\t\t\t\t] ),\n\t\t\t\t].join(),\n\t\t\t};\n\t\t}\n\n\t\tconst path = addQueryArgs(\n\t\t\tentityConfig.getRevisionsUrl( recordKey ),\n\t\t\tquery\n\t\t);\n\n\t\tlet records, response;\n\t\tconst meta = {};\n\t\tconst isPaginated =\n\t\t\tentityConfig.supportsPagination && query.per_page !== -1;\n\t\ttry {\n\t\t\tresponse = await apiFetch( { path, parse: ! isPaginated } );\n\t\t} catch ( error ) {\n\t\t\t// Do nothing if our request comes back with an API error.\n\t\t\treturn;\n\t\t}\n\n\t\tif ( response ) {\n\t\t\tif ( isPaginated ) {\n\t\t\t\trecords = Object.values( await response.json() );\n\t\t\t\tmeta.totalItems = parseInt(\n\t\t\t\t\tresponse.headers.get( 'X-WP-Total' )\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\trecords = Object.values( response );\n\t\t\t}\n\n\t\t\t// If we request fields but the result doesn't contain the fields,\n\t\t\t// explicitly set these fields as \"undefined\"\n\t\t\t// that way we consider the query \"fulfilled\".\n\t\t\tif ( query._fields ) {\n\t\t\t\trecords = records.map( ( record ) => {\n\t\t\t\t\tquery._fields.split( ',' ).forEach( ( field ) => {\n\t\t\t\t\t\tif ( ! record.hasOwnProperty( field ) ) {\n\t\t\t\t\t\t\trecord[ field ] = undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t\treturn record;\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tdispatch.receiveRevisions(\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\trecordKey,\n\t\t\t\trecords,\n\t\t\t\tquery,\n\t\t\t\tfalse,\n\t\t\t\tmeta\n\t\t\t);\n\n\t\t\t// When requesting all fields, the list of results can be used to\n\t\t\t// resolve the `getRevision` selector in addition to `getRevisions`.\n\t\t\tif ( ! query?._fields && ! query.context ) {\n\t\t\t\tconst key = entityConfig.key || DEFAULT_ENTITY_KEY;\n\t\t\t\tconst resolutionsArgs = records\n\t\t\t\t\t.filter( ( record ) => record[ key ] )\n\t\t\t\t\t.map( ( record ) => [\n\t\t\t\t\t\tkind,\n\t\t\t\t\t\tname,\n\t\t\t\t\t\trecordKey,\n\t\t\t\t\t\trecord[ key ],\n\t\t\t\t\t] );\n\n\t\t\t\tdispatch( {\n\t\t\t\t\ttype: 'START_RESOLUTIONS',\n\t\t\t\t\tselectorName: 'getRevision',\n\t\t\t\t\targs: resolutionsArgs,\n\t\t\t\t} );\n\t\t\t\tdispatch( {\n\t\t\t\t\ttype: 'FINISH_RESOLUTIONS',\n\t\t\t\t\tselectorName: 'getRevision',\n\t\t\t\t\targs: resolutionsArgs,\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t};\n\n// Invalidate cache when a new revision is created.\ngetRevisions.shouldInvalidate = ( action, kind, name, recordKey ) =>\n\taction.type === 'SAVE_ENTITY_RECORD_FINISH' &&\n\tname === action.name &&\n\tkind === action.kind &&\n\t! action.error &&\n\trecordKey === action.recordId;\n\n/**\n * Requests a specific Entity revision from the REST API.\n *\n * @param {string}           kind        Entity kind.\n * @param {string}           name        Entity name.\n * @param {number|string}    recordKey   The key of the entity record whose revisions you want to fetch.\n * @param {number|string}    revisionKey The revision's key.\n * @param {Object|undefined} query       Optional object of query parameters to\n *                                       include with request. If requesting specific\n *                                       fields, fields must always include the ID.\n */\nexport const getRevision =\n\t( kind, name, recordKey, revisionKey, query ) =>\n\tasync ( { dispatch } ) => {\n\t\tconst configs = await dispatch( getOrLoadEntitiesConfig( kind, name ) );\n\t\tconst entityConfig = configs.find(\n\t\t\t( config ) => config.name === name && config.kind === kind\n\t\t);\n\n\t\tif ( ! entityConfig || entityConfig?.__experimentalNoFetch ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( query !== undefined && query._fields ) {\n\t\t\t// If requesting specific fields, items and query association to said\n\t\t\t// records are stored by ID reference. Thus, fields must always include\n\t\t\t// the ID.\n\t\t\tquery = {\n\t\t\t\t...query,\n\t\t\t\t_fields: [\n\t\t\t\t\t...new Set( [\n\t\t\t\t\t\t...( getNormalizedCommaSeparable( query._fields ) ||\n\t\t\t\t\t\t\t[] ),\n\t\t\t\t\t\tentityConfig.revisionKey || DEFAULT_ENTITY_KEY,\n\t\t\t\t\t] ),\n\t\t\t\t].join(),\n\t\t\t};\n\t\t}\n\t\tconst path = addQueryArgs(\n\t\t\tentityConfig.getRevisionsUrl( recordKey, revisionKey ),\n\t\t\tquery\n\t\t);\n\n\t\tlet record;\n\t\ttry {\n\t\t\trecord = await apiFetch( { path } );\n\t\t} catch ( error ) {\n\t\t\t// Do nothing if our request comes back with an API error.\n\t\t\treturn;\n\t\t}\n\n\t\tif ( record ) {\n\t\t\tdispatch.receiveRevisions( kind, name, recordKey, record, query );\n\t\t}\n\t};\n"],"mappings":"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","ignoreList":[]}