import { createElement, Fragment } from "react";
/**
 * WordPress dependencies
 */
import { useSelect, useDispatch } from '@wordpress/data';
import { decodeEntities } from '@wordpress/html-entities';
import { DropdownMenu, MenuGroup, MenuItem } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { useEntityRecord, store as coreStore } from '@wordpress/core-data';
import { check } from '@wordpress/icons';
import { store as noticesStore } from '@wordpress/notices';

/**
 * Internal dependencies
 */
import { store as editorStore } from '../../store';
import SwapTemplateButton from './swap-template-button';
import ResetDefaultTemplate from './reset-default-template';
import { unlock } from '../../lock-unlock';
import CreateNewTemplate from './create-new-template';
const POPOVER_PROPS = {
  className: 'editor-post-template__dropdown',
  placement: 'bottom-start'
};
export default function BlockThemeControl({
  id
}) {
  const {
    isTemplateHidden,
    onNavigateToEntityRecord,
    getEditorSettings,
    hasGoBack
  } = useSelect(select => {
    const {
      getRenderingMode,
      getEditorSettings: _getEditorSettings
    } = unlock(select(editorStore));
    const editorSettings = _getEditorSettings();
    return {
      isTemplateHidden: getRenderingMode() === 'post-only',
      onNavigateToEntityRecord: editorSettings.onNavigateToEntityRecord,
      getEditorSettings: _getEditorSettings,
      hasGoBack: editorSettings.hasOwnProperty('onNavigateToPreviousEntityRecord')
    };
  }, []);
  const {
    editedRecord: template,
    hasResolved
  } = useEntityRecord('postType', 'wp_template', id);
  const {
    createSuccessNotice
  } = useDispatch(noticesStore);
  const {
    setRenderingMode
  } = useDispatch(editorStore);
  const canCreateTemplate = useSelect(select => {
    var _select$canUser;
    return (_select$canUser = select(coreStore).canUser('create', 'templates')) !== null && _select$canUser !== void 0 ? _select$canUser : false;
  });
  if (!hasResolved) {
    return null;
  }

  // The site editor does not have a `onNavigateToPreviousEntityRecord` setting as it uses its own routing
  // and assigns its own backlink to focusMode pages.
  const notificationAction = hasGoBack ? [{
    label: __('Go back'),
    onClick: () => getEditorSettings().onNavigateToPreviousEntityRecord()
  }] : undefined;
  return createElement(DropdownMenu, {
    popoverProps: POPOVER_PROPS,
    focusOnMount: true,
    toggleProps: {
      size: 'compact',
      variant: 'tertiary'
    },
    label: __('Template options'),
    text: decodeEntities(template.title),
    icon: null
  }, ({
    onClose
  }) => createElement(Fragment, null, createElement(MenuGroup, null, canCreateTemplate && createElement(MenuItem, {
    onClick: () => {
      onNavigateToEntityRecord({
        postId: template.id,
        postType: 'wp_template'
      });
      onClose();
      createSuccessNotice(__('Editing template. Changes made here affect all posts and pages that use the template.'), {
        type: 'snackbar',
        actions: notificationAction
      });
    }
  }, __('Edit template')), createElement(SwapTemplateButton, {
    onClick: onClose
  }), createElement(ResetDefaultTemplate, {
    onClick: onClose
  }), canCreateTemplate && createElement(CreateNewTemplate, {
    onClick: onClose
  })), createElement(MenuGroup, null, createElement(MenuItem, {
    icon: !isTemplateHidden ? check : undefined,
    isSelected: !isTemplateHidden,
    role: "menuitemcheckbox",
    onClick: () => {
      setRenderingMode(isTemplateHidden ? 'template-locked' : 'post-only');
    }
  }, __('Show template')))));
}
//# sourceMappingURL=block-theme.js.map