import { createElement } from "react";
/**
 * External dependencies
 */
import clsx from 'clsx';

/**
 * WordPress dependencies
 */
import { useSelect } from '@wordpress/data';
import { useViewportMatch } from '@wordpress/compose';
import { __unstableMotion as motion } from '@wordpress/components';
import { store as preferencesStore } from '@wordpress/preferences';
import { useState } from '@wordpress/element';
import { PinnedItems } from '@wordpress/interface';
import { store as blockEditorStore } from '@wordpress/block-editor';

/**
 * Internal dependencies
 */
import CollapsableBlockToolbar from '../collapsible-block-toolbar';
import DocumentBar from '../document-bar';
import DocumentTools from '../document-tools';
import MoreMenu from '../more-menu';
import PostPreviewButton from '../post-preview-button';
import PostPublishButtonOrToggle from '../post-publish-button/post-publish-button-or-toggle';
import PostSavedState from '../post-saved-state';
import PostTypeSupportCheck from '../post-type-support-check';
import PostViewLink from '../post-view-link';
import PreviewDropdown from '../preview-dropdown';
import { store as editorStore } from '../../store';
const slideY = {
  hidden: {
    y: '-50px'
  },
  distractionFreeInactive: {
    y: 0
  },
  hover: {
    y: 0,
    transition: {
      type: 'tween',
      delay: 0.2
    }
  }
};
function Header({
  customSaveButton,
  forceIsDirty,
  forceDisableBlockTools,
  setEntitiesSavedStatesCallback,
  title,
  children
}) {
  const isWideViewport = useViewportMatch('large');
  const isLargeViewport = useViewportMatch('medium');
  const {
    isTextEditor,
    isPublishSidebarOpened,
    showIconLabels,
    hasFixedToolbar,
    isNestedEntity,
    isZoomedOutView
  } = useSelect(select => {
    const {
      get: getPreference
    } = select(preferencesStore);
    const {
      getEditorMode,
      getEditorSettings,
      isPublishSidebarOpened: _isPublishSidebarOpened
    } = select(editorStore);
    const {
      __unstableGetEditorMode
    } = select(blockEditorStore);
    return {
      isTextEditor: getEditorMode() === 'text',
      isPublishSidebarOpened: _isPublishSidebarOpened(),
      showIconLabels: getPreference('core', 'showIconLabels'),
      hasFixedToolbar: getPreference('core', 'fixedToolbar'),
      isNestedEntity: !!getEditorSettings().onNavigateToPreviousEntityRecord,
      isZoomedOutView: __unstableGetEditorMode() === 'zoom-out'
    };
  }, []);
  const hasTopToolbar = isLargeViewport && hasFixedToolbar;
  const [isBlockToolsCollapsed, setIsBlockToolsCollapsed] = useState(true);

  // The edit-post-header classname is only kept for backward compatibilty
  // as some plugins might be relying on its presence.
  return createElement("div", {
    className: "editor-header edit-post-header"
  }, children, createElement(motion.div, {
    variants: slideY,
    transition: {
      type: 'tween',
      delay: 0.8
    },
    className: "editor-header__toolbar"
  }, createElement(DocumentTools, {
    disableBlockTools: forceDisableBlockTools || isTextEditor
  }), hasTopToolbar && createElement(CollapsableBlockToolbar, {
    isCollapsed: isBlockToolsCollapsed,
    onToggle: setIsBlockToolsCollapsed
  }), createElement("div", {
    className: clsx('editor-header__center', {
      'is-collapsed': !isBlockToolsCollapsed && hasTopToolbar
    })
  }, !title ? createElement(PostTypeSupportCheck, {
    supportKeys: "title"
  }, createElement(DocumentBar, null)) : title)), createElement(motion.div, {
    variants: slideY,
    transition: {
      type: 'tween',
      delay: 0.8
    },
    className: "editor-header__settings"
  }, !customSaveButton && !isPublishSidebarOpened &&
  // This button isn't completely hidden by the publish sidebar.
  // We can't hide the whole toolbar when the publish sidebar is open because
  // we want to prevent mounting/unmounting the PostPublishButtonOrToggle DOM node.
  // We track that DOM node to return focus to the PostPublishButtonOrToggle
  // when the publish sidebar has been closed.
  createElement(PostSavedState, {
    forceIsDirty: forceIsDirty
  }), createElement(PreviewDropdown, {
    forceIsAutosaveable: forceIsDirty,
    disabled: isNestedEntity || isZoomedOutView
  }), createElement(PostPreviewButton, {
    className: "editor-header__post-preview-button",
    forceIsAutosaveable: forceIsDirty
  }), createElement(PostViewLink, null), !customSaveButton && createElement(PostPublishButtonOrToggle, {
    forceIsDirty: forceIsDirty,
    setEntitiesSavedStatesCallback: setEntitiesSavedStatesCallback
  }), customSaveButton, (isWideViewport || !showIconLabels) && createElement(PinnedItems.Slot, {
    scope: "core"
  }), createElement(MoreMenu, null)));
}
export default Header;
//# sourceMappingURL=index.js.map