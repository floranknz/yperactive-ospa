import { createElement } from "react";
/**
 * External dependencies
 */
import clsx from 'clsx';

/**
 * WordPress dependencies
 */
import { Modal } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { useShortcut, store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';
import { useDispatch, useSelect } from '@wordpress/data';
import { store as interfaceStore } from '@wordpress/interface';

/**
 * Internal dependencies
 */
import { textFormattingShortcuts } from './config';
import Shortcut from './shortcut';
import DynamicShortcut from './dynamic-shortcut';
const KEYBOARD_SHORTCUT_HELP_MODAL_NAME = 'editor/keyboard-shortcut-help';
const ShortcutList = ({
  shortcuts
}) =>
/*
 * Disable reason: The `list` ARIA role is redundant but
 * Safari+VoiceOver won't announce the list otherwise.
 */
/* eslint-disable jsx-a11y/no-redundant-roles */
createElement("ul", {
  className: "editor-keyboard-shortcut-help-modal__shortcut-list",
  role: "list"
}, shortcuts.map((shortcut, index) => createElement("li", {
  className: "editor-keyboard-shortcut-help-modal__shortcut",
  key: index
}, typeof shortcut === 'string' ? createElement(DynamicShortcut, {
  name: shortcut
}) : createElement(Shortcut, {
  ...shortcut
}))))
/* eslint-enable jsx-a11y/no-redundant-roles */;
const ShortcutSection = ({
  title,
  shortcuts,
  className
}) => createElement("section", {
  className: clsx('editor-keyboard-shortcut-help-modal__section', className)
}, !!title && createElement("h2", {
  className: "editor-keyboard-shortcut-help-modal__section-title"
}, title), createElement(ShortcutList, {
  shortcuts: shortcuts
}));
const ShortcutCategorySection = ({
  title,
  categoryName,
  additionalShortcuts = []
}) => {
  const categoryShortcuts = useSelect(select => {
    return select(keyboardShortcutsStore).getCategoryShortcuts(categoryName);
  }, [categoryName]);
  return createElement(ShortcutSection, {
    title: title,
    shortcuts: categoryShortcuts.concat(additionalShortcuts)
  });
};
function KeyboardShortcutHelpModal() {
  const isModalActive = useSelect(select => select(interfaceStore).isModalActive(KEYBOARD_SHORTCUT_HELP_MODAL_NAME), []);
  const {
    openModal,
    closeModal
  } = useDispatch(interfaceStore);
  const toggleModal = () => {
    if (isModalActive) {
      closeModal();
    } else {
      openModal(KEYBOARD_SHORTCUT_HELP_MODAL_NAME);
    }
  };
  useShortcut('core/editor/keyboard-shortcuts', toggleModal);
  if (!isModalActive) {
    return null;
  }
  return createElement(Modal, {
    className: "editor-keyboard-shortcut-help-modal",
    title: __('Keyboard shortcuts'),
    closeButtonLabel: __('Close'),
    onRequestClose: toggleModal
  }, createElement(ShortcutSection, {
    className: "editor-keyboard-shortcut-help-modal__main-shortcuts",
    shortcuts: ['core/editor/keyboard-shortcuts']
  }), createElement(ShortcutCategorySection, {
    title: __('Global shortcuts'),
    categoryName: "global"
  }), createElement(ShortcutCategorySection, {
    title: __('Selection shortcuts'),
    categoryName: "selection"
  }), createElement(ShortcutCategorySection, {
    title: __('Block shortcuts'),
    categoryName: "block",
    additionalShortcuts: [{
      keyCombination: {
        character: '/'
      },
      description: __('Change the block type after adding a new paragraph.'),
      /* translators: The forward-slash character. e.g. '/'. */
      ariaLabel: __('Forward-slash')
    }]
  }), createElement(ShortcutSection, {
    title: __('Text formatting'),
    shortcuts: textFormattingShortcuts
  }), createElement(ShortcutCategorySection, {
    title: __('List View shortcuts'),
    categoryName: "list-view"
  }));
}
export default KeyboardShortcutHelpModal;
//# sourceMappingURL=index.js.map