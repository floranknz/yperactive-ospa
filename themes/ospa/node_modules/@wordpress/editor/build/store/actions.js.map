{"version":3,"names":["_a11y","require","_apiFetch","_interopRequireDefault","_deprecated","_blocks","_notices","_coreData","_blockEditor","_hooks","_preferences","_i18n","_constants","_localAutosave","_noticeBuilder","setupEditor","post","edits","template","dispatch","setEditedPost","type","id","isNewPost","status","content","raw","blocks","parse","synchronizeBlocksWithTemplate","resetEditorBlocks","__unstableShouldCreateUndoLevel","Object","values","some","key","edit","_post$key$raw","editPost","exports","__experimentalTearDownEditor","deprecated","since","resetPost","version","alternative","updatePost","setupEditorState","postType","postId","options","select","registry","getCurrentPost","coreStore","editEntityRecord","savePost","isEditedPostSaveable","getEditedPostContent","isAutosave","undoIgnore","previousRecord","getEntityRecordNonTransientEdits","saveEntityRecord","error","getLastEntitySaveError","applyFilters","Promise","resolve","catch","err","args","getNotificationArgumentsForSaveFail","length","noticesStore","createErrorNotice","updatedRecord","getNotificationArgumentsForSaveSuccess","previousPost","resolveSelect","getPostType","createSuccessNotice","blockEditorStore","__unstableMarkLastChangeAsPersistent","refreshPost","trashPost","postTypeSlug","getCurrentPostType","removeNotice","TRASH_POST_NOTICE_ID","rest_base","restBase","rest_namespace","restNamespace","apiFetch","path","method","getNotificationArgumentsForTrashFail","autosave","local","isPostNew","isEditedPostNew","title","getEditedPostAttribute","excerpt","localAutosaveSet","__unstableSaveForPreview","forceIsAutosaveable","isEditedPostAutosaveable","isPostLocked","isDraft","includes","isPreview","getEditedPostPreviewLink","redo","undo","createUndoLevel","updatePostLock","lock","enablePublishSidebar","preferencesStore","set","disablePublishSidebar","lockPostSaving","lockName","unlockPostSaving","lockPostAutosaving","unlockPostAutosaving","selection","noChange","getEditedEntityRecord","__unstableCreateUndoLevel","blocksForSerialization","__unstableSerializeAndClean","updateEditorSettings","settings","setRenderingMode","mode","__unstableIsEditorReady","clearSelectedBlock","undefined","setDeviceType","deviceType","toggleEditorPanelEnabled","panelName","_registry$select$get","inactivePanels","get","isPanelInactive","updatedInactivePanels","filter","invactivePanelName","toggleEditorPanelOpened","_registry$select$get2","openPanels","isPanelOpen","updatedOpenPanels","openPanelName","removeEditorPanel","setIsInserterOpened","value","setIsListViewOpened","isOpen","toggleDistractionFree","isDistractionFree","batch","createInfoNotice","__","actions","label","onClick","toggle","switchEditorMode","speak","openPublishSidebar","closePublishSidebar","togglePublishSidebar","getBlockEditorAction","name","resetBlocks","receiveBlocks","updateBlock","updateBlockAttributes","selectBlock","startMultiSelect","stopMultiSelect","multiSelect","toggleSelection","replaceBlocks","replaceBlock","moveBlocksDown","moveBlocksUp","moveBlockToPosition","insertBlock","insertBlocks","showInsertionPoint","hideInsertionPoint","setTemplateValidity","synchronizeTemplate","mergeBlocks","removeBlocks","removeBlock","toggleBlockMode","startTyping","stopTyping","enterFormattedText","exitFormattedText","insertDefaultBlock","updateBlockListSettings"],"sources":["@wordpress/editor/src/store/actions.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { speak } from '@wordpress/a11y';\nimport apiFetch from '@wordpress/api-fetch';\nimport deprecated from '@wordpress/deprecated';\nimport {\n\tparse,\n\tsynchronizeBlocksWithTemplate,\n\t__unstableSerializeAndClean,\n} from '@wordpress/blocks';\nimport { store as noticesStore } from '@wordpress/notices';\nimport { store as coreStore } from '@wordpress/core-data';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\nimport { applyFilters } from '@wordpress/hooks';\nimport { store as preferencesStore } from '@wordpress/preferences';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport { TRASH_POST_NOTICE_ID } from './constants';\nimport { localAutosaveSet } from './local-autosave';\nimport {\n\tgetNotificationArgumentsForSaveSuccess,\n\tgetNotificationArgumentsForSaveFail,\n\tgetNotificationArgumentsForTrashFail,\n} from './utils/notice-builder';\n\n/**\n * Returns an action generator used in signalling that editor has initialized with\n * the specified post object and editor settings.\n *\n * @param {Object} post     Post object.\n * @param {Object} edits    Initial edited attributes object.\n * @param {Array?} template Block Template.\n */\nexport const setupEditor =\n\t( post, edits, template ) =>\n\t( { dispatch } ) => {\n\t\tdispatch.setEditedPost( post.type, post.id );\n\t\t// Apply a template for new posts only, if exists.\n\t\tconst isNewPost = post.status === 'auto-draft';\n\t\tif ( isNewPost && template ) {\n\t\t\t// In order to ensure maximum of a single parse during setup, edits are\n\t\t\t// included as part of editor setup action. Assume edited content as\n\t\t\t// canonical if provided, falling back to post.\n\t\t\tlet content;\n\t\t\tif ( 'content' in edits ) {\n\t\t\t\tcontent = edits.content;\n\t\t\t} else {\n\t\t\t\tcontent = post.content.raw;\n\t\t\t}\n\t\t\tlet blocks = parse( content );\n\t\t\tblocks = synchronizeBlocksWithTemplate( blocks, template );\n\t\t\tdispatch.resetEditorBlocks( blocks, {\n\t\t\t\t__unstableShouldCreateUndoLevel: false,\n\t\t\t} );\n\t\t}\n\t\tif (\n\t\t\tedits &&\n\t\t\tObject.values( edits ).some(\n\t\t\t\t( [ key, edit ] ) =>\n\t\t\t\t\tedit !== ( post[ key ]?.raw ?? post[ key ] )\n\t\t\t)\n\t\t) {\n\t\t\tdispatch.editPost( edits );\n\t\t}\n\t};\n\n/**\n * Returns an action object signalling that the editor is being destroyed and\n * that any necessary state or side-effect cleanup should occur.\n *\n * @deprecated\n *\n * @return {Object} Action object.\n */\nexport function __experimentalTearDownEditor() {\n\tdeprecated(\n\t\t\"wp.data.dispatch( 'core/editor' ).__experimentalTearDownEditor\",\n\t\t{\n\t\t\tsince: '6.5',\n\t\t}\n\t);\n\treturn { type: 'DO_NOTHING' };\n}\n\n/**\n * Returns an action object used in signalling that the latest version of the\n * post has been received, either by initialization or save.\n *\n * @deprecated Since WordPress 6.0.\n */\nexport function resetPost() {\n\tdeprecated( \"wp.data.dispatch( 'core/editor' ).resetPost\", {\n\t\tsince: '6.0',\n\t\tversion: '6.3',\n\t\talternative: 'Initialize the editor with the setupEditorState action',\n\t} );\n\treturn { type: 'DO_NOTHING' };\n}\n\n/**\n * Returns an action object used in signalling that a patch of updates for the\n * latest version of the post have been received.\n *\n * @return {Object} Action object.\n * @deprecated since Gutenberg 9.7.0.\n */\nexport function updatePost() {\n\tdeprecated( \"wp.data.dispatch( 'core/editor' ).updatePost\", {\n\t\tsince: '5.7',\n\t\talternative: 'Use the core entities store instead',\n\t} );\n\treturn {\n\t\ttype: 'DO_NOTHING',\n\t};\n}\n\n/**\n * Setup the editor state.\n *\n * @deprecated\n *\n * @param {Object} post Post object.\n */\nexport function setupEditorState( post ) {\n\tdeprecated( \"wp.data.dispatch( 'core/editor' ).setupEditorState\", {\n\t\tsince: '6.5',\n\t\talternative: \"wp.data.dispatch( 'core/editor' ).setEditedPost\",\n\t} );\n\treturn setEditedPost( post.type, post.id );\n}\n\n/**\n * Returns an action that sets the current post Type and post ID.\n *\n * @param {string} postType Post Type.\n * @param {string} postId   Post ID.\n *\n * @return {Object} Action object.\n */\nexport function setEditedPost( postType, postId ) {\n\treturn {\n\t\ttype: 'SET_EDITED_POST',\n\t\tpostType,\n\t\tpostId,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that attributes of the post have\n * been edited.\n *\n * @param {Object} edits   Post attributes to edit.\n * @param {Object} options Options for the edit.\n */\nexport const editPost =\n\t( edits, options ) =>\n\t( { select, registry } ) => {\n\t\tconst { id, type } = select.getCurrentPost();\n\t\tregistry\n\t\t\t.dispatch( coreStore )\n\t\t\t.editEntityRecord( 'postType', type, id, edits, options );\n\t};\n\n/**\n * Action for saving the current post in the editor.\n *\n * @param {Object} options\n */\nexport const savePost =\n\t( options = {} ) =>\n\tasync ( { select, dispatch, registry } ) => {\n\t\tif ( ! select.isEditedPostSaveable() ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst content = select.getEditedPostContent();\n\n\t\tif ( ! options.isAutosave ) {\n\t\t\tdispatch.editPost( { content }, { undoIgnore: true } );\n\t\t}\n\n\t\tconst previousRecord = select.getCurrentPost();\n\t\tconst edits = {\n\t\t\tid: previousRecord.id,\n\t\t\t...registry\n\t\t\t\t.select( coreStore )\n\t\t\t\t.getEntityRecordNonTransientEdits(\n\t\t\t\t\t'postType',\n\t\t\t\t\tpreviousRecord.type,\n\t\t\t\t\tpreviousRecord.id\n\t\t\t\t),\n\t\t\tcontent,\n\t\t};\n\t\tdispatch( { type: 'REQUEST_POST_UPDATE_START', options } );\n\t\tawait registry\n\t\t\t.dispatch( coreStore )\n\t\t\t.saveEntityRecord(\n\t\t\t\t'postType',\n\t\t\t\tpreviousRecord.type,\n\t\t\t\tedits,\n\t\t\t\toptions\n\t\t\t);\n\n\t\tlet error = registry\n\t\t\t.select( coreStore )\n\t\t\t.getLastEntitySaveError(\n\t\t\t\t'postType',\n\t\t\t\tpreviousRecord.type,\n\t\t\t\tpreviousRecord.id\n\t\t\t);\n\n\t\tif ( ! error ) {\n\t\t\tawait applyFilters(\n\t\t\t\t'editor.__unstableSavePost',\n\t\t\t\tPromise.resolve(),\n\t\t\t\toptions\n\t\t\t).catch( ( err ) => {\n\t\t\t\terror = err;\n\t\t\t} );\n\t\t}\n\t\tdispatch( { type: 'REQUEST_POST_UPDATE_FINISH', options } );\n\n\t\tif ( error ) {\n\t\t\tconst args = getNotificationArgumentsForSaveFail( {\n\t\t\t\tpost: previousRecord,\n\t\t\t\tedits,\n\t\t\t\terror,\n\t\t\t} );\n\t\t\tif ( args.length ) {\n\t\t\t\tregistry.dispatch( noticesStore ).createErrorNotice( ...args );\n\t\t\t}\n\t\t} else {\n\t\t\tconst updatedRecord = select.getCurrentPost();\n\t\t\tconst args = getNotificationArgumentsForSaveSuccess( {\n\t\t\t\tpreviousPost: previousRecord,\n\t\t\t\tpost: updatedRecord,\n\t\t\t\tpostType: await registry\n\t\t\t\t\t.resolveSelect( coreStore )\n\t\t\t\t\t.getPostType( updatedRecord.type ),\n\t\t\t\toptions,\n\t\t\t} );\n\t\t\tif ( args.length ) {\n\t\t\t\tregistry\n\t\t\t\t\t.dispatch( noticesStore )\n\t\t\t\t\t.createSuccessNotice( ...args );\n\t\t\t}\n\t\t\t// Make sure that any edits after saving create an undo level and are\n\t\t\t// considered for change detection.\n\t\t\tif ( ! options.isAutosave ) {\n\t\t\t\tregistry\n\t\t\t\t\t.dispatch( blockEditorStore )\n\t\t\t\t\t.__unstableMarkLastChangeAsPersistent();\n\t\t\t}\n\t\t}\n\t};\n\n/**\n * Action for refreshing the current post.\n *\n * @deprecated Since WordPress 6.0.\n */\nexport function refreshPost() {\n\tdeprecated( \"wp.data.dispatch( 'core/editor' ).refreshPost\", {\n\t\tsince: '6.0',\n\t\tversion: '6.3',\n\t\talternative: 'Use the core entities store instead',\n\t} );\n\treturn { type: 'DO_NOTHING' };\n}\n\n/**\n * Action for trashing the current post in the editor.\n */\nexport const trashPost =\n\t() =>\n\tasync ( { select, dispatch, registry } ) => {\n\t\tconst postTypeSlug = select.getCurrentPostType();\n\t\tconst postType = await registry\n\t\t\t.resolveSelect( coreStore )\n\t\t\t.getPostType( postTypeSlug );\n\t\tregistry.dispatch( noticesStore ).removeNotice( TRASH_POST_NOTICE_ID );\n\t\tconst { rest_base: restBase, rest_namespace: restNamespace = 'wp/v2' } =\n\t\t\tpostType;\n\t\tdispatch( { type: 'REQUEST_POST_DELETE_START' } );\n\t\ttry {\n\t\t\tconst post = select.getCurrentPost();\n\t\t\tawait apiFetch( {\n\t\t\t\tpath: `/${ restNamespace }/${ restBase }/${ post.id }`,\n\t\t\t\tmethod: 'DELETE',\n\t\t\t} );\n\n\t\t\tawait dispatch.savePost();\n\t\t} catch ( error ) {\n\t\t\tregistry\n\t\t\t\t.dispatch( noticesStore )\n\t\t\t\t.createErrorNotice(\n\t\t\t\t\t...getNotificationArgumentsForTrashFail( { error } )\n\t\t\t\t);\n\t\t}\n\t\tdispatch( { type: 'REQUEST_POST_DELETE_FINISH' } );\n\t};\n\n/**\n * Action that autosaves the current post.  This\n * includes server-side autosaving (default) and client-side (a.k.a. local)\n * autosaving (e.g. on the Web, the post might be committed to Session\n * Storage).\n *\n * @param {Object?} options Extra flags to identify the autosave.\n */\nexport const autosave =\n\t( { local = false, ...options } = {} ) =>\n\tasync ( { select, dispatch } ) => {\n\t\tconst post = select.getCurrentPost();\n\n\t\t// Currently template autosaving is not supported.\n\t\tif ( post.type === 'wp_template' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( local ) {\n\t\t\tconst isPostNew = select.isEditedPostNew();\n\t\t\tconst title = select.getEditedPostAttribute( 'title' );\n\t\t\tconst content = select.getEditedPostAttribute( 'content' );\n\t\t\tconst excerpt = select.getEditedPostAttribute( 'excerpt' );\n\t\t\tlocalAutosaveSet( post.id, isPostNew, title, content, excerpt );\n\t\t} else {\n\t\t\tawait dispatch.savePost( { isAutosave: true, ...options } );\n\t\t}\n\t};\n\nexport const __unstableSaveForPreview =\n\t( { forceIsAutosaveable } = {} ) =>\n\tasync ( { select, dispatch } ) => {\n\t\tif (\n\t\t\t( forceIsAutosaveable || select.isEditedPostAutosaveable() ) &&\n\t\t\t! select.isPostLocked()\n\t\t) {\n\t\t\tconst isDraft = [ 'draft', 'auto-draft' ].includes(\n\t\t\t\tselect.getEditedPostAttribute( 'status' )\n\t\t\t);\n\t\t\tif ( isDraft ) {\n\t\t\t\tawait dispatch.savePost( { isPreview: true } );\n\t\t\t} else {\n\t\t\t\tawait dispatch.autosave( { isPreview: true } );\n\t\t\t}\n\t\t}\n\n\t\treturn select.getEditedPostPreviewLink();\n\t};\n\n/**\n * Action that restores last popped state in undo history.\n */\nexport const redo =\n\t() =>\n\t( { registry } ) => {\n\t\tregistry.dispatch( coreStore ).redo();\n\t};\n\n/**\n * Action that pops a record from undo history and undoes the edit.\n */\nexport const undo =\n\t() =>\n\t( { registry } ) => {\n\t\tregistry.dispatch( coreStore ).undo();\n\t};\n\n/**\n * Action that creates an undo history record.\n *\n * @deprecated Since WordPress 6.0\n */\nexport function createUndoLevel() {\n\tdeprecated( \"wp.data.dispatch( 'core/editor' ).createUndoLevel\", {\n\t\tsince: '6.0',\n\t\tversion: '6.3',\n\t\talternative: 'Use the core entities store instead',\n\t} );\n\treturn { type: 'DO_NOTHING' };\n}\n\n/**\n * Action that locks the editor.\n *\n * @param {Object} lock Details about the post lock status, user, and nonce.\n * @return {Object} Action object.\n */\nexport function updatePostLock( lock ) {\n\treturn {\n\t\ttype: 'UPDATE_POST_LOCK',\n\t\tlock,\n\t};\n}\n\n/**\n * Enable the publish sidebar.\n */\nexport const enablePublishSidebar =\n\t() =>\n\t( { registry } ) => {\n\t\tregistry\n\t\t\t.dispatch( preferencesStore )\n\t\t\t.set( 'core', 'isPublishSidebarEnabled', true );\n\t};\n\n/**\n * Disables the publish sidebar.\n */\nexport const disablePublishSidebar =\n\t() =>\n\t( { registry } ) => {\n\t\tregistry\n\t\t\t.dispatch( preferencesStore )\n\t\t\t.set( 'core', 'isPublishSidebarEnabled', false );\n\t};\n\n/**\n * Action that locks post saving.\n *\n * @param {string} lockName The lock name.\n *\n * @example\n * ```\n * const { subscribe } = wp.data;\n *\n * const initialPostStatus = wp.data.select( 'core/editor' ).getEditedPostAttribute( 'status' );\n *\n * // Only allow publishing posts that are set to a future date.\n * if ( 'publish' !== initialPostStatus ) {\n *\n * \t// Track locking.\n * \tlet locked = false;\n *\n * \t// Watch for the publish event.\n * \tlet unssubscribe = subscribe( () => {\n * \t\tconst currentPostStatus = wp.data.select( 'core/editor' ).getEditedPostAttribute( 'status' );\n * \t\tif ( 'publish' !== currentPostStatus ) {\n *\n * \t\t\t// Compare the post date to the current date, lock the post if the date isn't in the future.\n * \t\t\tconst postDate = new Date( wp.data.select( 'core/editor' ).getEditedPostAttribute( 'date' ) );\n * \t\t\tconst currentDate = new Date();\n * \t\t\tif ( postDate.getTime() <= currentDate.getTime() ) {\n * \t\t\t\tif ( ! locked ) {\n * \t\t\t\t\tlocked = true;\n * \t\t\t\t\twp.data.dispatch( 'core/editor' ).lockPostSaving( 'futurelock' );\n * \t\t\t\t}\n * \t\t\t} else {\n * \t\t\t\tif ( locked ) {\n * \t\t\t\t\tlocked = false;\n * \t\t\t\t\twp.data.dispatch( 'core/editor' ).unlockPostSaving( 'futurelock' );\n * \t\t\t\t}\n * \t\t\t}\n * \t\t}\n * \t} );\n * }\n * ```\n *\n * @return {Object} Action object\n */\nexport function lockPostSaving( lockName ) {\n\treturn {\n\t\ttype: 'LOCK_POST_SAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Action that unlocks post saving.\n *\n * @param {string} lockName The lock name.\n *\n * @example\n * ```\n * // Unlock post saving with the lock key `mylock`:\n * wp.data.dispatch( 'core/editor' ).unlockPostSaving( 'mylock' );\n * ```\n *\n * @return {Object} Action object\n */\nexport function unlockPostSaving( lockName ) {\n\treturn {\n\t\ttype: 'UNLOCK_POST_SAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Action that locks post autosaving.\n *\n * @param {string} lockName The lock name.\n *\n * @example\n * ```\n * // Lock post autosaving with the lock key `mylock`:\n * wp.data.dispatch( 'core/editor' ).lockPostAutosaving( 'mylock' );\n * ```\n *\n * @return {Object} Action object\n */\nexport function lockPostAutosaving( lockName ) {\n\treturn {\n\t\ttype: 'LOCK_POST_AUTOSAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Action that unlocks post autosaving.\n *\n * @param {string} lockName The lock name.\n *\n * @example\n * ```\n * // Unlock post saving with the lock key `mylock`:\n * wp.data.dispatch( 'core/editor' ).unlockPostAutosaving( 'mylock' );\n * ```\n *\n * @return {Object} Action object\n */\nexport function unlockPostAutosaving( lockName ) {\n\treturn {\n\t\ttype: 'UNLOCK_POST_AUTOSAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Returns an action object used to signal that the blocks have been updated.\n *\n * @param {Array}   blocks  Block Array.\n * @param {?Object} options Optional options.\n */\nexport const resetEditorBlocks =\n\t( blocks, options = {} ) =>\n\t( { select, dispatch, registry } ) => {\n\t\tconst { __unstableShouldCreateUndoLevel, selection } = options;\n\t\tconst edits = { blocks, selection };\n\n\t\tif ( __unstableShouldCreateUndoLevel !== false ) {\n\t\t\tconst { id, type } = select.getCurrentPost();\n\t\t\tconst noChange =\n\t\t\t\tregistry\n\t\t\t\t\t.select( coreStore )\n\t\t\t\t\t.getEditedEntityRecord( 'postType', type, id ).blocks ===\n\t\t\t\tedits.blocks;\n\t\t\tif ( noChange ) {\n\t\t\t\tregistry\n\t\t\t\t\t.dispatch( coreStore )\n\t\t\t\t\t.__unstableCreateUndoLevel( 'postType', type, id );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// We create a new function here on every persistent edit\n\t\t\t// to make sure the edit makes the post dirty and creates\n\t\t\t// a new undo level.\n\t\t\tedits.content = ( { blocks: blocksForSerialization = [] } ) =>\n\t\t\t\t__unstableSerializeAndClean( blocksForSerialization );\n\t\t}\n\n\t\tdispatch.editPost( edits );\n\t};\n\n/*\n * Returns an action object used in signalling that the post editor settings have been updated.\n *\n * @param {Object} settings Updated settings\n *\n * @return {Object} Action object\n */\nexport function updateEditorSettings( settings ) {\n\treturn {\n\t\ttype: 'UPDATE_EDITOR_SETTINGS',\n\t\tsettings,\n\t};\n}\n\n/**\n * Returns an action used to set the rendering mode of the post editor. We support multiple rendering modes:\n *\n * -   `post-only`: This mode extracts the post blocks from the template and renders only those. The idea is to allow the user to edit the post/page in isolation without the wrapping template.\n * -   `template-locked`: This mode renders both the template and the post blocks but the template blocks are locked and can't be edited. The post blocks are editable.\n *\n * @param {string} mode Mode (one of 'post-only' or 'template-locked').\n */\nexport const setRenderingMode =\n\t( mode ) =>\n\t( { dispatch, registry, select } ) => {\n\t\tif ( select.__unstableIsEditorReady() ) {\n\t\t\t// We clear the block selection but we also need to clear the selection from the core store.\n\t\t\tregistry.dispatch( blockEditorStore ).clearSelectedBlock();\n\t\t\tdispatch.editPost( { selection: undefined }, { undoIgnore: true } );\n\t\t}\n\n\t\tdispatch( {\n\t\t\ttype: 'SET_RENDERING_MODE',\n\t\t\tmode,\n\t\t} );\n\t};\n\n/**\n * Action that changes the width of the editing canvas.\n *\n * @param {string} deviceType\n *\n * @return {Object} Action object.\n */\nexport function setDeviceType( deviceType ) {\n\treturn {\n\t\ttype: 'SET_DEVICE_TYPE',\n\t\tdeviceType,\n\t};\n}\n\n/**\n * Returns an action object used to enable or disable a panel in the editor.\n *\n * @param {string} panelName A string that identifies the panel to enable or disable.\n *\n * @return {Object} Action object.\n */\nexport const toggleEditorPanelEnabled =\n\t( panelName ) =>\n\t( { registry } ) => {\n\t\tconst inactivePanels =\n\t\t\tregistry\n\t\t\t\t.select( preferencesStore )\n\t\t\t\t.get( 'core', 'inactivePanels' ) ?? [];\n\n\t\tconst isPanelInactive = !! inactivePanels?.includes( panelName );\n\n\t\t// If the panel is inactive, remove it to enable it, else add it to\n\t\t// make it inactive.\n\t\tlet updatedInactivePanels;\n\t\tif ( isPanelInactive ) {\n\t\t\tupdatedInactivePanels = inactivePanels.filter(\n\t\t\t\t( invactivePanelName ) => invactivePanelName !== panelName\n\t\t\t);\n\t\t} else {\n\t\t\tupdatedInactivePanels = [ ...inactivePanels, panelName ];\n\t\t}\n\n\t\tregistry\n\t\t\t.dispatch( preferencesStore )\n\t\t\t.set( 'core', 'inactivePanels', updatedInactivePanels );\n\t};\n\n/**\n * Opens a closed panel and closes an open panel.\n *\n * @param {string} panelName A string that identifies the panel to open or close.\n */\nexport const toggleEditorPanelOpened =\n\t( panelName ) =>\n\t( { registry } ) => {\n\t\tconst openPanels =\n\t\t\tregistry.select( preferencesStore ).get( 'core', 'openPanels' ) ??\n\t\t\t[];\n\n\t\tconst isPanelOpen = !! openPanels?.includes( panelName );\n\n\t\t// If the panel is open, remove it to close it, else add it to\n\t\t// make it open.\n\t\tlet updatedOpenPanels;\n\t\tif ( isPanelOpen ) {\n\t\t\tupdatedOpenPanels = openPanels.filter(\n\t\t\t\t( openPanelName ) => openPanelName !== panelName\n\t\t\t);\n\t\t} else {\n\t\t\tupdatedOpenPanels = [ ...openPanels, panelName ];\n\t\t}\n\n\t\tregistry\n\t\t\t.dispatch( preferencesStore )\n\t\t\t.set( 'core', 'openPanels', updatedOpenPanels );\n\t};\n\n/**\n * Returns an action object used to remove a panel from the editor.\n *\n * @param {string} panelName A string that identifies the panel to remove.\n *\n * @return {Object} Action object.\n */\nexport function removeEditorPanel( panelName ) {\n\treturn {\n\t\ttype: 'REMOVE_PANEL',\n\t\tpanelName,\n\t};\n}\n\n/**\n * Returns an action object used to open/close the inserter.\n *\n * @param {boolean|Object} value                Whether the inserter should be\n *                                              opened (true) or closed (false).\n *                                              To specify an insertion point,\n *                                              use an object.\n * @param {string}         value.rootClientId   The root client ID to insert at.\n * @param {number}         value.insertionIndex The index to insert at.\n *\n * @return {Object} Action object.\n */\nexport function setIsInserterOpened( value ) {\n\treturn {\n\t\ttype: 'SET_IS_INSERTER_OPENED',\n\t\tvalue,\n\t};\n}\n\n/**\n * Returns an action object used to open/close the list view.\n *\n * @param {boolean} isOpen A boolean representing whether the list view should be opened or closed.\n * @return {Object} Action object.\n */\nexport function setIsListViewOpened( isOpen ) {\n\treturn {\n\t\ttype: 'SET_IS_LIST_VIEW_OPENED',\n\t\tisOpen,\n\t};\n}\n\n/**\n * Action that toggles Distraction free mode.\n * Distraction free mode expects there are no sidebars, as due to the\n * z-index values set, you can't close sidebars.\n */\nexport const toggleDistractionFree =\n\t() =>\n\t( { dispatch, registry } ) => {\n\t\tconst isDistractionFree = registry\n\t\t\t.select( preferencesStore )\n\t\t\t.get( 'core', 'distractionFree' );\n\t\tif ( isDistractionFree ) {\n\t\t\tregistry\n\t\t\t\t.dispatch( preferencesStore )\n\t\t\t\t.set( 'core', 'fixedToolbar', false );\n\t\t}\n\t\tif ( ! isDistractionFree ) {\n\t\t\tregistry.batch( () => {\n\t\t\t\tregistry\n\t\t\t\t\t.dispatch( preferencesStore )\n\t\t\t\t\t.set( 'core', 'fixedToolbar', true );\n\t\t\t\tdispatch.setIsInserterOpened( false );\n\t\t\t\tdispatch.setIsListViewOpened( false );\n\t\t\t} );\n\t\t}\n\t\tregistry.batch( () => {\n\t\t\tregistry\n\t\t\t\t.dispatch( preferencesStore )\n\t\t\t\t.set( 'core', 'distractionFree', ! isDistractionFree );\n\t\t\tregistry\n\t\t\t\t.dispatch( noticesStore )\n\t\t\t\t.createInfoNotice(\n\t\t\t\t\tisDistractionFree\n\t\t\t\t\t\t? __( 'Distraction free off.' )\n\t\t\t\t\t\t: __( 'Distraction free on.' ),\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 'core/editor/distraction-free-mode/notice',\n\t\t\t\t\t\ttype: 'snackbar',\n\t\t\t\t\t\tactions: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: __( 'Undo' ),\n\t\t\t\t\t\t\t\tonClick: () => {\n\t\t\t\t\t\t\t\t\tregistry.batch( () => {\n\t\t\t\t\t\t\t\t\t\tregistry\n\t\t\t\t\t\t\t\t\t\t\t.dispatch( preferencesStore )\n\t\t\t\t\t\t\t\t\t\t\t.set(\n\t\t\t\t\t\t\t\t\t\t\t\t'core',\n\t\t\t\t\t\t\t\t\t\t\t\t'fixedToolbar',\n\t\t\t\t\t\t\t\t\t\t\t\tisDistractionFree ? true : false\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tregistry\n\t\t\t\t\t\t\t\t\t\t\t.dispatch( preferencesStore )\n\t\t\t\t\t\t\t\t\t\t\t.toggle(\n\t\t\t\t\t\t\t\t\t\t\t\t'core',\n\t\t\t\t\t\t\t\t\t\t\t\t'distractionFree'\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t} );\n\t};\n\n/**\n * Triggers an action used to switch editor mode.\n *\n * @param {string} mode The editor mode.\n */\nexport const switchEditorMode =\n\t( mode ) =>\n\t( { dispatch, registry } ) => {\n\t\tregistry.dispatch( preferencesStore ).set( 'core', 'editorMode', mode );\n\n\t\t// Unselect blocks when we switch to a non visual mode.\n\t\tif ( mode !== 'visual' ) {\n\t\t\tregistry.dispatch( blockEditorStore ).clearSelectedBlock();\n\t\t}\n\n\t\tif ( mode === 'visual' ) {\n\t\t\tspeak( __( 'Visual editor selected' ), 'assertive' );\n\t\t} else if ( mode === 'text' ) {\n\t\t\tconst isDistractionFree = registry\n\t\t\t\t.select( preferencesStore )\n\t\t\t\t.get( 'core', 'distractionFree' );\n\t\t\tif ( isDistractionFree ) {\n\t\t\t\tdispatch.toggleDistractionFree();\n\t\t\t}\n\t\t\tspeak( __( 'Code editor selected' ), 'assertive' );\n\t\t}\n\t};\n\n/**\n * Returns an action object used in signalling that the user opened the publish\n * sidebar.\n *\n * @return {Object} Action object\n */\nexport function openPublishSidebar() {\n\treturn {\n\t\ttype: 'OPEN_PUBLISH_SIDEBAR',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user closed the\n * publish sidebar.\n *\n * @return {Object} Action object.\n */\nexport function closePublishSidebar() {\n\treturn {\n\t\ttype: 'CLOSE_PUBLISH_SIDEBAR',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user toggles the publish sidebar.\n *\n * @return {Object} Action object\n */\nexport function togglePublishSidebar() {\n\treturn {\n\t\ttype: 'TOGGLE_PUBLISH_SIDEBAR',\n\t};\n}\n\n/**\n * Backward compatibility\n */\n\nconst getBlockEditorAction =\n\t( name ) =>\n\t( ...args ) =>\n\t( { registry } ) => {\n\t\tdeprecated( \"`wp.data.dispatch( 'core/editor' ).\" + name + '`', {\n\t\t\tsince: '5.3',\n\t\t\talternative:\n\t\t\t\t\"`wp.data.dispatch( 'core/block-editor' ).\" + name + '`',\n\t\t\tversion: '6.2',\n\t\t} );\n\t\tregistry.dispatch( blockEditorStore )[ name ]( ...args );\n\t};\n\n/**\n * @see resetBlocks in core/block-editor store.\n */\nexport const resetBlocks = getBlockEditorAction( 'resetBlocks' );\n\n/**\n * @see receiveBlocks in core/block-editor store.\n */\nexport const receiveBlocks = getBlockEditorAction( 'receiveBlocks' );\n\n/**\n * @see updateBlock in core/block-editor store.\n */\nexport const updateBlock = getBlockEditorAction( 'updateBlock' );\n\n/**\n * @see updateBlockAttributes in core/block-editor store.\n */\nexport const updateBlockAttributes = getBlockEditorAction(\n\t'updateBlockAttributes'\n);\n\n/**\n * @see selectBlock in core/block-editor store.\n */\nexport const selectBlock = getBlockEditorAction( 'selectBlock' );\n\n/**\n * @see startMultiSelect in core/block-editor store.\n */\nexport const startMultiSelect = getBlockEditorAction( 'startMultiSelect' );\n\n/**\n * @see stopMultiSelect in core/block-editor store.\n */\nexport const stopMultiSelect = getBlockEditorAction( 'stopMultiSelect' );\n\n/**\n * @see multiSelect in core/block-editor store.\n */\nexport const multiSelect = getBlockEditorAction( 'multiSelect' );\n\n/**\n * @see clearSelectedBlock in core/block-editor store.\n */\nexport const clearSelectedBlock = getBlockEditorAction( 'clearSelectedBlock' );\n\n/**\n * @see toggleSelection in core/block-editor store.\n */\nexport const toggleSelection = getBlockEditorAction( 'toggleSelection' );\n\n/**\n * @see replaceBlocks in core/block-editor store.\n */\nexport const replaceBlocks = getBlockEditorAction( 'replaceBlocks' );\n\n/**\n * @see replaceBlock in core/block-editor store.\n */\nexport const replaceBlock = getBlockEditorAction( 'replaceBlock' );\n\n/**\n * @see moveBlocksDown in core/block-editor store.\n */\nexport const moveBlocksDown = getBlockEditorAction( 'moveBlocksDown' );\n\n/**\n * @see moveBlocksUp in core/block-editor store.\n */\nexport const moveBlocksUp = getBlockEditorAction( 'moveBlocksUp' );\n\n/**\n * @see moveBlockToPosition in core/block-editor store.\n */\nexport const moveBlockToPosition = getBlockEditorAction(\n\t'moveBlockToPosition'\n);\n\n/**\n * @see insertBlock in core/block-editor store.\n */\nexport const insertBlock = getBlockEditorAction( 'insertBlock' );\n\n/**\n * @see insertBlocks in core/block-editor store.\n */\nexport const insertBlocks = getBlockEditorAction( 'insertBlocks' );\n\n/**\n * @see showInsertionPoint in core/block-editor store.\n */\nexport const showInsertionPoint = getBlockEditorAction( 'showInsertionPoint' );\n\n/**\n * @see hideInsertionPoint in core/block-editor store.\n */\nexport const hideInsertionPoint = getBlockEditorAction( 'hideInsertionPoint' );\n\n/**\n * @see setTemplateValidity in core/block-editor store.\n */\nexport const setTemplateValidity = getBlockEditorAction(\n\t'setTemplateValidity'\n);\n\n/**\n * @see synchronizeTemplate in core/block-editor store.\n */\nexport const synchronizeTemplate = getBlockEditorAction(\n\t'synchronizeTemplate'\n);\n\n/**\n * @see mergeBlocks in core/block-editor store.\n */\nexport const mergeBlocks = getBlockEditorAction( 'mergeBlocks' );\n\n/**\n * @see removeBlocks in core/block-editor store.\n */\nexport const removeBlocks = getBlockEditorAction( 'removeBlocks' );\n\n/**\n * @see removeBlock in core/block-editor store.\n */\nexport const removeBlock = getBlockEditorAction( 'removeBlock' );\n\n/**\n * @see toggleBlockMode in core/block-editor store.\n */\nexport const toggleBlockMode = getBlockEditorAction( 'toggleBlockMode' );\n\n/**\n * @see startTyping in core/block-editor store.\n */\nexport const startTyping = getBlockEditorAction( 'startTyping' );\n\n/**\n * @see stopTyping in core/block-editor store.\n */\nexport const stopTyping = getBlockEditorAction( 'stopTyping' );\n\n/**\n * @see enterFormattedText in core/block-editor store.\n */\nexport const enterFormattedText = getBlockEditorAction( 'enterFormattedText' );\n\n/**\n * @see exitFormattedText in core/block-editor store.\n */\nexport const exitFormattedText = getBlockEditorAction( 'exitFormattedText' );\n\n/**\n * @see insertDefaultBlock in core/block-editor store.\n */\nexport const insertDefaultBlock = getBlockEditorAction( 'insertDefaultBlock' );\n\n/**\n * @see updateBlockListSettings in core/block-editor store.\n */\nexport const updateBlockListSettings = getBlockEditorAction(\n\t'updateBlockListSettings'\n);\n"],"mappings":"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","ignoreList":[]}