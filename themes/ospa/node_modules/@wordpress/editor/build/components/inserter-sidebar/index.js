"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = InserterSidebar;
var _react = require("react");
var _data = require("@wordpress/data");
var _blockEditor = require("@wordpress/block-editor");
var _compose = require("@wordpress/compose");
var _element = require("@wordpress/element");
var _preferences = require("@wordpress/preferences");
var _keycodes = require("@wordpress/keycodes");
var _lockUnlock = require("../../lock-unlock");
var _store = require("../../store");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function InserterSidebar({
  closeGeneralSidebar,
  isRightSidebarOpen
}) {
  const {
    blockSectionRootClientId,
    inserterSidebarToggleRef,
    insertionPoint,
    showMostUsedBlocks
  } = (0, _data.useSelect)(select => {
    const {
      getInserterSidebarToggleRef,
      getInsertionPoint
    } = (0, _lockUnlock.unlock)(select(_store.store));
    const {
      getBlockRootClientId,
      __unstableGetEditorMode,
      getSettings
    } = select(_blockEditor.store);
    const {
      get
    } = select(_preferences.store);
    const getBlockSectionRootClientId = () => {
      if (__unstableGetEditorMode() === 'zoom-out') {
        const {
          sectionRootClientId
        } = (0, _lockUnlock.unlock)(getSettings());
        if (sectionRootClientId) {
          return sectionRootClientId;
        }
      }
      return getBlockRootClientId();
    };
    return {
      inserterSidebarToggleRef: getInserterSidebarToggleRef(),
      insertionPoint: getInsertionPoint(),
      showMostUsedBlocks: get('core', 'mostUsedBlocks'),
      blockSectionRootClientId: getBlockSectionRootClientId()
    };
  }, []);
  const {
    setIsInserterOpened
  } = (0, _data.useDispatch)(_store.store);
  const isMobileViewport = (0, _compose.useViewportMatch)('medium', '<');
  const libraryRef = (0, _element.useRef)();

  // When closing the inserter, focus should return to the toggle button.
  const closeInserterSidebar = (0, _element.useCallback)(() => {
    setIsInserterOpened(false);
    inserterSidebarToggleRef.current?.focus();
  }, [inserterSidebarToggleRef, setIsInserterOpened]);
  const closeOnEscape = (0, _element.useCallback)(event => {
    if (event.keyCode === _keycodes.ESCAPE && !event.defaultPrevented) {
      event.preventDefault();
      closeInserterSidebar();
    }
  }, [closeInserterSidebar]);
  return (
    // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    (0, _react.createElement)("div", {
      onKeyDown: closeOnEscape,
      className: "editor-inserter-sidebar"
    }, (0, _react.createElement)("div", {
      className: "editor-inserter-sidebar__content"
    }, (0, _react.createElement)(_blockEditor.__experimentalLibrary, {
      showMostUsedBlocks: showMostUsedBlocks,
      showInserterHelpPanel: true,
      shouldFocusBlock: isMobileViewport,
      rootClientId: blockSectionRootClientId !== null && blockSectionRootClientId !== void 0 ? blockSectionRootClientId : insertionPoint.rootClientId,
      __experimentalInsertionIndex: insertionPoint.insertionIndex,
      __experimentalInitialTab: insertionPoint.tab,
      __experimentalInitialCategory: insertionPoint.category,
      __experimentalFilterValue: insertionPoint.filterValue,
      __experimentalOnPatternCategorySelection: isRightSidebarOpen ? closeGeneralSidebar : undefined,
      ref: libraryRef,
      onClose: closeInserterSidebar
    })))
  );
}
//# sourceMappingURL=index.js.map