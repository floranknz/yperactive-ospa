"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PostURL;
var _react = require("react");
var _data = require("@wordpress/data");
var _url = require("@wordpress/url");
var _element = require("@wordpress/element");
var _blockEditor = require("@wordpress/block-editor");
var _i18n = require("@wordpress/i18n");
var _components = require("@wordpress/components");
var _notices = require("@wordpress/notices");
var _icons = require("@wordpress/icons");
var _coreData = require("@wordpress/core-data");
var _compose = require("@wordpress/compose");
var _label = require("./label");
var _store = require("../../store");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function PostURL({
  onClose
}) {
  const {
    isEditable,
    postSlug,
    postLink,
    permalinkPrefix,
    permalinkSuffix
  } = (0, _data.useSelect)(select => {
    var _post$_links$wpActio;
    const post = select(_store.store).getCurrentPost();
    const postTypeSlug = select(_store.store).getCurrentPostType();
    const postType = select(_coreData.store).getPostType(postTypeSlug);
    const permalinkParts = select(_store.store).getPermalinkParts();
    const hasPublishAction = (_post$_links$wpActio = post?._links?.['wp:action-publish']) !== null && _post$_links$wpActio !== void 0 ? _post$_links$wpActio : false;
    return {
      isEditable: select(_store.store).isPermalinkEditable() && hasPublishAction,
      postSlug: (0, _url.safeDecodeURIComponent)(select(_store.store).getEditedPostSlug()),
      viewPostLabel: postType?.labels.view_item,
      postLink: post.link,
      permalinkPrefix: permalinkParts?.prefix,
      permalinkSuffix: permalinkParts?.suffix
    };
  }, []);
  const {
    editPost
  } = (0, _data.useDispatch)(_store.store);
  const {
    createNotice
  } = (0, _data.useDispatch)(_notices.store);
  const [forceEmptyField, setForceEmptyField] = (0, _element.useState)(false);
  const postUrlLabel = (0, _label.usePostURLLabel)();
  const copyButtonRef = (0, _compose.useCopyToClipboard)(postUrlLabel, () => {
    createNotice('info', (0, _i18n.__)('Copied URL to clipboard.'), {
      isDismissible: true,
      type: 'snackbar'
    });
  });
  return (0, _react.createElement)("div", {
    className: "editor-post-url"
  }, (0, _react.createElement)(_blockEditor.__experimentalInspectorPopoverHeader, {
    title: (0, _i18n.__)('Link'),
    onClose: onClose
  }), (0, _react.createElement)(_components.__experimentalVStack, {
    spacing: 3
  }, isEditable && (0, _react.createElement)("div", null, (0, _i18n.__)('Customize the last part of the URL. '), (0, _react.createElement)(_components.ExternalLink, {
    href: (0, _i18n.__)('https://wordpress.org/documentation/article/page-post-settings-sidebar/#permalink')
  }, (0, _i18n.__)('Learn more.'))), (0, _react.createElement)("div", null, isEditable && (0, _react.createElement)(_components.__experimentalInputControl, {
    __next40pxDefaultSize: true,
    prefix: (0, _react.createElement)(_components.__experimentalInputControlPrefixWrapper, null, "/"),
    suffix: (0, _react.createElement)(_components.Button, {
      icon: _icons.copySmall,
      ref: copyButtonRef,
      label: (0, _i18n.__)('Copy')
    }),
    label: (0, _i18n.__)('Link'),
    hideLabelFromVision: true,
    value: forceEmptyField ? '' : postSlug,
    autoComplete: "off",
    spellCheck: "false",
    type: "text",
    className: "editor-post-url__input",
    onChange: newValue => {
      editPost({
        slug: newValue
      });
      // When we delete the field the permalink gets
      // reverted to the original value.
      // The forceEmptyField logic allows the user to have
      // the field temporarily empty while typing.
      if (!newValue) {
        if (!forceEmptyField) {
          setForceEmptyField(true);
        }
        return;
      }
      if (forceEmptyField) {
        setForceEmptyField(false);
      }
    },
    onBlur: event => {
      editPost({
        slug: (0, _url.cleanForSlug)(event.target.value)
      });
      if (forceEmptyField) {
        setForceEmptyField(false);
      }
    },
    help: (0, _react.createElement)(_components.ExternalLink, {
      className: "editor-post-url__link",
      href: postLink,
      target: "_blank"
    }, (0, _react.createElement)("span", {
      className: "editor-post-url__link-prefix"
    }, permalinkPrefix), (0, _react.createElement)("span", {
      className: "editor-post-url__link-slug"
    }, postSlug), (0, _react.createElement)("span", {
      className: "editor-post-url__link-suffix"
    }, permalinkSuffix))
  }), !isEditable && (0, _react.createElement)(_components.ExternalLink, {
    className: "editor-post-url__link",
    href: postLink,
    target: "_blank"
  }, postLink))));
}
//# sourceMappingURL=index.js.map