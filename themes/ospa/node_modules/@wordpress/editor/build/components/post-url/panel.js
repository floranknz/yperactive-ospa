"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PostURLPanel;
var _react = require("react");
var _element = require("@wordpress/element");
var _data = require("@wordpress/data");
var _components = require("@wordpress/components");
var _i18n = require("@wordpress/i18n");
var _url = require("@wordpress/url");
var _check = _interopRequireDefault(require("./check"));
var _index = _interopRequireDefault(require("./index"));
var _postPanelRow = _interopRequireDefault(require("../post-panel-row"));
var _store = require("../../store");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function PostURLPanel() {
  // Use internal state instead of a ref to make sure that the component
  // re-renders when the popover's anchor updates.
  const [popoverAnchor, setPopoverAnchor] = (0, _element.useState)(null);
  // Memoize popoverProps to avoid returning a new object every time.
  const popoverProps = (0, _element.useMemo)(() => ({
    // Anchor the popover to the middle of the entire row so that it doesn't
    // move around when the label changes.
    anchor: popoverAnchor,
    placement: 'left-start',
    offset: 36,
    shift: true
  }), [popoverAnchor]);
  return (0, _react.createElement)(_check.default, null, (0, _react.createElement)(_postPanelRow.default, {
    label: (0, _i18n.__)('Link'),
    ref: setPopoverAnchor
  }, (0, _react.createElement)(_components.Dropdown, {
    popoverProps: popoverProps,
    className: "editor-post-url__panel-dropdown",
    contentClassName: "editor-post-url__panel-dialog",
    focusOnMount: true,
    renderToggle: ({
      isOpen,
      onToggle
    }) => (0, _react.createElement)(PostURLToggle, {
      isOpen: isOpen,
      onClick: onToggle
    }),
    renderContent: ({
      onClose
    }) => (0, _react.createElement)(_index.default, {
      onClose: onClose
    })
  })));
}
function PostURLToggle({
  isOpen,
  onClick
}) {
  const slug = (0, _data.useSelect)(select => select(_store.store).getEditedPostSlug(), []);
  const decodedSlug = (0, _url.safeDecodeURIComponent)(slug);
  return (0, _react.createElement)(_components.Button, {
    size: "compact",
    className: "editor-post-url__panel-toggle",
    variant: "tertiary",
    "aria-expanded": isOpen
    // translators: %s: Current post link.
    ,
    "aria-label": (0, _i18n.sprintf)((0, _i18n.__)('Change link: %s'), decodedSlug),
    onClick: onClick
  }, decodedSlug);
}
//# sourceMappingURL=panel.js.map