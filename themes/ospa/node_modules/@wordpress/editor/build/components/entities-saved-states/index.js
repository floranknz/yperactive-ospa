"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EntitiesSavedStatesExtensible = EntitiesSavedStatesExtensible;
exports.default = EntitiesSavedStates;
var _react = require("react");
var _components = require("@wordpress/components");
var _i18n = require("@wordpress/i18n");
var _element = require("@wordpress/element");
var _compose = require("@wordpress/compose");
var _data = require("@wordpress/data");
var _entityTypeList = _interopRequireDefault(require("./entity-type-list"));
var _useIsDirty = require("./hooks/use-is-dirty");
var _store = require("../../store");
var _lockUnlock = require("../../lock-unlock");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function identity(values) {
  return values;
}
function EntitiesSavedStates({
  close,
  renderDialog = undefined
}) {
  const isDirtyProps = (0, _useIsDirty.useIsDirty)();
  return (0, _react.createElement)(EntitiesSavedStatesExtensible, {
    close: close,
    renderDialog: renderDialog,
    ...isDirtyProps
  });
}
function EntitiesSavedStatesExtensible({
  additionalPrompt = undefined,
  close,
  onSave = identity,
  saveEnabled: saveEnabledProp = undefined,
  saveLabel = (0, _i18n.__)('Save'),
  renderDialog = undefined,
  dirtyEntityRecords,
  isDirty,
  setUnselectedEntities,
  unselectedEntities
}) {
  const saveButtonRef = (0, _element.useRef)();
  const {
    saveDirtyEntities
  } = (0, _lockUnlock.unlock)((0, _data.useDispatch)(_store.store));
  // To group entities by type.
  const partitionedSavables = dirtyEntityRecords.reduce((acc, record) => {
    const {
      name
    } = record;
    if (!acc[name]) {
      acc[name] = [];
    }
    acc[name].push(record);
    return acc;
  }, {});

  // Sort entity groups.
  const {
    site: siteSavables,
    wp_template: templateSavables,
    wp_template_part: templatePartSavables,
    ...contentSavables
  } = partitionedSavables;
  const sortedPartitionedSavables = [siteSavables, templateSavables, templatePartSavables, ...Object.values(contentSavables)].filter(Array.isArray);
  const saveEnabled = saveEnabledProp !== null && saveEnabledProp !== void 0 ? saveEnabledProp : isDirty;
  // Explicitly define this with no argument passed.  Using `close` on
  // its own will use the event object in place of the expected saved entities.
  const dismissPanel = (0, _element.useCallback)(() => close(), [close]);
  const [saveDialogRef, saveDialogProps] = (0, _compose.__experimentalUseDialog)({
    onClose: () => dismissPanel()
  });
  const dialogLabel = (0, _compose.useInstanceId)(EntitiesSavedStatesExtensible, 'label');
  const dialogDescription = (0, _compose.useInstanceId)(EntitiesSavedStatesExtensible, 'description');
  return (0, _react.createElement)("div", {
    ref: saveDialogRef,
    ...saveDialogProps,
    className: "entities-saved-states__panel",
    role: renderDialog ? 'dialog' : undefined,
    "aria-labelledby": renderDialog ? dialogLabel : undefined,
    "aria-describedby": renderDialog ? dialogDescription : undefined
  }, (0, _react.createElement)(_components.Flex, {
    className: "entities-saved-states__panel-header",
    gap: 2
  }, (0, _react.createElement)(_components.FlexItem, {
    isBlock: true,
    as: _components.Button,
    ref: saveButtonRef,
    variant: "primary",
    disabled: !saveEnabled,
    __experimentalIsFocusable: true,
    onClick: () => saveDirtyEntities({
      onSave,
      dirtyEntityRecords,
      entitiesToSkip: unselectedEntities,
      close
    }),
    className: "editor-entities-saved-states__save-button"
  }, saveLabel), (0, _react.createElement)(_components.FlexItem, {
    isBlock: true,
    as: _components.Button,
    variant: "secondary",
    onClick: dismissPanel
  }, (0, _i18n.__)('Cancel'))), (0, _react.createElement)("div", {
    className: "entities-saved-states__text-prompt"
  }, (0, _react.createElement)("div", {
    className: "entities-saved-states__text-prompt--header-wrapper",
    id: renderDialog ? dialogLabel : undefined
  }, (0, _react.createElement)("strong", {
    className: "entities-saved-states__text-prompt--header"
  }, (0, _i18n.__)('Are you ready to save?')), additionalPrompt), (0, _react.createElement)("p", {
    id: renderDialog ? dialogDescription : undefined
  }, isDirty ? (0, _element.createInterpolateElement)((0, _i18n.sprintf)( /* translators: %d: number of site changes waiting to be saved. */
  (0, _i18n._n)('There is <strong>%d site change</strong> waiting to be saved.', 'There are <strong>%d site changes</strong> waiting to be saved.', sortedPartitionedSavables.length), sortedPartitionedSavables.length), {
    strong: (0, _react.createElement)("strong", null)
  }) : (0, _i18n.__)('Select the items you want to save.'))), sortedPartitionedSavables.map(list => {
    return (0, _react.createElement)(_entityTypeList.default, {
      key: list[0].name,
      list: list,
      unselectedEntities: unselectedEntities,
      setUnselectedEntities: setUnselectedEntities
    });
  }));
}
//# sourceMappingURL=index.js.map