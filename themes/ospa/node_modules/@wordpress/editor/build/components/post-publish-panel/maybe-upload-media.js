"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PostFormatPanel;
var _react = require("react");
var _components = require("@wordpress/components");
var _data = require("@wordpress/data");
var _i18n = require("@wordpress/i18n");
var _blockEditor = require("@wordpress/block-editor");
var _element = require("@wordpress/element");
var _blob = require("@wordpress/blob");
var _store = require("../../store");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function flattenBlocks(blocks) {
  const result = [];
  blocks.forEach(block => {
    result.push(block);
    result.push(...flattenBlocks(block.innerBlocks));
  });
  return result;
}
function Image(block) {
  const {
    selectBlock
  } = (0, _data.useDispatch)(_blockEditor.store);
  return (0, _react.createElement)(_components.__unstableMotion.img, {
    tabIndex: 0,
    role: "button",
    "aria-label": (0, _i18n.__)('Select image block.'),
    onClick: () => {
      selectBlock(block.clientId);
    },
    onKeyDown: event => {
      if (event.key === 'Enter' || event.key === ' ') {
        selectBlock(block.clientId);
        event.preventDefault();
      }
    },
    key: block.clientId,
    alt: block.attributes.alt,
    src: block.attributes.url,
    animate: {
      opacity: 1
    },
    exit: {
      opacity: 0,
      scale: 0
    },
    style: {
      width: '36px',
      height: '36px',
      objectFit: 'cover',
      borderRadius: '2px',
      cursor: 'pointer'
    },
    whileHover: {
      scale: 1.08
    }
  });
}
function PostFormatPanel() {
  const [isUploading, setIsUploading] = (0, _element.useState)(false);
  const {
    editorBlocks,
    mediaUpload
  } = (0, _data.useSelect)(select => ({
    editorBlocks: select(_store.store).getEditorBlocks(),
    mediaUpload: select(_blockEditor.store).getSettings().mediaUpload
  }), []);
  const externalImages = flattenBlocks(editorBlocks).filter(block => block.name === 'core/image' && block.attributes.url && !block.attributes.id);
  const {
    updateBlockAttributes
  } = (0, _data.useDispatch)(_blockEditor.store);
  if (!mediaUpload || !externalImages.length) {
    return null;
  }
  const panelBodyTitle = [(0, _i18n.__)('Suggestion:'), (0, _react.createElement)("span", {
    className: "editor-post-publish-panel__link",
    key: "label"
  }, (0, _i18n.__)('External media'))];
  function uploadImages() {
    setIsUploading(true);
    Promise.all(externalImages.map(image => window.fetch(image.attributes.url.includes('?') ? image.attributes.url : image.attributes.url + '?').then(response => response.blob()).then(blob => new Promise((resolve, reject) => {
      mediaUpload({
        filesList: [blob],
        onFileChange: ([media]) => {
          if ((0, _blob.isBlobURL)(media.url)) {
            return;
          }
          updateBlockAttributes(image.clientId, {
            id: media.id,
            url: media.url
          });
          resolve();
        },
        onError() {
          reject();
        }
      });
    })))).finally(() => {
      setIsUploading(false);
    });
  }
  return (0, _react.createElement)(_components.PanelBody, {
    initialOpen: true,
    title: panelBodyTitle
  }, (0, _react.createElement)("p", null, (0, _i18n.__)('Upload external images to the Media Library. Images from different domains may load slowly, display incorrectly, or be removed unexpectedly.')), (0, _react.createElement)("div", {
    style: {
      display: 'inline-flex',
      flexWrap: 'wrap',
      gap: '8px'
    }
  }, (0, _react.createElement)(_components.__unstableAnimatePresence, null, externalImages.map(image => {
    return (0, _react.createElement)(Image, {
      key: image.clientId,
      ...image
    });
  })), isUploading ? (0, _react.createElement)(_components.Spinner, null) : (0, _react.createElement)(_components.Button, {
    variant: "primary",
    onClick: uploadImages
  }, (0, _i18n.__)('Upload'))));
}
//# sourceMappingURL=maybe-upload-media.js.map