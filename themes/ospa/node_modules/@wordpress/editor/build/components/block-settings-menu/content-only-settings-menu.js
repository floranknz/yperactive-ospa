"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ContentOnlySettingsMenu;
var _react = require("react");
var _blockEditor = require("@wordpress/block-editor");
var _coreData = require("@wordpress/core-data");
var _components = require("@wordpress/components");
var _data = require("@wordpress/data");
var _i18n = require("@wordpress/i18n");
var _store = require("../../store");
var _lockUnlock = require("../../lock-unlock");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function ContentOnlySettingsMenuItems({
  clientId,
  onClose
}) {
  const {
    entity,
    onNavigateToEntityRecord
  } = (0, _data.useSelect)(select => {
    const {
      getBlockEditingMode,
      getBlockParentsByBlockName,
      getSettings,
      getBlockAttributes
    } = select(_blockEditor.store);
    const contentOnly = getBlockEditingMode(clientId) === 'contentOnly';
    if (!contentOnly) {
      return {};
    }
    const patternParent = getBlockParentsByBlockName(clientId, 'core/block', true)[0];
    let record;
    if (patternParent) {
      record = select(_coreData.store).getEntityRecord('postType', 'wp_block', getBlockAttributes(patternParent).ref);
    } else {
      const {
        getCurrentPostType,
        getCurrentTemplateId
      } = select(_store.store);
      const currentPostType = getCurrentPostType();
      const templateId = getCurrentTemplateId();
      if (currentPostType === 'page' && templateId) {
        record = select(_coreData.store).getEntityRecord('postType', 'wp_template', templateId);
      }
    }
    return {
      entity: record,
      onNavigateToEntityRecord: getSettings().onNavigateToEntityRecord
    };
  }, [clientId]);
  if (!entity) {
    return (0, _react.createElement)(TemplateLockContentOnlyMenuItems, {
      clientId: clientId,
      onClose: onClose
    });
  }
  const isPattern = entity.type === 'wp_block';
  return (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)(_blockEditor.__unstableBlockSettingsMenuFirstItem, null, (0, _react.createElement)(_components.MenuItem, {
    onClick: () => {
      onNavigateToEntityRecord({
        postId: entity.id,
        postType: entity.type
      });
    }
  }, isPattern ? (0, _i18n.__)('Edit pattern') : (0, _i18n.__)('Edit template'))), (0, _react.createElement)(_components.__experimentalText, {
    variant: "muted",
    as: "p",
    className: "editor-content-only-settings-menu__description"
  }, isPattern ? (0, _i18n.__)('Edit the pattern to move, delete, or make further changes to this block.') : (0, _i18n.__)('Edit the template to move, delete, or make further changes to this block.')));
}
function TemplateLockContentOnlyMenuItems({
  clientId,
  onClose
}) {
  const {
    contentLockingParent
  } = (0, _data.useSelect)(select => {
    const {
      getContentLockingParent
    } = (0, _lockUnlock.unlock)(select(_blockEditor.store));
    return {
      contentLockingParent: getContentLockingParent(clientId)
    };
  }, [clientId]);
  const blockDisplayInformation = (0, _blockEditor.useBlockDisplayInformation)(contentLockingParent);
  // Disable reason: We're using a hook here so it has to be on top-level.
  // eslint-disable-next-line @wordpress/no-unused-vars-before-return
  const {
    modifyContentLockBlock,
    selectBlock
  } = (0, _lockUnlock.unlock)((0, _data.useDispatch)(_blockEditor.store));
  if (!blockDisplayInformation?.title) {
    return null;
  }
  return (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)(_blockEditor.__unstableBlockSettingsMenuFirstItem, null, (0, _react.createElement)(_components.MenuItem, {
    onClick: () => {
      selectBlock(contentLockingParent);
      modifyContentLockBlock(contentLockingParent);
      onClose();
    }
  }, (0, _i18n.__)('Unlock'))), (0, _react.createElement)(_components.__experimentalText, {
    variant: "muted",
    as: "p",
    className: "editor-content-only-settings-menu__description"
  }, (0, _i18n.__)('Temporarily unlock the parent block to edit, delete or make further changes to this block.')));
}
function ContentOnlySettingsMenu() {
  return (0, _react.createElement)(_blockEditor.BlockSettingsMenuControls, null, ({
    selectedClientIds,
    onClose
  }) => selectedClientIds.length === 1 && (0, _react.createElement)(ContentOnlySettingsMenuItems, {
    clientId: selectedClientIds[0],
    onClose: onClose
  }));
}
//# sourceMappingURL=content-only-settings-menu.js.map