"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _blocks = require("@wordpress/blocks");
var _data = require("@wordpress/data");
var _components = require("@wordpress/components");
var _i18n = require("@wordpress/i18n");
var _element = require("@wordpress/element");
var _compose = require("@wordpress/compose");
var _a11y = require("@wordpress/a11y");
var _preferences = require("@wordpress/preferences");
var _lockUnlock = require("../../lock-unlock");
var _store = require("../../store");
var _category = _interopRequireDefault(require("./category"));
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function BlockManager({
  blockTypes,
  categories,
  hasBlockSupport,
  isMatchingSearchTerm,
  numberOfHiddenBlocks,
  enableAllBlockTypes
}) {
  const debouncedSpeak = (0, _compose.useDebounce)(_a11y.speak, 500);
  const [search, setSearch] = (0, _element.useState)('');

  // Filtering occurs here (as opposed to `withSelect`) to avoid
  // wasted renders by consequence of `Array#filter` producing
  // a new value reference on each call.
  blockTypes = blockTypes.filter(blockType => hasBlockSupport(blockType, 'inserter', true) && (!search || isMatchingSearchTerm(blockType, search)) && (!blockType.parent || blockType.parent.includes('core/post-content')));

  // Announce search results on change
  (0, _element.useEffect)(() => {
    if (!search) {
      return;
    }
    const count = blockTypes.length;
    const resultsFoundMessage = (0, _i18n.sprintf)( /* translators: %d: number of results. */
    (0, _i18n._n)('%d result found.', '%d results found.', count), count);
    debouncedSpeak(resultsFoundMessage);
  }, [blockTypes.length, search, debouncedSpeak]);
  return (0, _react.createElement)("div", {
    className: "editor-block-manager__content"
  }, !!numberOfHiddenBlocks && (0, _react.createElement)("div", {
    className: "editor-block-manager__disabled-blocks-count"
  }, (0, _i18n.sprintf)( /* translators: %d: number of blocks. */
  (0, _i18n._n)('%d block is hidden.', '%d blocks are hidden.', numberOfHiddenBlocks), numberOfHiddenBlocks), (0, _react.createElement)(_components.Button, {
    variant: "link",
    onClick: () => enableAllBlockTypes(blockTypes)
  }, (0, _i18n.__)('Reset'))), (0, _react.createElement)(_components.SearchControl, {
    __nextHasNoMarginBottom: true,
    label: (0, _i18n.__)('Search for a block'),
    placeholder: (0, _i18n.__)('Search for a block'),
    value: search,
    onChange: nextSearch => setSearch(nextSearch),
    className: "editor-block-manager__search"
  }), (0, _react.createElement)("div", {
    tabIndex: "0",
    role: "region",
    "aria-label": (0, _i18n.__)('Available block types'),
    className: "editor-block-manager__results"
  }, blockTypes.length === 0 && (0, _react.createElement)("p", {
    className: "editor-block-manager__no-results"
  }, (0, _i18n.__)('No blocks found.')), categories.map(category => (0, _react.createElement)(_category.default, {
    key: category.slug,
    title: category.title,
    blockTypes: blockTypes.filter(blockType => blockType.category === category.slug)
  })), (0, _react.createElement)(_category.default, {
    title: (0, _i18n.__)('Uncategorized'),
    blockTypes: blockTypes.filter(({
      category
    }) => !category)
  })));
}
var _default = exports.default = (0, _compose.compose)([(0, _data.withSelect)(select => {
  var _get;
  const {
    getBlockTypes,
    getCategories,
    hasBlockSupport,
    isMatchingSearchTerm
  } = select(_blocks.store);
  const {
    get
  } = select(_preferences.store);

  // Some hidden blocks become unregistered
  // by removing for instance the plugin that registered them, yet
  // they're still remain as hidden by the user's action.
  // We consider "hidden", blocks which were hidden and
  // are still registered.
  const blockTypes = getBlockTypes();
  const hiddenBlockTypes = ((_get = get('core', 'hiddenBlockTypes')) !== null && _get !== void 0 ? _get : []).filter(hiddenBlock => {
    return blockTypes.some(registeredBlock => registeredBlock.name === hiddenBlock);
  });
  const numberOfHiddenBlocks = Array.isArray(hiddenBlockTypes) && hiddenBlockTypes.length;
  return {
    blockTypes,
    categories: getCategories(),
    hasBlockSupport,
    isMatchingSearchTerm,
    numberOfHiddenBlocks
  };
}), (0, _data.withDispatch)(dispatch => {
  const {
    showBlockTypes
  } = (0, _lockUnlock.unlock)(dispatch(_store.store));
  return {
    enableAllBlockTypes: blockTypes => {
      const blockNames = blockTypes.map(({
        name
      }) => name);
      showBlockTypes(blockNames);
    }
  };
})])(BlockManager);
//# sourceMappingURL=index.js.map