"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PostSchedulePanel;
var _react = require("react");
var _components = require("@wordpress/components");
var _i18n = require("@wordpress/i18n");
var _element = require("@wordpress/element");
var _data = require("@wordpress/data");
var _check = _interopRequireDefault(require("./check"));
var _index = _interopRequireDefault(require("./index"));
var _label = require("./label");
var _postPanelRow = _interopRequireDefault(require("../post-panel-row"));
var _store = require("../../store");
var _constants = require("../../store/constants");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const DESIGN_POST_TYPES = [_constants.TEMPLATE_POST_TYPE, _constants.TEMPLATE_PART_POST_TYPE, _constants.PATTERN_POST_TYPE, _constants.NAVIGATION_POST_TYPE];
function PostSchedulePanel() {
  const [popoverAnchor, setPopoverAnchor] = (0, _element.useState)(null);
  const postType = (0, _data.useSelect)(select => select(_store.store).getCurrentPostType(), []);
  // Memoize popoverProps to avoid returning a new object every time.
  const popoverProps = (0, _element.useMemo)(() => ({
    // Anchor the popover to the middle of the entire row so that it doesn't
    // move around when the label changes.
    anchor: popoverAnchor,
    'aria-label': (0, _i18n.__)('Change publish date'),
    placement: 'bottom-end'
  }), [popoverAnchor]);
  const label = (0, _label.usePostScheduleLabel)();
  const fullLabel = (0, _label.usePostScheduleLabel)({
    full: true
  });
  if (DESIGN_POST_TYPES.includes(postType)) {
    return null;
  }
  return (0, _react.createElement)(_check.default, null, (0, _react.createElement)(_postPanelRow.default, {
    label: (0, _i18n.__)('Publish'),
    ref: setPopoverAnchor
  }, (0, _react.createElement)(_components.Dropdown, {
    popoverProps: popoverProps,
    focusOnMount: true,
    className: "editor-post-schedule__panel-dropdown",
    contentClassName: "editor-post-schedule__dialog",
    renderToggle: ({
      onToggle,
      isOpen
    }) => (0, _react.createElement)(_components.Button, {
      size: "compact",
      className: "editor-post-schedule__dialog-toggle",
      variant: "tertiary",
      onClick: onToggle,
      "aria-label": (0, _i18n.sprintf)(
      // translators: %s: Current post date.
      (0, _i18n.__)('Change date: %s'), label),
      label: fullLabel,
      showTooltip: label !== fullLabel,
      "aria-expanded": isOpen
    }, label),
    renderContent: ({
      onClose
    }) => (0, _react.createElement)(_index.default, {
      onClose: onClose
    })
  })));
}
//# sourceMappingURL=panel.js.map