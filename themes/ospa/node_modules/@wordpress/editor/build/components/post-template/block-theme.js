"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BlockThemeControl;
var _react = require("react");
var _data = require("@wordpress/data");
var _htmlEntities = require("@wordpress/html-entities");
var _components = require("@wordpress/components");
var _i18n = require("@wordpress/i18n");
var _coreData = require("@wordpress/core-data");
var _icons = require("@wordpress/icons");
var _notices = require("@wordpress/notices");
var _store = require("../../store");
var _swapTemplateButton = _interopRequireDefault(require("./swap-template-button"));
var _resetDefaultTemplate = _interopRequireDefault(require("./reset-default-template"));
var _lockUnlock = require("../../lock-unlock");
var _createNewTemplate = _interopRequireDefault(require("./create-new-template"));
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const POPOVER_PROPS = {
  className: 'editor-post-template__dropdown',
  placement: 'bottom-start'
};
function BlockThemeControl({
  id
}) {
  const {
    isTemplateHidden,
    onNavigateToEntityRecord,
    getEditorSettings,
    hasGoBack
  } = (0, _data.useSelect)(select => {
    const {
      getRenderingMode,
      getEditorSettings: _getEditorSettings
    } = (0, _lockUnlock.unlock)(select(_store.store));
    const editorSettings = _getEditorSettings();
    return {
      isTemplateHidden: getRenderingMode() === 'post-only',
      onNavigateToEntityRecord: editorSettings.onNavigateToEntityRecord,
      getEditorSettings: _getEditorSettings,
      hasGoBack: editorSettings.hasOwnProperty('onNavigateToPreviousEntityRecord')
    };
  }, []);
  const {
    editedRecord: template,
    hasResolved
  } = (0, _coreData.useEntityRecord)('postType', 'wp_template', id);
  const {
    createSuccessNotice
  } = (0, _data.useDispatch)(_notices.store);
  const {
    setRenderingMode
  } = (0, _data.useDispatch)(_store.store);
  const canCreateTemplate = (0, _data.useSelect)(select => {
    var _select$canUser;
    return (_select$canUser = select(_coreData.store).canUser('create', 'templates')) !== null && _select$canUser !== void 0 ? _select$canUser : false;
  });
  if (!hasResolved) {
    return null;
  }

  // The site editor does not have a `onNavigateToPreviousEntityRecord` setting as it uses its own routing
  // and assigns its own backlink to focusMode pages.
  const notificationAction = hasGoBack ? [{
    label: (0, _i18n.__)('Go back'),
    onClick: () => getEditorSettings().onNavigateToPreviousEntityRecord()
  }] : undefined;
  return (0, _react.createElement)(_components.DropdownMenu, {
    popoverProps: POPOVER_PROPS,
    focusOnMount: true,
    toggleProps: {
      size: 'compact',
      variant: 'tertiary'
    },
    label: (0, _i18n.__)('Template options'),
    text: (0, _htmlEntities.decodeEntities)(template.title),
    icon: null
  }, ({
    onClose
  }) => (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)(_components.MenuGroup, null, canCreateTemplate && (0, _react.createElement)(_components.MenuItem, {
    onClick: () => {
      onNavigateToEntityRecord({
        postId: template.id,
        postType: 'wp_template'
      });
      onClose();
      createSuccessNotice((0, _i18n.__)('Editing template. Changes made here affect all posts and pages that use the template.'), {
        type: 'snackbar',
        actions: notificationAction
      });
    }
  }, (0, _i18n.__)('Edit template')), (0, _react.createElement)(_swapTemplateButton.default, {
    onClick: onClose
  }), (0, _react.createElement)(_resetDefaultTemplate.default, {
    onClick: onClose
  }), canCreateTemplate && (0, _react.createElement)(_createNewTemplate.default, {
    onClick: onClose
  })), (0, _react.createElement)(_components.MenuGroup, null, (0, _react.createElement)(_components.MenuItem, {
    icon: !isTemplateHidden ? _icons.check : undefined,
    isSelected: !isTemplateHidden,
    role: "menuitemcheckbox",
    onClick: () => {
      setRenderingMode(isTemplateHidden ? 'template-locked' : 'post-only');
    }
  }, (0, _i18n.__)('Show template')))));
}
//# sourceMappingURL=block-theme.js.map