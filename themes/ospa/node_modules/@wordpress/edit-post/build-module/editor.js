import { createElement } from "react";
/**
 * WordPress dependencies
 */
import { useSelect } from '@wordpress/data';
import { ErrorBoundary, PostLockedModal, store as editorStore, privateApis as editorPrivateApis } from '@wordpress/editor';
import { useMemo } from '@wordpress/element';
import { SlotFillProvider } from '@wordpress/components';
import { store as coreStore } from '@wordpress/core-data';
import { CommandMenu } from '@wordpress/commands';

/**
 * Internal dependencies
 */
import Layout from './components/layout';
import EditorInitialization from './components/editor-initialization';
import { store as editPostStore } from './store';
import { unlock } from './lock-unlock';
import useNavigateToEntityRecord from './hooks/use-navigate-to-entity-record';
const {
  ExperimentalEditorProvider
} = unlock(editorPrivateApis);
function Editor({
  postId: initialPostId,
  postType: initialPostType,
  settings,
  initialEdits,
  ...props
}) {
  const {
    currentPost,
    onNavigateToEntityRecord,
    onNavigateToPreviousEntityRecord
  } = useNavigateToEntityRecord(initialPostId, initialPostType, 'post-only');
  const {
    post,
    template
  } = useSelect(select => {
    var _getPostType$viewable;
    const {
      getEditedPostTemplate
    } = select(editPostStore);
    const {
      getEntityRecord,
      getPostType,
      canUser
    } = select(coreStore);
    const {
      getEditorSettings
    } = select(editorStore);
    const postObject = getEntityRecord('postType', currentPost.postType, currentPost.postId);
    const supportsTemplateMode = getEditorSettings().supportsTemplateMode;
    const isViewable = (_getPostType$viewable = getPostType(currentPost.postType)?.viewable) !== null && _getPostType$viewable !== void 0 ? _getPostType$viewable : false;
    const canViewTemplate = canUser('read', 'templates');
    return {
      template: supportsTemplateMode && isViewable && canViewTemplate && currentPost.postType !== 'wp_template' ? getEditedPostTemplate() : null,
      post: postObject
    };
  }, [currentPost.postType, currentPost.postId]);
  const editorSettings = useMemo(() => ({
    ...settings,
    onNavigateToEntityRecord,
    onNavigateToPreviousEntityRecord,
    defaultRenderingMode: 'post-only'
  }), [settings, onNavigateToEntityRecord, onNavigateToPreviousEntityRecord]);
  const initialPost = useMemo(() => {
    return {
      type: initialPostType,
      id: initialPostId
    };
  }, [initialPostType, initialPostId]);
  if (!post) {
    return null;
  }
  return createElement(SlotFillProvider, null, createElement(ExperimentalEditorProvider, {
    settings: editorSettings,
    post: post,
    initialEdits: initialEdits,
    useSubRegistry: false,
    __unstableTemplate: template,
    ...props
  }, createElement(ErrorBoundary, null, createElement(CommandMenu, null), createElement(EditorInitialization, null), createElement(Layout, {
    initialPost: initialPost
  })), createElement(PostLockedModal, null)));
}
export default Editor;
//# sourceMappingURL=editor.js.map