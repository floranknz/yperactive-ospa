"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _clsx = _interopRequireDefault(require("clsx"));
var _data = require("@wordpress/data");
var _components = require("@wordpress/components");
var _i18n = require("@wordpress/i18n");
var _url = require("@wordpress/url");
var _icons = require("@wordpress/icons");
var _editor = require("@wordpress/editor");
var _coreData = require("@wordpress/core-data");
var _compose = require("@wordpress/compose");
var _store = require("../../../store");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function FullscreenModeClose({
  showTooltip,
  icon,
  href,
  initialPost
}) {
  var _postType$labels$view;
  const {
    isActive,
    isRequestingSiteIcon,
    postType,
    siteIconUrl
  } = (0, _data.useSelect)(select => {
    const {
      getCurrentPostType
    } = select(_editor.store);
    const {
      isFeatureActive
    } = select(_store.store);
    const {
      getEntityRecord,
      getPostType,
      isResolving
    } = select(_coreData.store);
    const siteData = getEntityRecord('root', '__unstableBase', undefined) || {};
    const _postType = initialPost?.type || getCurrentPostType();
    return {
      isActive: isFeatureActive('fullscreenMode'),
      isRequestingSiteIcon: isResolving('getEntityRecord', ['root', '__unstableBase', undefined]),
      postType: getPostType(_postType),
      siteIconUrl: siteData.site_icon_url
    };
  }, []);
  const disableMotion = (0, _compose.useReducedMotion)();
  if (!isActive || !postType) {
    return null;
  }
  let buttonIcon = (0, _react.createElement)(_components.Icon, {
    size: "36px",
    icon: _icons.wordpress
  });
  const effect = {
    expand: {
      scale: 1.25,
      transition: {
        type: 'tween',
        duration: '0.3'
      }
    }
  };
  if (siteIconUrl) {
    buttonIcon = (0, _react.createElement)(_components.__unstableMotion.img, {
      variants: !disableMotion && effect,
      alt: (0, _i18n.__)('Site Icon'),
      className: "edit-post-fullscreen-mode-close_site-icon",
      src: siteIconUrl
    });
  }
  if (isRequestingSiteIcon) {
    buttonIcon = null;
  }

  // Override default icon if custom icon is provided via props.
  if (icon) {
    buttonIcon = (0, _react.createElement)(_components.Icon, {
      size: "36px",
      icon: icon
    });
  }
  const classes = (0, _clsx.default)({
    'edit-post-fullscreen-mode-close': true,
    'has-icon': siteIconUrl
  });
  const buttonHref = href !== null && href !== void 0 ? href : (0, _url.addQueryArgs)('edit.php', {
    post_type: postType.slug
  });
  const buttonLabel = (_postType$labels$view = postType?.labels?.view_items) !== null && _postType$labels$view !== void 0 ? _postType$labels$view : (0, _i18n.__)('Back');
  return (0, _react.createElement)(_components.__unstableMotion.div, {
    whileHover: "expand"
  }, (0, _react.createElement)(_components.Button, {
    className: classes,
    href: buttonHref,
    label: buttonLabel,
    showTooltip: showTooltip
  }, buttonIcon));
}
var _default = exports.default = FullscreenModeClose;
//# sourceMappingURL=index.js.map