"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePaddingAppender = usePaddingAppender;
var _data = require("@wordpress/data");
var _compose = require("@wordpress/compose");
var _blockEditor = require("@wordpress/block-editor");
var _blocks = require("@wordpress/blocks");
/**
 * WordPress dependencies
 */

function usePaddingAppender() {
  const registry = (0, _data.useRegistry)();
  return (0, _compose.useRefEffect)(node => {
    function onMouseDown(event) {
      if (event.target !== node) {
        return;
      }
      const {
        ownerDocument
      } = node;
      const {
        defaultView
      } = ownerDocument;
      const paddingBottom = defaultView.parseInt(defaultView.getComputedStyle(node).paddingBottom, 10);
      if (!paddingBottom) {
        return;
      }

      // Only handle clicks under the last child.
      const lastChild = node.lastElementChild;
      if (!lastChild) {
        return;
      }
      const lastChildRect = lastChild.getBoundingClientRect();
      if (event.clientY < lastChildRect.bottom) {
        return;
      }
      event.preventDefault();
      const blockOrder = registry.select(_blockEditor.store).getBlockOrder('');
      const lastBlockClientId = blockOrder[blockOrder.length - 1];

      // Do nothing when only default block appender is present.
      if (!lastBlockClientId) {
        return;
      }
      const lastBlock = registry.select(_blockEditor.store).getBlock(lastBlockClientId);
      const {
        selectBlock,
        insertDefaultBlock
      } = registry.dispatch(_blockEditor.store);
      if ((0, _blocks.isUnmodifiedDefaultBlock)(lastBlock)) {
        selectBlock(lastBlockClientId);
      } else {
        insertDefaultBlock();
      }
    }
    node.addEventListener('mousedown', onMouseDown);
    return () => {
      node.removeEventListener('mousedown', onMouseDown);
    };
  }, [registry]);
}
//# sourceMappingURL=use-padding-appender.js.map