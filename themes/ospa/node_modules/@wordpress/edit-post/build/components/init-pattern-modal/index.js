"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = InitPatternModal;
var _react = require("react");
var _data = require("@wordpress/data");
var _i18n = require("@wordpress/i18n");
var _components = require("@wordpress/components");
var _element = require("@wordpress/element");
var _editor = require("@wordpress/editor");
var _blockEditor = require("@wordpress/block-editor");
var _lockUnlock = require("../../lock-unlock");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const {
  ReusableBlocksRenameHint
} = (0, _lockUnlock.unlock)(_blockEditor.privateApis);
function InitPatternModal() {
  const {
    editPost
  } = (0, _data.useDispatch)(_editor.store);
  const [isModalOpen, setIsModalOpen] = (0, _element.useState)(false);
  const [syncType, setSyncType] = (0, _element.useState)(undefined);
  const [title, setTitle] = (0, _element.useState)('');
  const {
    postType,
    isNewPost
  } = (0, _data.useSelect)(select => {
    const {
      getEditedPostAttribute,
      isCleanNewPost
    } = select(_editor.store);
    return {
      postType: getEditedPostAttribute('type'),
      isNewPost: isCleanNewPost()
    };
  }, []);
  (0, _element.useEffect)(() => {
    if (isNewPost && postType === 'wp_block') {
      setIsModalOpen(true);
    }
    // We only want the modal to open when the page is first loaded.
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  if (postType !== 'wp_block' || !isNewPost) {
    return null;
  }
  return (0, _react.createElement)(_react.Fragment, null, isModalOpen && (0, _react.createElement)(_components.Modal, {
    title: (0, _i18n.__)('Create pattern'),
    onRequestClose: () => {
      setIsModalOpen(false);
    },
    overlayClassName: "reusable-blocks-menu-items__convert-modal"
  }, (0, _react.createElement)("form", {
    onSubmit: event => {
      event.preventDefault();
      setIsModalOpen(false);
      editPost({
        title,
        meta: {
          wp_pattern_sync_status: syncType
        }
      });
    }
  }, (0, _react.createElement)(_components.__experimentalVStack, {
    spacing: "5"
  }, (0, _react.createElement)(_components.TextControl, {
    label: (0, _i18n.__)('Name'),
    value: title,
    onChange: setTitle,
    placeholder: (0, _i18n.__)('My pattern'),
    className: "patterns-create-modal__name-input",
    __nextHasNoMarginBottom: true,
    __next40pxDefaultSize: true
  }), (0, _react.createElement)(ReusableBlocksRenameHint, null), (0, _react.createElement)(_components.ToggleControl, {
    label: (0, _i18n._x)('Synced', 'Option that makes an individual pattern synchronized'),
    help: (0, _i18n.__)('Sync this pattern across multiple locations.'),
    checked: !syncType,
    onChange: () => {
      setSyncType(!syncType ? 'unsynced' : undefined);
    }
  }), (0, _react.createElement)(_components.__experimentalHStack, {
    justify: "right"
  }, (0, _react.createElement)(_components.Button, {
    variant: "primary",
    type: "submit",
    disabled: !title,
    __experimentalIsFocusable: true
  }, (0, _i18n.__)('Create')))))));
}
//# sourceMappingURL=index.js.map