{"version":3,"names":["apiFetch","createBlobURL","revokeBlobURL","__","sprintf","noop","getMimeTypesArray","wpMimeTypesObject","Object","entries","map","extensionsString","mime","type","split","extensions","extension","flat","uploadMedia","allowedTypes","additionalData","filesList","maxUploadFileSize","onError","onFileChange","wpAllowedMimeTypes","files","filesSet","setAndUpdateFiles","idx","value","url","filter","Boolean","isAllowedType","fileType","some","allowedType","includes","startsWith","allowedMimeTypesForUser","isAllowedMimeTypeForUser","validFiles","mediaFile","code","message","name","file","size","push","length","_savedMedia$caption$r","savedMedia","createMediaFromFile","alt_text","source_url","savedMediaProps","mediaObject","alt","caption","raw","title","error","data","window","FormData","append","replace","forEach","key","path","body","method"],"sources":["@wordpress/media-utils/src/utils/upload-media.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\nimport { createBlobURL, revokeBlobURL } from '@wordpress/blob';\nimport { __, sprintf } from '@wordpress/i18n';\n\nconst noop = () => {};\n\n/**\n * Browsers may use unexpected mime types, and they differ from browser to browser.\n * This function computes a flexible array of mime types from the mime type structured provided by the server.\n * Converts { jpg|jpeg|jpe: \"image/jpeg\" } into [ \"image/jpeg\", \"image/jpg\", \"image/jpeg\", \"image/jpe\" ]\n * The computation of this array instead of directly using the object,\n * solves the problem in chrome where mp3 files have audio/mp3 as mime type instead of audio/mpeg.\n * https://bugs.chromium.org/p/chromium/issues/detail?id=227004\n *\n * @param {?Object} wpMimeTypesObject Mime type object received from the server.\n *                                    Extensions are keys separated by '|' and values are mime types associated with an extension.\n *\n * @return {?Array} An array of mime types or the parameter passed if it was \"falsy\".\n */\nexport function getMimeTypesArray( wpMimeTypesObject ) {\n\tif ( ! wpMimeTypesObject ) {\n\t\treturn wpMimeTypesObject;\n\t}\n\treturn Object.entries( wpMimeTypesObject )\n\t\t.map( ( [ extensionsString, mime ] ) => {\n\t\t\tconst [ type ] = mime.split( '/' );\n\t\t\tconst extensions = extensionsString.split( '|' );\n\t\t\treturn [\n\t\t\t\tmime,\n\t\t\t\t...extensions.map(\n\t\t\t\t\t( extension ) => `${ type }/${ extension }`\n\t\t\t\t),\n\t\t\t];\n\t\t} )\n\t\t.flat();\n}\n\n/**\n *\tMedia Upload is used by audio, image, gallery, video, and file blocks to\n *\thandle uploading a media file when a file upload button is activated.\n *\n *\tTODO: future enhancement to add an upload indicator.\n *\n * @param {Object}   $0                    Parameters object passed to the function.\n * @param {?Array}   $0.allowedTypes       Array with the types of media that can be uploaded, if unset all types are allowed.\n * @param {?Object}  $0.additionalData     Additional data to include in the request.\n * @param {Array}    $0.filesList          List of files.\n * @param {?number}  $0.maxUploadFileSize  Maximum upload size in bytes allowed for the site.\n * @param {Function} $0.onError            Function called when an error happens.\n * @param {Function} $0.onFileChange       Function called each time a file or a temporary representation of the file is available.\n * @param {?Object}  $0.wpAllowedMimeTypes List of allowed mime types and file extensions.\n */\nexport async function uploadMedia( {\n\tallowedTypes,\n\tadditionalData = {},\n\tfilesList,\n\tmaxUploadFileSize,\n\tonError = noop,\n\tonFileChange,\n\twpAllowedMimeTypes = null,\n} ) {\n\t// Cast filesList to array.\n\tconst files = [ ...filesList ];\n\n\tconst filesSet = [];\n\tconst setAndUpdateFiles = ( idx, value ) => {\n\t\trevokeBlobURL( filesSet[ idx ]?.url );\n\t\tfilesSet[ idx ] = value;\n\t\tonFileChange( filesSet.filter( Boolean ) );\n\t};\n\n\t// Allowed type specified by consumer.\n\tconst isAllowedType = ( fileType ) => {\n\t\tif ( ! allowedTypes ) {\n\t\t\treturn true;\n\t\t}\n\t\treturn allowedTypes.some( ( allowedType ) => {\n\t\t\t// If a complete mimetype is specified verify if it matches exactly the mime type of the file.\n\t\t\tif ( allowedType.includes( '/' ) ) {\n\t\t\t\treturn allowedType === fileType;\n\t\t\t}\n\t\t\t// Otherwise a general mime type is used and we should verify if the file mimetype starts with it.\n\t\t\treturn fileType.startsWith( `${ allowedType }/` );\n\t\t} );\n\t};\n\n\t// Allowed types for the current WP_User.\n\tconst allowedMimeTypesForUser = getMimeTypesArray( wpAllowedMimeTypes );\n\tconst isAllowedMimeTypeForUser = ( fileType ) => {\n\t\treturn allowedMimeTypesForUser.includes( fileType );\n\t};\n\n\tconst validFiles = [];\n\n\tfor ( const mediaFile of files ) {\n\t\t// Verify if user is allowed to upload this mime type.\n\t\t// Defer to the server when type not detected.\n\t\tif (\n\t\t\tallowedMimeTypesForUser &&\n\t\t\tmediaFile.type &&\n\t\t\t! isAllowedMimeTypeForUser( mediaFile.type )\n\t\t) {\n\t\t\tonError( {\n\t\t\t\tcode: 'MIME_TYPE_NOT_ALLOWED_FOR_USER',\n\t\t\t\tmessage: sprintf(\n\t\t\t\t\t// translators: %s: file name.\n\t\t\t\t\t__(\n\t\t\t\t\t\t'%s: Sorry, you are not allowed to upload this file type.'\n\t\t\t\t\t),\n\t\t\t\t\tmediaFile.name\n\t\t\t\t),\n\t\t\t\tfile: mediaFile,\n\t\t\t} );\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Check if the block supports this mime type.\n\t\t// Defer to the server when type not detected.\n\t\tif ( mediaFile.type && ! isAllowedType( mediaFile.type ) ) {\n\t\t\tonError( {\n\t\t\t\tcode: 'MIME_TYPE_NOT_SUPPORTED',\n\t\t\t\tmessage: sprintf(\n\t\t\t\t\t// translators: %s: file name.\n\t\t\t\t\t__( '%s: Sorry, this file type is not supported here.' ),\n\t\t\t\t\tmediaFile.name\n\t\t\t\t),\n\t\t\t\tfile: mediaFile,\n\t\t\t} );\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Verify if file is greater than the maximum file upload size allowed for the site.\n\t\tif ( maxUploadFileSize && mediaFile.size > maxUploadFileSize ) {\n\t\t\tonError( {\n\t\t\t\tcode: 'SIZE_ABOVE_LIMIT',\n\t\t\t\tmessage: sprintf(\n\t\t\t\t\t// translators: %s: file name.\n\t\t\t\t\t__(\n\t\t\t\t\t\t'%s: This file exceeds the maximum upload size for this site.'\n\t\t\t\t\t),\n\t\t\t\t\tmediaFile.name\n\t\t\t\t),\n\t\t\t\tfile: mediaFile,\n\t\t\t} );\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Don't allow empty files to be uploaded.\n\t\tif ( mediaFile.size <= 0 ) {\n\t\t\tonError( {\n\t\t\t\tcode: 'EMPTY_FILE',\n\t\t\t\tmessage: sprintf(\n\t\t\t\t\t// translators: %s: file name.\n\t\t\t\t\t__( '%s: This file is empty.' ),\n\t\t\t\t\tmediaFile.name\n\t\t\t\t),\n\t\t\t\tfile: mediaFile,\n\t\t\t} );\n\t\t\tcontinue;\n\t\t}\n\n\t\tvalidFiles.push( mediaFile );\n\n\t\t// Set temporary URL to create placeholder media file, this is replaced\n\t\t// with final file from media gallery when upload is `done` below.\n\t\tfilesSet.push( { url: createBlobURL( mediaFile ) } );\n\t\tonFileChange( filesSet );\n\t}\n\n\tfor ( let idx = 0; idx < validFiles.length; ++idx ) {\n\t\tconst mediaFile = validFiles[ idx ];\n\t\ttry {\n\t\t\tconst savedMedia = await createMediaFromFile(\n\t\t\t\tmediaFile,\n\t\t\t\tadditionalData\n\t\t\t);\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\tconst { alt_text, source_url, ...savedMediaProps } = savedMedia;\n\t\t\tconst mediaObject = {\n\t\t\t\t...savedMediaProps,\n\t\t\t\talt: savedMedia.alt_text,\n\t\t\t\tcaption: savedMedia.caption?.raw ?? '',\n\t\t\t\ttitle: savedMedia.title.raw,\n\t\t\t\turl: savedMedia.source_url,\n\t\t\t};\n\t\t\tsetAndUpdateFiles( idx, mediaObject );\n\t\t} catch ( error ) {\n\t\t\t// Reset to empty on failure.\n\t\t\tsetAndUpdateFiles( idx, null );\n\t\t\tlet message;\n\t\t\tif ( error.message ) {\n\t\t\t\tmessage = error.message;\n\t\t\t} else {\n\t\t\t\tmessage = sprintf(\n\t\t\t\t\t// translators: %s: file name\n\t\t\t\t\t__( 'Error while uploading file %s to the media library.' ),\n\t\t\t\t\tmediaFile.name\n\t\t\t\t);\n\t\t\t}\n\t\t\tonError( {\n\t\t\t\tcode: 'GENERAL',\n\t\t\t\tmessage,\n\t\t\t\tfile: mediaFile,\n\t\t\t} );\n\t\t}\n\t}\n}\n\n/**\n * @param {File}    file           Media File to Save.\n * @param {?Object} additionalData Additional data to include in the request.\n *\n * @return {Promise} Media Object Promise.\n */\nfunction createMediaFromFile( file, additionalData ) {\n\t// Create upload payload.\n\tconst data = new window.FormData();\n\tdata.append( 'file', file, file.name || file.type.replace( '/', '.' ) );\n\tif ( additionalData ) {\n\t\tObject.entries( additionalData ).forEach( ( [ key, value ] ) =>\n\t\t\tdata.append( key, value )\n\t\t);\n\t}\n\treturn apiFetch( {\n\t\tpath: '/wp/v2/media',\n\t\tbody: data,\n\t\tmethod: 'POST',\n\t} );\n}\n"],"mappings":"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","ignoreList":[]}